[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "urlretrieve",
        "importPath": "urllib",
        "description": "urllib",
        "isExtraImport": true,
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "maxint",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "version_info",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "sublime,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sublime.",
        "description": "sublime.",
        "detail": "sublime.",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "ctime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "mktime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "localtime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "strftime",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urlparse",
        "description": "urlparse",
        "detail": "urlparse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urlparse",
        "description": "urlparse",
        "isExtraImport": true,
        "detail": "urlparse",
        "documentation": {}
    },
    {
        "label": "make_server",
        "importPath": "wsgiref.simple_server",
        "description": "wsgiref.simple_server",
        "isExtraImport": true,
        "detail": "wsgiref.simple_server",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkstats",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkconfig",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "environment",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "runner",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "daemon",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "cli",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "environment",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "checkconfig",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "environment",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "environment",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "utility",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "environment",
        "importPath": "voltcli",
        "description": "voltcli",
        "isExtraImport": true,
        "detail": "voltcli",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "importPath": "voltcli.checkstats",
        "description": "voltcli.checkstats",
        "isExtraImport": true,
        "detail": "voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "importPath": "voltcli.checkstats",
        "description": "voltcli.checkstats",
        "isExtraImport": true,
        "detail": "voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "importPath": "voltcli.checkstats",
        "description": "voltcli.checkstats",
        "isExtraImport": true,
        "detail": "voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "importPath": "voltcli.checkstats",
        "description": "voltcli.checkstats",
        "isExtraImport": true,
        "detail": "voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "importPath": "voltcli.checkstats",
        "description": "voltcli.checkstats",
        "isExtraImport": true,
        "detail": "voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Host",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Host",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Host",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "importPath": "voltcli.hostinfo",
        "description": "voltcli.hostinfo",
        "isExtraImport": true,
        "detail": "voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "compile",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "DOTALL",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "MULTILINE",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "VERBOSE",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "MULTILINE",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "DOTALL",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sub",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "alarm",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "SIGALRM",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib.request",
        "description": "urllib.request",
        "isExtraImport": true,
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "urllib.error",
        "description": "urllib.error",
        "isExtraImport": true,
        "detail": "urllib.error",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "call",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "STDOUT",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "STDOUT",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "urllib.request,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request.",
        "description": "urllib.request.",
        "detail": "urllib.request.",
        "documentation": {}
    },
    {
        "label": "Cluster",
        "importPath": "voltcli.clusterinfo",
        "description": "voltcli.clusterinfo",
        "isExtraImport": true,
        "detail": "voltcli.clusterinfo",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "isfile",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "voltdbclient",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "voltdbclient",
        "description": "voltdbclient",
        "detail": "voltdbclient",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclient",
        "description": "voltdbclient",
        "isExtraImport": true,
        "detail": "voltdbclient",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclient",
        "description": "voltdbclient",
        "isExtraImport": true,
        "detail": "voltdbclient",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltcli.verbs",
        "description": "voltcli.verbs",
        "isExtraImport": true,
        "detail": "voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "ZipFile",
        "importPath": "zipfile",
        "description": "zipfile",
        "isExtraImport": true,
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "pkgutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pkgutil",
        "description": "pkgutil",
        "detail": "pkgutil",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "hexlify",
        "importPath": "binascii",
        "description": "binascii",
        "isExtraImport": true,
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "whitespace",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "maketrans",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "socket",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "array",
        "description": "array",
        "detail": "array",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "testspec",
        "importPath": "testdata",
        "description": "testdata",
        "isExtraImport": true,
        "detail": "testdata",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "catalog_utils",
        "description": "catalog_utils",
        "isExtraImport": true,
        "detail": "catalog_utils",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "copyfile",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Scanner",
        "importPath": "simplejson.scanner",
        "description": "simplejson.scanner",
        "isExtraImport": true,
        "detail": "simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "pattern",
        "importPath": "simplejson.scanner",
        "description": "simplejson.scanner",
        "isExtraImport": true,
        "detail": "simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "sre_parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_parse",
        "description": "sre_parse",
        "detail": "sre_parse",
        "documentation": {}
    },
    {
        "label": "sre_compile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_compile",
        "description": "sre_compile",
        "detail": "sre_compile",
        "documentation": {}
    },
    {
        "label": "sre_constants",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sre_constants",
        "description": "sre_constants",
        "detail": "sre_constants",
        "documentation": {}
    },
    {
        "label": "BRANCH",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {}
    },
    {
        "label": "SUBPATTERN",
        "importPath": "sre_constants",
        "description": "sre_constants",
        "isExtraImport": true,
        "detail": "sre_constants",
        "documentation": {}
    },
    {
        "label": "simplejson",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "simplejson",
        "description": "simplejson",
        "detail": "simplejson",
        "documentation": {}
    },
    {
        "label": "filecmp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "filecmp",
        "description": "filecmp",
        "detail": "filecmp",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "importPath": "fnmatch",
        "description": "fnmatch",
        "isExtraImport": true,
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "SubElement",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "VoltQueryClient",
        "importPath": "QueryPy2",
        "description": "QueryPy2",
        "isExtraImport": true,
        "detail": "QueryPy2",
        "documentation": {}
    },
    {
        "label": "VoltQueryClient",
        "importPath": "QueryPy2",
        "description": "QueryPy2",
        "isExtraImport": true,
        "detail": "QueryPy2",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "XMLUtils",
        "description": "XMLUtils",
        "isExtraImport": true,
        "detail": "XMLUtils",
        "documentation": {}
    },
    {
        "label": "prettify",
        "importPath": "XMLUtils",
        "description": "XMLUtils",
        "isExtraImport": true,
        "detail": "XMLUtils",
        "documentation": {}
    },
    {
        "label": "voltdbclientpy2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "FastSerializer",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltColumn",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltTable",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "FastSerializer",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "FastSerializer",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltProcedure",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "voltdbclientpy2",
        "description": "voltdbclientpy2",
        "isExtraImport": true,
        "detail": "voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "fastserializer",
        "description": "fastserializer",
        "isExtraImport": true,
        "detail": "fastserializer",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "valleak",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "valleak",
        "description": "valleak",
        "detail": "valleak",
        "documentation": {}
    },
    {
        "label": "cStringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cStringIO",
        "description": "cStringIO",
        "detail": "cStringIO",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "xml.dom.minidom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "parseString",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "runcppunit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runcppunit",
        "description": "runcppunit",
        "detail": "runcppunit",
        "documentation": {}
    },
    {
        "label": "valleak_test",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "valleak_test",
        "description": "valleak_test",
        "detail": "valleak_test",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Condition",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "SortNulls",
        "importPath": "SortNulls",
        "description": "SortNulls",
        "isExtraImport": true,
        "detail": "SortNulls",
        "documentation": {}
    },
    {
        "label": "SortNulls",
        "importPath": "SortNulls",
        "description": "SortNulls",
        "isExtraImport": true,
        "detail": "SortNulls",
        "documentation": {}
    },
    {
        "label": "SortNulls",
        "importPath": "SortNulls",
        "description": "SortNulls",
        "isExtraImport": true,
        "detail": "SortNulls",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_summary",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "Reproduce",
        "importPath": "SQLCoverageReport",
        "description": "SQLCoverageReport",
        "isExtraImport": true,
        "detail": "SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "StandardNormalizer",
        "importPath": "StandardNormalizer",
        "description": "StandardNormalizer",
        "isExtraImport": true,
        "detail": "StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "StandardNormalizer",
        "importPath": "StandardNormalizer",
        "description": "StandardNormalizer",
        "isExtraImport": true,
        "detail": "StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "NotANormalizer",
        "importPath": "NotANormalizer",
        "description": "NotANormalizer",
        "isExtraImport": true,
        "detail": "NotANormalizer",
        "documentation": {}
    },
    {
        "label": "NotANormalizer",
        "importPath": "NotANormalizer",
        "description": "NotANormalizer",
        "isExtraImport": true,
        "detail": "NotANormalizer",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "cgi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cgi",
        "description": "cgi",
        "detail": "cgi",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "cPickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cPickle",
        "description": "cPickle",
        "detail": "cPickle",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "strtobool",
        "importPath": "distutils.util",
        "description": "distutils.util",
        "isExtraImport": true,
        "detail": "distutils.util",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "seed",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "imp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "imp",
        "description": "imp",
        "detail": "imp",
        "documentation": {}
    },
    {
        "label": "SQLGenerator",
        "importPath": "SQLGenerator",
        "description": "SQLGenerator",
        "isExtraImport": true,
        "detail": "SQLGenerator",
        "documentation": {}
    },
    {
        "label": "xmlrunner",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xmlrunner",
        "description": "xmlrunner",
        "detail": "xmlrunner",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "std",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mean",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "DDLGenerator",
        "importPath": "ddlgenerator",
        "description": "ddlgenerator",
        "isExtraImport": true,
        "detail": "ddlgenerator",
        "documentation": {}
    },
    {
        "label": "gdb.printing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gdb.printing",
        "description": "gdb.printing",
        "detail": "gdb.printing",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "google3.pyglib",
        "description": "google3.pyglib",
        "isExtraImport": true,
        "detail": "google3.pyglib",
        "documentation": {}
    },
    {
        "label": "googletest",
        "importPath": "google3.testing.pybase",
        "description": "google3.testing.pybase",
        "isExtraImport": true,
        "detail": "google3.testing.pybase",
        "documentation": {}
    },
    {
        "label": "fake_target_util",
        "importPath": "google3.testing.pybase",
        "description": "google3.testing.pybase",
        "isExtraImport": true,
        "detail": "google3.testing.pybase",
        "documentation": {}
    },
    {
        "label": "googletest",
        "importPath": "google3.testing.pybase",
        "description": "google3.testing.pybase",
        "isExtraImport": true,
        "detail": "google3.testing.pybase",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "google3.util.geometry.pywraps2",
        "description": "google3.util.geometry.pywraps2",
        "isExtraImport": true,
        "detail": "google3.util.geometry.pywraps2",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "s2",
        "description": "s2",
        "isExtraImport": true,
        "detail": "s2",
        "documentation": {}
    },
    {
        "label": "keywords",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "tokenize",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "ast",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "ast",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "gmock_class",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "utils",
        "importPath": "cpp",
        "description": "cpp",
        "isExtraImport": true,
        "detail": "cpp",
        "documentation": {}
    },
    {
        "label": "sets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sets",
        "description": "sets",
        "detail": "sets",
        "documentation": {}
    },
    {
        "label": "fuse_gtest_files",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fuse_gtest_files",
        "description": "fuse_gtest_files",
        "detail": "fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "cookielib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cookielib",
        "description": "cookielib",
        "detail": "cookielib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "handlers",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "md5",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "md5",
        "description": "md5",
        "detail": "md5",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "urllib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib2",
        "description": "urllib2",
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "urllib2",
        "description": "urllib2",
        "isExtraImport": true,
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "gmock_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gmock_test_utils",
        "description": "gmock_test_utils",
        "detail": "gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "gtest_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_test_utils",
        "description": "gtest_test_utils",
        "detail": "gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "common",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "common",
        "description": "common",
        "detail": "common",
        "documentation": {}
    },
    {
        "label": "gtest_json_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_json_test_utils",
        "description": "gtest_json_test_utils",
        "detail": "gtest_json_test_utils",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "gtest_xml_test_utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gtest_xml_test_utils",
        "description": "gtest_xml_test_utils",
        "detail": "gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "schemaobject.collections",
        "description": "schemaobject.collections",
        "isExtraImport": true,
        "detail": "schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MySQLdb",
        "description": "MySQLdb",
        "detail": "MySQLdb",
        "documentation": {}
    },
    {
        "label": "SchemaOption",
        "importPath": "schemaobject.option",
        "description": "schemaobject.option",
        "isExtraImport": true,
        "detail": "schemaobject.option",
        "documentation": {}
    },
    {
        "label": "SchemaOption",
        "importPath": "schemaobject.option",
        "description": "schemaobject.option",
        "isExtraImport": true,
        "detail": "schemaobject.option",
        "documentation": {}
    },
    {
        "label": "SchemaOption",
        "importPath": "schemaobject.option",
        "description": "schemaobject.option",
        "isExtraImport": true,
        "detail": "schemaobject.option",
        "documentation": {}
    },
    {
        "label": "TableSchemaBuilder",
        "importPath": "schemaobject.table",
        "description": "schemaobject.table",
        "isExtraImport": true,
        "detail": "schemaobject.table",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "importPath": "schemaobject.connection",
        "description": "schemaobject.connection",
        "isExtraImport": true,
        "detail": "schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "REGEX_RFC1738",
        "importPath": "schemaobject.connection",
        "description": "schemaobject.connection",
        "isExtraImport": true,
        "detail": "schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "DatabaseSchemaBuilder",
        "importPath": "schemaobject.database",
        "description": "schemaobject.database",
        "isExtraImport": true,
        "detail": "schemaobject.database",
        "documentation": {}
    },
    {
        "label": "ColumnSchemaBuilder",
        "importPath": "schemaobject.column",
        "description": "schemaobject.column",
        "isExtraImport": true,
        "detail": "schemaobject.column",
        "documentation": {}
    },
    {
        "label": "IndexSchemaBuilder",
        "importPath": "schemaobject.index",
        "description": "schemaobject.index",
        "isExtraImport": true,
        "detail": "schemaobject.index",
        "documentation": {}
    },
    {
        "label": "ForeignKeySchemaBuilder",
        "importPath": "schemaobject.foreignkey",
        "description": "schemaobject.foreignkey",
        "isExtraImport": true,
        "detail": "schemaobject.foreignkey",
        "documentation": {}
    },
    {
        "label": "REGEX_FK_REFERENCE_OPTIONS",
        "importPath": "schemaobject.foreignkey",
        "description": "schemaobject.foreignkey",
        "isExtraImport": true,
        "detail": "schemaobject.foreignkey",
        "documentation": {}
    },
    {
        "label": "TestSchema",
        "importPath": "test_schema",
        "description": "test_schema",
        "isExtraImport": true,
        "detail": "test_schema",
        "documentation": {}
    },
    {
        "label": "TestDatabaseSchema",
        "importPath": "test_database",
        "description": "test_database",
        "isExtraImport": true,
        "detail": "test_database",
        "documentation": {}
    },
    {
        "label": "TestTableSchema",
        "importPath": "test_table",
        "description": "test_table",
        "isExtraImport": true,
        "detail": "test_table",
        "documentation": {}
    },
    {
        "label": "TestColumnSchema",
        "importPath": "test_column",
        "description": "test_column",
        "isExtraImport": true,
        "detail": "test_column",
        "documentation": {}
    },
    {
        "label": "TestIndexSchema",
        "importPath": "test_index",
        "description": "test_index",
        "isExtraImport": true,
        "detail": "test_index",
        "documentation": {}
    },
    {
        "label": "TestForeignKeySchema",
        "importPath": "test_foreignkey",
        "description": "test_foreignkey",
        "isExtraImport": true,
        "detail": "test_foreignkey",
        "documentation": {}
    },
    {
        "label": "TestOptionSchema",
        "importPath": "test_option",
        "description": "test_option",
        "isExtraImport": true,
        "detail": "test_option",
        "documentation": {}
    },
    {
        "label": "TestOrderedDict",
        "importPath": "test_collections",
        "description": "test_collections",
        "isExtraImport": true,
        "detail": "test_collections",
        "documentation": {}
    },
    {
        "label": "TestDatabaseURL",
        "importPath": "test_connection",
        "description": "test_connection",
        "isExtraImport": true,
        "detail": "test_connection",
        "documentation": {}
    },
    {
        "label": "schemaobject",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "schemaobject",
        "description": "schemaobject",
        "detail": "schemaobject",
        "documentation": {}
    },
    {
        "label": "ez_setup",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ez_setup",
        "description": "ez_setup",
        "detail": "ez_setup",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "thread",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "thread",
        "description": "thread",
        "detail": "thread",
        "documentation": {}
    },
    {
        "label": "mysql.connector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysql.connector",
        "description": "mysql.connector",
        "detail": "mysql.connector",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "JIRA",
        "importPath": "jira",
        "description": "jira",
        "isExtraImport": true,
        "detail": "jira",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector.errors",
        "description": "mysql.connector.errors",
        "isExtraImport": true,
        "detail": "mysql.connector.errors",
        "documentation": {}
    },
    {
        "label": "Error",
        "importPath": "mysql.connector.errors",
        "description": "mysql.connector.errors",
        "isExtraImport": true,
        "detail": "mysql.connector.errors",
        "documentation": {}
    },
    {
        "label": "SlackClient",
        "importPath": "slackclient",
        "description": "slackclient",
        "isExtraImport": true,
        "detail": "slackclient",
        "documentation": {}
    },
    {
        "label": "tabulate",
        "importPath": "tabulate",
        "description": "tabulate",
        "isExtraImport": true,
        "detail": "tabulate",
        "documentation": {}
    },
    {
        "label": "JenkinsBot",
        "importPath": "jenkinsbot",
        "description": "jenkinsbot",
        "isExtraImport": true,
        "detail": "jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JenkinsBot",
        "importPath": "jenkinsbot",
        "description": "jenkinsbot",
        "isExtraImport": true,
        "detail": "jenkinsbot",
        "documentation": {}
    },
    {
        "label": "jenkins",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jenkins",
        "description": "jenkins",
        "detail": "jenkins",
        "documentation": {}
    },
    {
        "label": "getopt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getopt",
        "description": "getopt",
        "detail": "getopt",
        "documentation": {}
    },
    {
        "label": "BadStatusLine",
        "importPath": "six.moves.http_client",
        "description": "six.moves.http_client",
        "isExtraImport": true,
        "detail": "six.moves.http_client",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "importPath": "six.moves.urllib.error",
        "description": "six.moves.urllib.error",
        "isExtraImport": true,
        "detail": "six.moves.urllib.error",
        "documentation": {}
    },
    {
        "label": "URLError",
        "importPath": "six.moves.urllib.error",
        "description": "six.moves.urllib.error",
        "isExtraImport": true,
        "detail": "six.moves.urllib.error",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "six.moves.urllib.parse",
        "description": "six.moves.urllib.parse",
        "isExtraImport": true,
        "detail": "six.moves.urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "six.moves.urllib.parse",
        "description": "six.moves.urllib.parse",
        "isExtraImport": true,
        "detail": "six.moves.urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "six.moves.urllib.parse",
        "description": "six.moves.urllib.parse",
        "isExtraImport": true,
        "detail": "six.moves.urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "six.moves.urllib.parse",
        "description": "six.moves.urllib.parse",
        "isExtraImport": true,
        "detail": "six.moves.urllib.parse",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "six.moves.urllib.request",
        "description": "six.moves.urllib.request",
        "isExtraImport": true,
        "detail": "six.moves.urllib.request",
        "documentation": {}
    },
    {
        "label": "urlopen",
        "importPath": "six.moves.urllib.request",
        "description": "six.moves.urllib.request",
        "isExtraImport": true,
        "detail": "six.moves.urllib.request",
        "documentation": {}
    },
    {
        "label": "httplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httplib",
        "description": "httplib",
        "detail": "httplib",
        "documentation": {}
    },
    {
        "label": "Issues",
        "importPath": "sql_grammar_reporter",
        "description": "sql_grammar_reporter",
        "isExtraImport": true,
        "detail": "sql_grammar_reporter",
        "documentation": {}
    },
    {
        "label": "argparse,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse.",
        "description": "argparse.",
        "detail": "argparse.",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "cd",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "lcd",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "put",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "hide",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "task",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "put",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "cd",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "quiet",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "getSSHInfoForHost",
        "importPath": "fabric_ssh_config",
        "description": "fabric_ssh_config",
        "isExtraImport": true,
        "detail": "fabric_ssh_config",
        "documentation": {}
    },
    {
        "label": "getSSHInfoForHost",
        "importPath": "fabric_ssh_config",
        "description": "fabric_ssh_config",
        "isExtraImport": true,
        "detail": "fabric_ssh_config",
        "documentation": {}
    },
    {
        "label": "shell_env",
        "importPath": "fabric.context_managers",
        "description": "fabric.context_managers",
        "isExtraImport": true,
        "detail": "fabric.context_managers",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "fabric.utils",
        "description": "fabric.utils",
        "isExtraImport": true,
        "detail": "fabric.utils",
        "documentation": {}
    },
    {
        "label": "pwd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pwd",
        "description": "pwd",
        "detail": "pwd",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "mysqlutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mysqlutil",
        "description": "mysqlutil",
        "detail": "mysqlutil",
        "documentation": {}
    },
    {
        "label": "datagen,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datagen.",
        "description": "datagen.",
        "detail": "datagen.",
        "documentation": {}
    },
    {
        "label": "re,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re.",
        "description": "re.",
        "detail": "re.",
        "documentation": {}
    },
    {
        "label": "sys,re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.re",
        "description": "sys.re",
        "detail": "sys.re",
        "documentation": {}
    },
    {
        "label": "org.voltdb.*;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "org.voltdb.*;",
        "description": "org.voltdb.*;",
        "detail": "org.voltdb.*;",
        "documentation": {}
    },
    {
        "label": "jiratools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jiratools",
        "description": "jiratools",
        "detail": "jiratools",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "restkit",
        "description": "restkit",
        "isExtraImport": true,
        "detail": "restkit",
        "documentation": {}
    },
    {
        "label": "BasicAuth",
        "importPath": "restkit",
        "description": "restkit",
        "isExtraImport": true,
        "detail": "restkit",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "sys,os,re,logging,time,shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.os.re.logging.time.shutil",
        "description": "sys.os.re.logging.time.shutil",
        "detail": "sys.os.re.logging.time.shutil",
        "documentation": {}
    },
    {
        "label": "sys,os,re,logging,time,shutil,datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.os.re.logging.time.shutil.datetime",
        "description": "sys.os.re.logging.time.shutil.datetime",
        "detail": "sys.os.re.logging.time.shutil.datetime",
        "documentation": {}
    },
    {
        "label": "datetime,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime.",
        "description": "datetime.",
        "detail": "datetime.",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "StringIO",
        "description": "StringIO",
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "process",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "process",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "relnotesparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "relnotesparser",
        "description": "relnotesparser",
        "detail": "relnotesparser",
        "documentation": {}
    },
    {
        "label": "fileinput,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput.",
        "description": "fileinput.",
        "detail": "fileinput.",
        "documentation": {}
    },
    {
        "label": "closing",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "matplotlib.ticker",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.ticker",
        "description": "matplotlib.ticker",
        "detail": "matplotlib.ticker",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "AnchoredText",
        "importPath": "mpl_toolkits.axes_grid.anchored_artists",
        "description": "mpl_toolkits.axes_grid.anchored_artists",
        "isExtraImport": true,
        "detail": "mpl_toolkits.axes_grid.anchored_artists",
        "documentation": {}
    },
    {
        "label": "httplib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httplib2",
        "description": "httplib2",
        "detail": "httplib2",
        "documentation": {}
    },
    {
        "label": "grp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "grp",
        "description": "grp",
        "detail": "grp",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "importPath": "pytrader",
        "description": "pytrader",
        "isExtraImport": true,
        "detail": "pytrader",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "importPath": "pytrader",
        "description": "pytrader",
        "isExtraImport": true,
        "detail": "pytrader",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "DataFrame",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "read_sql",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "concat",
        "importPath": "pandas",
        "description": "pandas",
        "isExtraImport": true,
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMessageBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTableWidgetItem",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEventLoop",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTimer",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QTime",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QThread",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSignal",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEventLoop",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "relativedelta",
        "importPath": "dateutil.relativedelta",
        "description": "dateutil.relativedelta",
        "isExtraImport": true,
        "detail": "dateutil.relativedelta",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "database",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "logging.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging.config",
        "description": "logging.config",
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "QAxWidget",
        "importPath": "PyQt5.QAxContainer",
        "description": "PyQt5.QAxContainer",
        "isExtraImport": true,
        "detail": "PyQt5.QAxContainer",
        "documentation": {}
    },
    {
        "label": "Write_db",
        "importPath": "write_db",
        "description": "write_db",
        "isExtraImport": true,
        "detail": "write_db",
        "documentation": {}
    },
    {
        "label": "Write_db",
        "importPath": "write_db",
        "description": "write_db",
        "isExtraImport": true,
        "detail": "write_db",
        "documentation": {}
    },
    {
        "label": "application",
        "importPath": "pywinauto",
        "description": "pywinauto",
        "isExtraImport": true,
        "detail": "pywinauto",
        "documentation": {}
    },
    {
        "label": "timings",
        "importPath": "pywinauto",
        "description": "pywinauto",
        "isExtraImport": true,
        "detail": "pywinauto",
        "documentation": {}
    },
    {
        "label": "Sell",
        "importPath": "sell",
        "description": "sell",
        "isExtraImport": true,
        "detail": "sell",
        "documentation": {}
    },
    {
        "label": "Buy",
        "importPath": "buy",
        "description": "buy",
        "isExtraImport": true,
        "detail": "buy",
        "documentation": {}
    },
    {
        "label": "uic",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "Kiwoom",
        "importPath": "Kiwoom",
        "description": "Kiwoom",
        "isExtraImport": true,
        "detail": "Kiwoom",
        "documentation": {}
    },
    {
        "label": "ParameterTypeError",
        "importPath": "Kiwoom",
        "description": "Kiwoom",
        "isExtraImport": true,
        "detail": "Kiwoom",
        "documentation": {}
    },
    {
        "label": "ParameterValueError",
        "importPath": "Kiwoom",
        "description": "Kiwoom",
        "isExtraImport": true,
        "detail": "Kiwoom",
        "documentation": {}
    },
    {
        "label": "KiwoomProcessingError",
        "importPath": "Kiwoom",
        "description": "Kiwoom",
        "isExtraImport": true,
        "detail": "Kiwoom",
        "documentation": {}
    },
    {
        "label": "KiwoomConnectError",
        "importPath": "Kiwoom",
        "description": "Kiwoom",
        "isExtraImport": true,
        "detail": "Kiwoom",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order",
        "description": "order",
        "isExtraImport": true,
        "detail": "order",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order",
        "description": "order",
        "isExtraImport": true,
        "detail": "order",
        "documentation": {}
    },
    {
        "label": "get_data",
        "importPath": "get_data",
        "description": "get_data",
        "isExtraImport": true,
        "detail": "get_data",
        "documentation": {}
    },
    {
        "label": "pause",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pause",
        "description": "pause",
        "detail": "pause",
        "documentation": {}
    },
    {
        "label": "ver",
        "kind": 5,
        "importPath": "github.com.go-delve.delve._scripts.latestver",
        "description": "github.com.go-delve.delve._scripts.latestver",
        "peekOfCode": "ver = sys.argv[1]\nd = json.loads(urllib.urlopen('https://golang.org/dl/?mode=json&include=all').read())\nfor x in d:\n\tif x['version'][:len(ver)] == ver:\n\t\tprint x['version']\n\t\texit(0)",
        "detail": "github.com.go-delve.delve._scripts.latestver",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "github.com.go-delve.delve._scripts.latestver",
        "description": "github.com.go-delve.delve._scripts.latestver",
        "peekOfCode": "d = json.loads(urllib.urlopen('https://golang.org/dl/?mode=json&include=all').read())\nfor x in d:\n\tif x['version'][:len(ver)] == ver:\n\t\tprint x['version']\n\t\texit(0)",
        "detail": "github.com.go-delve.delve._scripts.latestver",
        "documentation": {}
    },
    {
        "label": "GocodeGofmtCommand",
        "kind": 6,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "class GocodeGofmtCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tview = self.view\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tgofmt = subprocess.Popen([\"gofmt\"],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tsout, serr = gofmt.communicate(src.encode())\n\t\tif gofmt.returncode != 0:\n\t\t\tprint(serr.decode(), end=\"\")\n\t\t\treturn",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "Gocode",
        "kind": 6,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "class Gocode(sublime_plugin.EventListener):\n\t\"\"\"Sublime Text gocode integration.\"\"\"\n\tdef __init__(self):\n\t\tself._running = False\n\t\tself._completions = None\n\t\tself._location = 0\n\t\tself._prefix = \"\"\n\tdef fetch_query_completions(self, view, prefix, location):\n\t\t\"\"\"Fetches the query completions of for the given location\n\t\tExecute gocode and parse the returned csv. If the cursor location did not change, a",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "skip_to_balanced_pair",
        "kind": 2,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "def skip_to_balanced_pair(str, i, open, close):\n\tcount = 1\n\ti += 1\n\twhile i < len(str):\n\t\tif str[i] == open:\n\t\t\tcount += 1\n\t\telif str[i] == close:\n\t\t\tcount -= 1\n\t\tif count == 0:\n\t\t\tbreak",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "split_balanced",
        "kind": 2,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "def split_balanced(s):\n\tout = []\n\ti = 0\n\tbeg = 0\n\twhile i < len(s):\n\t\tif s[i] == ',':\n\t\t\tout.append(s[beg:i].strip())\n\t\t\tbeg = i+1\n\t\t\ti += 1\n\t\telif s[i] == '(':",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "extract_arguments_and_returns",
        "kind": 2,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "def extract_arguments_and_returns(sig):\n\tsig = sig.strip()\n\tif not sig.startswith(\"func\"):\n\t\treturn [], []\n\t# find first pair of parens, these are arguments\n\tbeg = sig.find(\"(\")\n\tif beg == -1:\n\t\treturn [], []\n\tend = skip_to_balanced_pair(sig, beg, \"(\", \")\")\n\tif end == -1:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "hint_and_subj",
        "kind": 2,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "def hint_and_subj(cls, name, type):\n\tsubj = name\n\tif cls == \"func\":\n\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)\n\t\tif returns:\n\t\t\thint += \"\\t\" + \", \".join(returns)\n\t\tif args:\n\t\t\tsargs = []\n\t\t\tfor i, a in enumerate(args):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "diff_sanity_check",
        "kind": 2,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "def diff_sanity_check(a, b):\n\tif a != b:\n\t\traise Exception(\"diff sanity check mismatch\\n-%s\\n+%s\" % (a, b))\nclass GocodeGofmtCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tview = self.view\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tgofmt = subprocess.Popen([\"gofmt\"],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tsout, serr = gofmt.communicate(src.encode())",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tcount",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tcount = 1\n\ti += 1\n\twhile i < len(str):\n\t\tif str[i] == open:\n\t\t\tcount += 1\n\t\telif str[i] == close:\n\t\t\tcount -= 1\n\t\tif count == 0:\n\t\t\tbreak\n\t\ti += 1",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tout",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tout = []\n\ti = 0\n\tbeg = 0\n\twhile i < len(s):\n\t\tif s[i] == ',':\n\t\t\tout.append(s[beg:i].strip())\n\t\t\tbeg = i+1\n\t\t\ti += 1\n\t\telif s[i] == '(':\n\t\t\ti = skip_to_balanced_pair(s, i, \"(\", \")\")",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\ti",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\ti = 0\n\tbeg = 0\n\twhile i < len(s):\n\t\tif s[i] == ',':\n\t\t\tout.append(s[beg:i].strip())\n\t\t\tbeg = i+1\n\t\t\ti += 1\n\t\telif s[i] == '(':\n\t\t\ti = skip_to_balanced_pair(s, i, \"(\", \")\")\n\t\t\tif i == -1:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tbeg",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tbeg = 0\n\twhile i < len(s):\n\t\tif s[i] == ',':\n\t\t\tout.append(s[beg:i].strip())\n\t\t\tbeg = i+1\n\t\t\ti += 1\n\t\telif s[i] == '(':\n\t\t\ti = skip_to_balanced_pair(s, i, \"(\", \")\")\n\t\t\tif i == -1:\n\t\t\t\ti = len(s)",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tbeg",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tbeg = i+1\n\t\t\ti += 1\n\t\telif s[i] == '(':\n\t\t\ti = skip_to_balanced_pair(s, i, \"(\", \")\")\n\t\t\tif i == -1:\n\t\t\t\ti = len(s)\n\t\telse:\n\t\t\ti += 1\n\tout.append(s[beg:i].strip())\n\treturn list(filter(bool, out))",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\ti",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\ti = skip_to_balanced_pair(s, i, \"(\", \")\")\n\t\t\tif i == -1:\n\t\t\t\ti = len(s)\n\t\telse:\n\t\t\ti += 1\n\tout.append(s[beg:i].strip())\n\treturn list(filter(bool, out))\ndef extract_arguments_and_returns(sig):\n\tsig = sig.strip()\n\tif not sig.startswith(\"func\"):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\t\ti",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\t\ti = len(s)\n\t\telse:\n\t\t\ti += 1\n\tout.append(s[beg:i].strip())\n\treturn list(filter(bool, out))\ndef extract_arguments_and_returns(sig):\n\tsig = sig.strip()\n\tif not sig.startswith(\"func\"):\n\t\treturn [], []\n\t# find first pair of parens, these are arguments",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tsig",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tsig = sig.strip()\n\tif not sig.startswith(\"func\"):\n\t\treturn [], []\n\t# find first pair of parens, these are arguments\n\tbeg = sig.find(\"(\")\n\tif beg == -1:\n\t\treturn [], []\n\tend = skip_to_balanced_pair(sig, beg, \"(\", \")\")\n\tif end == -1:\n\t\treturn [], []",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tbeg",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tbeg = sig.find(\"(\")\n\tif beg == -1:\n\t\treturn [], []\n\tend = skip_to_balanced_pair(sig, beg, \"(\", \")\")\n\tif end == -1:\n\t\treturn [], []\n\targs = split_balanced(sig[beg+1:end])\n\t# find the rest of the string, these are returns\n\tsig = sig[end+1:].strip()\n\tsig = sig[1:-1] if sig.startswith(\"(\") and sig.endswith(\")\") else sig",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tend",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tend = skip_to_balanced_pair(sig, beg, \"(\", \")\")\n\tif end == -1:\n\t\treturn [], []\n\targs = split_balanced(sig[beg+1:end])\n\t# find the rest of the string, these are returns\n\tsig = sig[end+1:].strip()\n\tsig = sig[1:-1] if sig.startswith(\"(\") and sig.endswith(\")\") else sig\n\treturns = split_balanced(sig)\n\treturn args, returns\n# takes gocode's candidate and returns sublime's hint and subj",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\targs",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\targs = split_balanced(sig[beg+1:end])\n\t# find the rest of the string, these are returns\n\tsig = sig[end+1:].strip()\n\tsig = sig[1:-1] if sig.startswith(\"(\") and sig.endswith(\")\") else sig\n\treturns = split_balanced(sig)\n\treturn args, returns\n# takes gocode's candidate and returns sublime's hint and subj\ndef hint_and_subj(cls, name, type):\n\tsubj = name\n\tif cls == \"func\":",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tsig",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tsig = sig[end+1:].strip()\n\tsig = sig[1:-1] if sig.startswith(\"(\") and sig.endswith(\")\") else sig\n\treturns = split_balanced(sig)\n\treturn args, returns\n# takes gocode's candidate and returns sublime's hint and subj\ndef hint_and_subj(cls, name, type):\n\tsubj = name\n\tif cls == \"func\":\n\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tsig",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tsig = sig[1:-1] if sig.startswith(\"(\") and sig.endswith(\")\") else sig\n\treturns = split_balanced(sig)\n\treturn args, returns\n# takes gocode's candidate and returns sublime's hint and subj\ndef hint_and_subj(cls, name, type):\n\tsubj = name\n\tif cls == \"func\":\n\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)\n\t\tif returns:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\treturns",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\treturns = split_balanced(sig)\n\treturn args, returns\n# takes gocode's candidate and returns sublime's hint and subj\ndef hint_and_subj(cls, name, type):\n\tsubj = name\n\tif cls == \"func\":\n\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)\n\t\tif returns:\n\t\t\thint += \"\\t\" + \", \".join(returns)",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\tsubj",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\tsubj = name\n\tif cls == \"func\":\n\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)\n\t\tif returns:\n\t\t\thint += \"\\t\" + \", \".join(returns)\n\t\tif args:\n\t\t\tsargs = []\n\t\t\tfor i, a in enumerate(args):\n\t\t\t\tea = a.replace(\"{\", \"\\\\{\").replace(\"}\", \"\\\\}\")",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\thint",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\thint = cls + \" \" + name\n\t\targs, returns = extract_arguments_and_returns(type)\n\t\tif returns:\n\t\t\thint += \"\\t\" + \", \".join(returns)\n\t\tif args:\n\t\t\tsargs = []\n\t\t\tfor i, a in enumerate(args):\n\t\t\t\tea = a.replace(\"{\", \"\\\\{\").replace(\"}\", \"\\\\}\")\n\t\t\t\tsargs.append(\"${{{0}:{1}}}\".format(i+1, ea))\n\t\t\tsubj += \"(\" + \", \".join(sargs) + \")\"",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tsargs",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tsargs = []\n\t\t\tfor i, a in enumerate(args):\n\t\t\t\tea = a.replace(\"{\", \"\\\\{\").replace(\"}\", \"\\\\}\")\n\t\t\t\tsargs.append(\"${{{0}:{1}}}\".format(i+1, ea))\n\t\t\tsubj += \"(\" + \", \".join(sargs) + \")\"\n\t\telse:\n\t\t\tsubj += \"()\"\n\telse:\n\t\thint = cls + \" \" + name + \"\\t\" + type\n\treturn hint, subj",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tea",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\t\tea = a.replace(\"{\", \"\\\\{\").replace(\"}\", \"\\\\}\")\n\t\t\t\tsargs.append(\"${{{0}:{1}}}\".format(i+1, ea))\n\t\t\tsubj += \"(\" + \", \".join(sargs) + \")\"\n\t\telse:\n\t\t\tsubj += \"()\"\n\telse:\n\t\thint = cls + \" \" + name + \"\\t\" + type\n\treturn hint, subj\ndef diff_sanity_check(a, b):\n\tif a != b:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\thint",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\thint = cls + \" \" + name + \"\\t\" + type\n\treturn hint, subj\ndef diff_sanity_check(a, b):\n\tif a != b:\n\t\traise Exception(\"diff sanity check mismatch\\n-%s\\n+%s\" % (a, b))\nclass GocodeGofmtCommand(sublime_plugin.TextCommand):\n\tdef run(self, edit):\n\t\tview = self.view\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tgofmt = subprocess.Popen([\"gofmt\"],",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tview",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tview = self.view\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tgofmt = subprocess.Popen([\"gofmt\"],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tsout, serr = gofmt.communicate(src.encode())\n\t\tif gofmt.returncode != 0:\n\t\t\tprint(serr.decode(), end=\"\")\n\t\t\treturn\n\t\tnewsrc = sout.decode()\n\t\tdiff = difflib.ndiff(src.splitlines(), newsrc.splitlines())",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tsrc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tgofmt = subprocess.Popen([\"gofmt\"],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tsout, serr = gofmt.communicate(src.encode())\n\t\tif gofmt.returncode != 0:\n\t\t\tprint(serr.decode(), end=\"\")\n\t\t\treturn\n\t\tnewsrc = sout.decode()\n\t\tdiff = difflib.ndiff(src.splitlines(), newsrc.splitlines())\n\t\ti = 0",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tgofmt",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tgofmt = subprocess.Popen([\"gofmt\"],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\t\tsout, serr = gofmt.communicate(src.encode())\n\t\tif gofmt.returncode != 0:\n\t\t\tprint(serr.decode(), end=\"\")\n\t\t\treturn\n\t\tnewsrc = sout.decode()\n\t\tdiff = difflib.ndiff(src.splitlines(), newsrc.splitlines())\n\t\ti = 0\n\t\tfor line in diff:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tnewsrc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tnewsrc = sout.decode()\n\t\tdiff = difflib.ndiff(src.splitlines(), newsrc.splitlines())\n\t\ti = 0\n\t\tfor line in diff:\n\t\t\tif line.startswith(\"?\"): # skip hint lines\n\t\t\t\tcontinue\n\t\t\tl = (len(line)-2)+1\n\t\t\tif line.startswith(\"-\"):\n\t\t\t\tdiff_sanity_check(view.substr(sublime.Region(i, i+l-1)), line[2:])\n\t\t\t\tview.erase(edit, sublime.Region(i, i+l))",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tdiff",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tdiff = difflib.ndiff(src.splitlines(), newsrc.splitlines())\n\t\ti = 0\n\t\tfor line in diff:\n\t\t\tif line.startswith(\"?\"): # skip hint lines\n\t\t\t\tcontinue\n\t\t\tl = (len(line)-2)+1\n\t\t\tif line.startswith(\"-\"):\n\t\t\t\tdiff_sanity_check(view.substr(sublime.Region(i, i+l-1)), line[2:])\n\t\t\t\tview.erase(edit, sublime.Region(i, i+l))\n\t\t\telif line.startswith(\"+\"):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\ti",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\ti = 0\n\t\tfor line in diff:\n\t\t\tif line.startswith(\"?\"): # skip hint lines\n\t\t\t\tcontinue\n\t\t\tl = (len(line)-2)+1\n\t\t\tif line.startswith(\"-\"):\n\t\t\t\tdiff_sanity_check(view.substr(sublime.Region(i, i+l-1)), line[2:])\n\t\t\t\tview.erase(edit, sublime.Region(i, i+l))\n\t\t\telif line.startswith(\"+\"):\n\t\t\t\tview.insert(edit, i, line[2:]+\"\\n\")",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tl",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tl = (len(line)-2)+1\n\t\t\tif line.startswith(\"-\"):\n\t\t\t\tdiff_sanity_check(view.substr(sublime.Region(i, i+l-1)), line[2:])\n\t\t\t\tview.erase(edit, sublime.Region(i, i+l))\n\t\t\telif line.startswith(\"+\"):\n\t\t\t\tview.insert(edit, i, line[2:]+\"\\n\")\n\t\t\t\ti += l\n\t\t\telse:\n\t\t\t\tdiff_sanity_check(view.substr(sublime.Region(i, i+l-1)), line[2:])\n\t\t\t\ti += l",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._running",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._running = False\n\t\tself._completions = None\n\t\tself._location = 0\n\t\tself._prefix = \"\"\n\tdef fetch_query_completions(self, view, prefix, location):\n\t\t\"\"\"Fetches the query completions of for the given location\n\t\tExecute gocode and parse the returned csv. If the cursor location did not change, a\n\t\tresult got returned and the current cursor location is still at the same position will the query completions\n\t\tmethod be called again (to render the results).\n\t\t:param view: currently active sublime view",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._completions",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._completions = None\n\t\tself._location = 0\n\t\tself._prefix = \"\"\n\tdef fetch_query_completions(self, view, prefix, location):\n\t\t\"\"\"Fetches the query completions of for the given location\n\t\tExecute gocode and parse the returned csv. If the cursor location did not change, a\n\t\tresult got returned and the current cursor location is still at the same position will the query completions\n\t\tmethod be called again (to render the results).\n\t\t:param view: currently active sublime view\n\t\t:type view: sublime.View",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._location",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._location = 0\n\t\tself._prefix = \"\"\n\tdef fetch_query_completions(self, view, prefix, location):\n\t\t\"\"\"Fetches the query completions of for the given location\n\t\tExecute gocode and parse the returned csv. If the cursor location did not change, a\n\t\tresult got returned and the current cursor location is still at the same position will the query completions\n\t\tmethod be called again (to render the results).\n\t\t:param view: currently active sublime view\n\t\t:type view: sublime.View\n\t\t:param prefix: string for completions",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._prefix",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._prefix = \"\"\n\tdef fetch_query_completions(self, view, prefix, location):\n\t\t\"\"\"Fetches the query completions of for the given location\n\t\tExecute gocode and parse the returned csv. If the cursor location did not change, a\n\t\tresult got returned and the current cursor location is still at the same position will the query completions\n\t\tmethod be called again (to render the results).\n\t\t:param view: currently active sublime view\n\t\t:type view: sublime.View\n\t\t:param prefix: string for completions\n\t\t:type prefix: basestring",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._running",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._running = True\n\t\tself._location = location\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tfilename = view.file_name()\n\t\tcloc = \"c{0}\".format(location)\n\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._location",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._location = location\n\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tfilename = view.file_name()\n\t\tcloc = \"c{0}\".format(location)\n\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tsrc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tsrc = view.substr(sublime.Region(0, view.size()))\n\t\tfilename = view.file_name()\n\t\tcloc = \"c{0}\".format(location)\n\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tfilename",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tfilename = view.file_name()\n\t\tcloc = \"c{0}\".format(location)\n\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tcloc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tcloc = \"c{0}\".format(location)\n\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])\n\t\t# Exit conditions:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tgocode",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tgocode = subprocess.Popen([\"gocode\", \"-f=csv\", \"autocomplete\", filename, cloc],\n\t\t\tstdin=subprocess.PIPE, stdout=subprocess.PIPE)\n\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])\n\t\t# Exit conditions:\n\t\tif len(result) == 0:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tout",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tout = gocode.communicate(src.encode())[0].decode()\n\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])\n\t\t# Exit conditions:\n\t\tif len(result) == 0:\n\t\t\treturn\n\t\tif self._prefix != prefix:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tresult = []\n\t\tfor line in filter(bool, out.split(\"\\n\")):\n\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])\n\t\t# Exit conditions:\n\t\tif len(result) == 0:\n\t\t\treturn\n\t\tif self._prefix != prefix:\n\t\t\treturn",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\targ",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\targ = line.split(\",,\")\n\t\t\thint, subj = hint_and_subj(arg[0], arg[1], arg[2])\n\t\t\tresult.append([hint, subj])\n\t\t# Exit conditions:\n\t\tif len(result) == 0:\n\t\t\treturn\n\t\tif self._prefix != prefix:\n\t\t\treturn\n\t\t# Check if this query completions request is for the \"latest\" location\n\t\tif self._location != location:",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._completions",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._completions = result\n\t\tself._running = False\n\t\tself.open_query_completions(view)\n\tdef open_query_completions(self, view):\n\t\t\"\"\"Opens (forced) the sublime autocomplete window\"\"\"\n\t\tview.run_command(\"hide_auto_complete\")\n\t\tsublime.set_timeout(\n\t\t\tlambda: view.run_command(\"auto_complete\")\n\t\t)\n\tdef on_query_completions(self, view, prefix, locations):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._running",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._running = False\n\t\tself.open_query_completions(view)\n\tdef open_query_completions(self, view):\n\t\t\"\"\"Opens (forced) the sublime autocomplete window\"\"\"\n\t\tview.run_command(\"hide_auto_complete\")\n\t\tsublime.set_timeout(\n\t\t\tlambda: view.run_command(\"auto_complete\")\n\t\t)\n\tdef on_query_completions(self, view, prefix, locations):\n\t\t\"\"\"Sublime autocomplete event handler.",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tloc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tloc = locations[0]\n\t\tif not view.match_selector(loc, \"source.go\"):\n\t\t\treturn []\n\t\tif self._completions:\n\t\t\tcompletions = self._completions\n\t\t\tself._completions = None\n\t\t\tself._prefix = \"\"\n\t\t\treturn completions\n\t\tif self._running and len(prefix) != 0:\n\t\t\treturn []",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tcompletions",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tcompletions = self._completions\n\t\t\tself._completions = None\n\t\t\tself._prefix = \"\"\n\t\t\treturn completions\n\t\tif self._running and len(prefix) != 0:\n\t\t\treturn []\n\t\tself._prefix = prefix\n\t\tsublime.set_timeout_async(\n\t\t\tlambda: self.fetch_query_completions(view, prefix, loc)\n\t\t)",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._completions",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tself._completions = None\n\t\t\tself._prefix = \"\"\n\t\t\treturn completions\n\t\tif self._running and len(prefix) != 0:\n\t\t\treturn []\n\t\tself._prefix = prefix\n\t\tsublime.set_timeout_async(\n\t\t\tlambda: self.fetch_query_completions(view, prefix, loc)\n\t\t)\n\t\treturn []",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._prefix",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\t\tself._prefix = \"\"\n\t\t\treturn completions\n\t\tif self._running and len(prefix) != 0:\n\t\t\treturn []\n\t\tself._prefix = prefix\n\t\tsublime.set_timeout_async(\n\t\t\tlambda: self.fetch_query_completions(view, prefix, loc)\n\t\t)\n\t\treturn []\n\tdef on_pre_save(self, view):",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "\t\tself._prefix",
        "kind": 5,
        "importPath": "github.com.nsf.gocode.subl3.gocode",
        "description": "github.com.nsf.gocode.subl3.gocode",
        "peekOfCode": "\t\tself._prefix = prefix\n\t\tsublime.set_timeout_async(\n\t\t\tlambda: self.fetch_query_completions(view, prefix, loc)\n\t\t)\n\t\treturn []\n\tdef on_pre_save(self, view):\n\t\tif not view.match_selector(0, \"source.go\"):\n\t\t\treturn\n\t\tview.run_command('gocode_gofmt')",
        "detail": "github.com.nsf.gocode.subl3.gocode",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "def run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1\n\tc = glob.glob(t + \"/cursor.*\")[0]\n\tcursorpos = os.path.splitext(c)[1][1:]\n\ttry:\n\t\twith open(t + \"/out.expected\", \"r\") as f:\n\t\t\toutexpected = f.read()\n\texcept:\n\t\toutexpected = \"To be determined\"",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "total = 0\nok = 0\nfail = 0\nexpected_fail = 0\nRED = \"\\033[0;31m\"\nGREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "ok",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "ok = 0\nfail = 0\nexpected_fail = 0\nRED = \"\\033[0;31m\"\nGREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "fail",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "fail = 0\nexpected_fail = 0\nRED = \"\\033[0;31m\"\nGREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "expected_fail",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "expected_fail = 0\nRED = \"\\033[0;31m\"\nGREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "RED = \"\\033[0;31m\"\nGREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "GREEN = \"\\033[0;32m\"\nYELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "YELLOW = \"\\033[0;33m\"\nNC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "NC",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "NC = \"\\033[0m\"\nOK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "OK",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "OK = GREEN + \"PASS!\" + NC\nFAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1\n\tc = glob.glob(t + \"/cursor.*\")[0]",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "FAIL",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "FAIL = RED + \"FAIL!\" + NC\nEXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1\n\tc = glob.glob(t + \"/cursor.*\")[0]\n\tcursorpos = os.path.splitext(c)[1][1:]",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "EXPECTED = YELLOW + \"EXPECTED: \" + NC\n# name of the test + commentary (why it is expected to fail)\nexpected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1\n\tc = glob.glob(t + \"/cursor.*\")[0]\n\tcursorpos = os.path.splitext(c)[1][1:]\n\ttry:",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "expected_to_fail",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "expected_to_fail = {\n}\ndef run_test(t):\n\tglobal total, ok, fail, expected_fail\n\ttotal += 1\n\tc = glob.glob(t + \"/cursor.*\")[0]\n\tcursorpos = os.path.splitext(c)[1][1:]\n\ttry:\n\t\twith open(t + \"/out.expected\", \"r\") as f:\n\t\t\toutexpected = f.read()",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\tc",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\tc = glob.glob(t + \"/cursor.*\")[0]\n\tcursorpos = os.path.splitext(c)[1][1:]\n\ttry:\n\t\twith open(t + \"/out.expected\", \"r\") as f:\n\t\t\toutexpected = f.read()\n\texcept:\n\t\toutexpected = \"To be determined\"\n\tfilename = t + \"/test.go.in\"\n\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\tcursorpos",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\tcursorpos = os.path.splitext(c)[1][1:]\n\ttry:\n\t\twith open(t + \"/out.expected\", \"r\") as f:\n\t\t\toutexpected = f.read()\n\texcept:\n\t\toutexpected = \"To be determined\"\n\tfilename = t + \"/test.go.in\"\n\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)\n\tout = gocode.communicate()[0]",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\t\t\toutexpected",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\t\t\toutexpected = f.read()\n\texcept:\n\t\toutexpected = \"To be determined\"\n\tfilename = t + \"/test.go.in\"\n\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)\n\tout = gocode.communicate()[0]\n\tif out != outexpected:\n\t\tif t in expected_to_fail:\n\t\t\tprint t + \": \" + FAIL + \" \" + EXPECTED + expected_to_fail[t]",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\t\toutexpected",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\t\toutexpected = \"To be determined\"\n\tfilename = t + \"/test.go.in\"\n\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)\n\tout = gocode.communicate()[0]\n\tif out != outexpected:\n\t\tif t in expected_to_fail:\n\t\t\tprint t + \": \" + FAIL + \" \" + EXPECTED + expected_to_fail[t]\n\t\t\texpected_fail += 1\n\t\telse:",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\tfilename",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\tfilename = t + \"/test.go.in\"\n\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)\n\tout = gocode.communicate()[0]\n\tif out != outexpected:\n\t\tif t in expected_to_fail:\n\t\t\tprint t + \": \" + FAIL + \" \" + EXPECTED + expected_to_fail[t]\n\t\t\texpected_fail += 1\n\t\telse:\n\t\t\tprint t + \": \" + FAIL",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\tgocode",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\tgocode = subprocess.Popen([\"gocode\", \"-in\", filename, \"autocomplete\", filename, cursorpos],\n\t\t\tshell=False, stdout=subprocess.PIPE)\n\tout = gocode.communicate()[0]\n\tif out != outexpected:\n\t\tif t in expected_to_fail:\n\t\t\tprint t + \": \" + FAIL + \" \" + EXPECTED + expected_to_fail[t]\n\t\t\texpected_fail += 1\n\t\telse:\n\t\t\tprint t + \": \" + FAIL\n\t\t\tprint \"--------------------------------------------------------\"",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "\tout",
        "kind": 5,
        "importPath": "github.com.nsf.gocode._testing.run",
        "description": "github.com.nsf.gocode._testing.run",
        "peekOfCode": "\tout = gocode.communicate()[0]\n\tif out != outexpected:\n\t\tif t in expected_to_fail:\n\t\t\tprint t + \": \" + FAIL + \" \" + EXPECTED + expected_to_fail[t]\n\t\t\texpected_fail += 1\n\t\telse:\n\t\t\tprint t + \": \" + FAIL\n\t\t\tprint \"--------------------------------------------------------\"\n\t\t\tprint \"Got:\\n\" + out\n\t\t\tprint \"--------------------------------------------------------\"",
        "detail": "github.com.nsf.gocode._testing.run",
        "documentation": {}
    },
    {
        "label": "checkPhoneNum",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def checkPhoneNum(phone):\n    # Twilio wants a leading country code\n    if len(phone) > 2 and phone[0:1] != \"+1\":\n        return \"+1\" + phone\n    else:\n        return phone\ndef sendSMS(toPhone):\n    # Account Sid and Auth Token from twilio.com/user/account\n    # ACCOUNT SID\n    accountSid = \"AC543483989cdc36a28dc297572e096b1a\"",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "sendSMS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def sendSMS(toPhone):\n    # Account Sid and Auth Token from twilio.com/user/account\n    # ACCOUNT SID\n    accountSid = \"AC543483989cdc36a28dc297572e096b1a\"\n    # AUTH TOKEN\n    authToken = \"6ccf0793c2b5d70424a0f2dffeb7e7e2\"\n    client = TwilioRestClient(accountSid, authToken)\n    message = client.messages.create(body=\"Twilio test message <3\",\n        to=checkPhoneNum(toPhone),\n        from_=\"+16173963192\") # My Twilio number",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "processRow",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def processRow(row):\n    \"\"\" For each row, check notify flag and process accordingly:\n        notify == 0: no notification\n        notify == 1: email\n        notify == 2: text message to phone number\n    \"\"\"\n    try:\n        # print \"Rider %s, \\\"%s\\\" at station %s: \" % (row[\"Name\"][0], row[\"AlertMessage\"][0], row[\"StationName\"][0]),\n        if row[\"Notify\"][0] == \"1\":\n            # sendEmail(row[\"Email\"][0])",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "htmlRows",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def htmlRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return assembleTable()\nrowQueue = []\nMAXROWS = 10\ndef assembleTable():\n    \"\"\" Create an html page with latest N rows \"\"\"\n    table = \"<html><body><meta http-equiv=\\\"refresh\\\" content=\\\"5\\\"><table border=\\\"1\\\"><tr><th>Event Time</th><th>Name</th><th>Contact</th><th>Status</th></tr>\"\n    # print \"RowQueue: \" + str(rowQueue)\n    for r in rowQueue:",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "assembleTable",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def assembleTable():\n    \"\"\" Create an html page with latest N rows \"\"\"\n    table = \"<html><body><meta http-equiv=\\\"refresh\\\" content=\\\"5\\\"><table border=\\\"1\\\"><tr><th>Event Time</th><th>Name</th><th>Contact</th><th>Status</th></tr>\"\n    # print \"RowQueue: \" + str(rowQueue)\n    for r in rowQueue:\n        table += r\n    table += \"</table></body></html>\"\n    # print \"Table: \" + str(table)\n    return table\ndef updateHTML(time, name, contact, status):",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "updateHTML",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def updateHTML(time, name, contact, status):\n    \"\"\" Keep a queue of last 10 exported rows \"\"\"\n    if len(rowQueue) >= MAXROWS:\n        dc = rowQueue.pop(0)\n    rowQueue.append(\"<tr><td>%s</td><td>%s</td><td>%s</td><td>%s</td></tr>\" % (time, name, contact, status))\ndef htmlRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return assembleTable()\ndef exportRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "htmlRows",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def htmlRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    return assembleTable()\ndef exportRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    if \"QUERY_STRING\" in environ:\n        row = parse_qs(environ[\"QUERY_STRING\"])\n        processRow(row)\n    return []\ngetFuncs = {",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "exportRows",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def exportRows(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/html')])\n    if \"QUERY_STRING\" in environ:\n        row = parse_qs(environ[\"QUERY_STRING\"])\n        processRow(row)\n    return []\ngetFuncs = {\n    \"htmlRows\" : htmlRows,\n    \"exportRows\" : exportRows,\n}",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def application(environ, start_response):\n    \"\"\"\n    The main WSGI application. Dispatch the current request to\n    the functions either \"exportRows\", the VoltDB export endpoint,\n    or to \"htmlRows\", the source static html of recent notifications.\n    If neither, call the `not_found` function.\n    \"\"\"\n    path = environ.get('PATH_INFO', '').lstrip('/')\n    # print \"Path: \" + path\n    if path in getFuncs:",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "def not_found(environ, start_response):\n    \"\"\"Called if no URL matches.\"\"\"\n    start_response('404 NOT FOUND', [('Content-Type', 'text/plain')])\n    return ['Not Found']\nif __name__ == '__main__':\n    if len(sys.argv) > 1 and \"port\" in sys.argv[1]:\n        port = sys.argv[1].split(\"=\")[1]\n    else:\n        port = 8083\n    try:",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "rowQueue",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "rowQueue = []\nMAXROWS = 10\ndef assembleTable():\n    \"\"\" Create an html page with latest N rows \"\"\"\n    table = \"<html><body><meta http-equiv=\\\"refresh\\\" content=\\\"5\\\"><table border=\\\"1\\\"><tr><th>Event Time</th><th>Name</th><th>Contact</th><th>Status</th></tr>\"\n    # print \"RowQueue: \" + str(rowQueue)\n    for r in rowQueue:\n        table += r\n    table += \"</table></body></html>\"\n    # print \"Table: \" + str(table)",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "MAXROWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "MAXROWS = 10\ndef assembleTable():\n    \"\"\" Create an html page with latest N rows \"\"\"\n    table = \"<html><body><meta http-equiv=\\\"refresh\\\" content=\\\"5\\\"><table border=\\\"1\\\"><tr><th>Event Time</th><th>Name</th><th>Contact</th><th>Status</th></tr>\"\n    # print \"RowQueue: \" + str(rowQueue)\n    for r in rowQueue:\n        table += r\n    table += \"</table></body></html>\"\n    # print \"Table: \" + str(table)\n    return table",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "getFuncs",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "description": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "peekOfCode": "getFuncs = {\n    \"htmlRows\" : htmlRows,\n    \"exportRows\" : exportRows,\n}\ndef application(environ, start_response):\n    \"\"\"\n    The main WSGI application. Dispatch the current request to\n    the functions either \"exportRows\", the VoltDB export endpoint,\n    or to \"htmlRows\", the source static html of recent notifications.\n    If neither, call the `not_found` function.",
        "detail": "github.com.voltdb.voltdb.examples.metrocard.exportServer",
        "documentation": {}
    },
    {
        "label": "reset",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "def reset(runner):\n    result = runner.call_proc('@ResetDR', [VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT],\n                              [runner.opts.clusterId, runner.opts.forcing * 1, runner.opts.resetAll * 1]).table(0)\n    status = result.tuple(0).column_integer(0)\n    message = result.tuple(0).column_string(1)\n    if status == 0:\n        runner.info(message)\n    else:\n        runner.error(message)\n        sys.exit(1)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "drop",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "def drop(runner):\n    result = runner.call_proc('@ResetDR', [VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT],\n                              [-1, runner.opts.forcing * 1, -1]).table(0)\n    status = result.tuple(0).column_integer(0)\n    message = result.tuple(0).column_string(1)\n    if status == 0:\n        runner.info(message)\n    else:\n        runner.error(message)\n        sys.exit(1)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "dr",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "def dr(runner):\n    if runner.opts.forcing and runner.opts.resetAll:\n        runner.abort_with_help('You cannot specify both --force and --all options.')\n    if runner.opts.clusterId >= 0 and runner.opts.resetAll:\n        runner.abort_with_help('You cannot specify both --cluster and --all options.')\n    if runner.opts.modifier == \"drop\" and (runner.opts.forcing or runner.opts.clusterId >=0 or runner.opts.resetAll):\n        runner.abort_with_help('You cannot specify either --force, --cluster or --all for drop.')\n    if runner.opts.timeout < 0:\n        runner.abort_with_help('The timeout value must be non-negative seconds.')\n    if runner.opts.clusterId < -1 or runner.opts.clusterId > 127:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "getOwnClusterId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "def getOwnClusterId(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])\n    # Convert @SystemInformation results to objects.\n    hosts = Hosts(runner.abort)\n    for tuple in response.table(0).tuples():\n        hosts.update(tuple[0], tuple[1], tuple[2])\n    # get current version and root directory from an arbitrary node\n    host = next(iter(hosts.hosts_by_id.values()))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "getRemoteClusterIds",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "def getRemoteClusterIds(runner):\n    response = checkstats.get_stats(runner, \"DRROLE\")\n    clusterIds = []\n    for tuple in response.table(0).tuples():\n        remote_cluster_id = tuple[2]\n        if remote_cluster_id != -1:\n            clusterIds.append(remote_cluster_id)\n    return clusterIds",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "RELEASE_MAJOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "RELEASE_MAJOR_VERSION = 7\nRELEASE_MINOR_VERSION = 2\ndef reset(runner):\n    result = runner.call_proc('@ResetDR', [VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT],\n                              [runner.opts.clusterId, runner.opts.forcing * 1, runner.opts.resetAll * 1]).table(0)\n    status = result.tuple(0).column_integer(0)\n    message = result.tuple(0).column_string(1)\n    if status == 0:\n        runner.info(message)\n    else:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "RELEASE_MINOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "peekOfCode": "RELEASE_MINOR_VERSION = 2\ndef reset(runner):\n    result = runner.call_proc('@ResetDR', [VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT, VOLT.FastSerializer.VOLTTYPE_TINYINT],\n                              [runner.opts.clusterId, runner.opts.forcing * 1, runner.opts.resetAll * 1]).table(0)\n    status = result.tuple(0).column_integer(0)\n    message = result.tuple(0).column_string(1)\n    if status == 0:\n        runner.info(message)\n    else:\n        runner.error(message)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.dr",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "peekOfCode": "def release(runner):\n    columns = [VOLT.FastSerializer.VOLTTYPE_STRING, VOLT.FastSerializer.VOLTTYPE_STRING, VOLT.FastSerializer.VOLTTYPE_STRING]\n    params = [runner.opts.source, runner.opts.targets.split(\",\"), \"release\"]\n    response = runner.call_proc('@ExportControl', columns, params)\n    print(response.table(0).format_table(caption = 'Export Release Results'))\n@VOLT.Multi_Command(\n    bundles = VOLT.AdminBundle(),\n    description = 'Export control command.',\n    options = (\n            VOLT.StringOption('-s', '--source', 'source', 'The stream source', default = ''),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "documentation": {}
    },
    {
        "label": "export",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "peekOfCode": "def export(runner):\n     runner.go()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.export",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "peekOfCode": "def inspect(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['LICENSE'])\n    print(response.table(0).format_table(caption = 'License Information'))\n    for tuple in response.table(0).tuples():\n        if tuple[0] == 'EXPIRATION':\n            expiration = datetime.datetime.strptime(tuple[1], \"%a %b %d, %Y\")\n            daysUntilExpiration = expiration - datetime.datetime.today()\n            print(\"License expires on \" + tuple[1] + \" (\" + str(daysUntilExpiration.days) + \" days remaining).\")",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "documentation": {}
    },
    {
        "label": "filter_tuples",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "peekOfCode": "def filter_tuples(table, index, selector):\n    selected = []\n    for tuple in table.tuples():\n        if tuple[index] in selector:\n            selected.append(tuple)\n    return selected\ndef approx_uptime(table, propix=1, valix=2):\n    for tuple in table:\n        if tuple[propix] == 'UPTIME': # ignore millisecs which may somnetimes differ\n            tuple[valix] = re.sub(r'\\.\\d\\d\\d$', '', tuple[valix])",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "documentation": {}
    },
    {
        "label": "approx_uptime",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "peekOfCode": "def approx_uptime(table, propix=1, valix=2):\n    for tuple in table:\n        if tuple[propix] == 'UPTIME': # ignore millisecs which may somnetimes differ\n            tuple[valix] = re.sub(r'\\.\\d\\d\\d$', '', tuple[valix])\n    return table\ndef squash_same_values(input, hostix=0, propix=1, valix=2):\n    propmap = {}\n    for tuple in input:\n        prop = tuple[propix]\n        if prop not in propmap:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "documentation": {}
    },
    {
        "label": "squash_same_values",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "peekOfCode": "def squash_same_values(input, hostix=0, propix=1, valix=2):\n    propmap = {}\n    for tuple in input:\n        prop = tuple[propix]\n        if prop not in propmap:\n            propmap[prop] = []\n        propmap[prop].append((tuple[hostix], tuple[valix]))\n    output = []\n    for prop in sorted(propmap.keys()):\n        pairs = propmap[prop]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.inspect",
        "documentation": {}
    },
    {
        "label": "jstack",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "peekOfCode": "def jstack(runner):\n    # take the jstack using exec @JStack HOST_ID\n    if runner.opts.target_host is None:\n        runner.info('Taking jstack of all hosts.')\n        hsId = -1\n    else:\n        runner.info('Taking jstack of host: %s' % (runner.opts.target_host))\n        hsId = findTargetHsId(runner)\n    if not runner.opts.dryrun:\n        response = runner.call_proc('@JStack',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "documentation": {}
    },
    {
        "label": "findTargetHsId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "peekOfCode": "def findTargetHsId(runner):\n    # Exec @SystemInformation to find out about the cluster.\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])\n    # Convert @SystemInformation results to objects.\n    hosts = Hosts(runner.abort)\n    for tuple in response.table(0).tuples():\n        hosts.update(tuple[0], tuple[1], tuple[2])\n    # Connect to an arbitrary host that isn't being stopped.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.jstack",
        "documentation": {}
    },
    {
        "label": "license",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.license",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.license",
        "peekOfCode": "def license(runner):\n    license_file = VOLT.utility.File(runner.opts.license);\n    try:\n        licenseBytes = license_file.read_hex().decode()\n        # call_proc() aborts with an error if the update failed.\n        response = runner.call_proc('@UpdateLicense', [VOLT.FastSerializer.VOLTTYPE_STRING], [licenseBytes])\n        if response.status() != 1:\n            runner.abort('Failed to update the license. Response status: %d' % response.response.statusString)\n        for row in response.table(0).tuples():\n            procStatus, errStr = row[0], row[1]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.license",
        "documentation": {}
    },
    {
        "label": "log4j",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.log4j",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.log4j",
        "peekOfCode": "def log4j(runner):\n    log4j_file = utility.File(runner.opts.log4j_xml_path)\n    try:\n        log4j_file.open()\n        xml_text = log4j_file.read()\n        response = runner.call_proc(\n            '@UpdateLogging',\n            [VOLT.FastSerializer.VOLTTYPE_STRING],\n            [xml_text])\n        print(response)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.log4j",
        "documentation": {}
    },
    {
        "label": "pause",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.pause",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.pause",
        "peekOfCode": "def pause(runner):\n    if runner.opts.timeout <= 0:\n        runner.abort_with_help('The timeout value must be more than zero seconds.')\n    #Check the STATUS column. runner.call_proc() detects and aborts on errors.\n    status = runner.call_proc('@Pause', [], []).table(0).tuple(0).column_integer(0)\n    if status != 0:\n        runner.abort('The cluster has failed to pause with status: %d' % status)\n    runner.info('The cluster is paused.')\n    if runner.opts.waiting:\n        status = runner.call_proc('@Quiesce', [], []).table(0).tuple(0).column_integer(0)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.pause",
        "documentation": {}
    },
    {
        "label": "plan_upgrade",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def plan_upgrade(runner):\n    hosts, kfactor, clusterIds = basicCheck(runner)\n    generateCommands(runner,\n                     hosts,\n                     kfactor,\n                     clusterIds)\ndef basicCheck(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "basicCheck",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def basicCheck(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])\n    # Convert @SystemInformation results to objects.\n    hosts = Hosts(runner.abort)\n    for tuple in response.table(0).tuples():\n        hosts.update(tuple[0], tuple[1], tuple[2])\n    # get current version and root directory from an arbitrary node\n    host = next(iter(hosts.hosts_by_id.values()));",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateCommands",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateCommands(runner, hosts, kfactor, clusterIds):\n    hostcount = len(hosts.hosts_by_id)\n    (killSet, surviveSet) = pickNodeToKill(hosts, int(kfactor), hostcount / 2)\n    # 1 generate deployment file\n    step = 1\n    post_upgrade_deploy = \"post_upgrade_deployment.xml\"\n    new_cluster_deploy = \"deployment_for_new_version.xml\"\n    files, newNodeF = generateDeploymentFile(runner, hosts, surviveSet, killSet,\n                                             clusterIds, post_upgrade_deploy,\n                                             new_cluster_deploy, step)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateSchemaFileCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateSchemaFileCommand(runner, hosts, files, step):\n    host = next(iter(hosts.hosts_by_id.values()));\n    command1 = '#instruction# get schema file: voltdb get --dir=%s --output=%s schema\\n' %(host.voltdbroot, os.path.join(runner.opts.newRoot, 'description.sql'))\n    command2 = '#instruction# get procedure classes file: voltdb get --dir=%s --output=%s classes\\n' %(host.voltdbroot, os.path.join(runner.opts.newRoot, 'procedure.jar'))\n    writeCommands(files[getKey(host)],\n                  'Step %d: stop node' % step,\n                  command1+command2)\ndef generateDeploymentFile(runner, hosts, surviveSet, killSet, clusterIds, post_upgrade_deploy, new_cluster_deploy, step):\n    files = dict()\n    newDeploymentHasAbsPath = False",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateDeploymentFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateDeploymentFile(runner, hosts, surviveSet, killSet, clusterIds, post_upgrade_deploy, new_cluster_deploy, step):\n    files = dict()\n    newDeploymentHasAbsPath = False\n    drSource = None\n    another_deploy = None\n    # get deployment file from the original cluster\n    xmlString = getCurrentDeploymentFile(runner, surviveSet[0])\n    # If this is a stand-alone cluster, generate a deployment file with a XDCR connection source\n    if len(clusterIds) == 1:\n        drSource = getHostnameOrIp(surviveSet[0]) + ':' + str(surviveSet[0].drport)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateStopNodeCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateStopNodeCommand(hosts, survivor, killSet, files, step):\n    for hostId, hostInfo in list(hosts.hosts_by_id.items()):\n        if hostInfo in killSet:\n            writeCommands(files[getKey(hostInfo)],\n                          'Step %d: stop node' % step,\n                          'voltadmin stop -H %s:%d %s:%d' % (survivor.hostname,\n                                                             survivor.adminport,\n                                                             getHostnameOrIp(hostInfo),\n                                                             hostInfo.internalport))\ndef generateInitNewClusterCommand(opts, killSet, files, new_cluster_deploy, newNodeF, step):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateInitNewClusterCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateInitNewClusterCommand(opts, killSet, files, new_cluster_deploy, newNodeF, step):\n    for hostInfo in killSet:\n        writeCommands(files[getKey(hostInfo)],\n                      'Step %d: initialize new cluster' % step,\n                      '%s init --dir=%s --config=%s --schema=%s --classes=%s --force' % (os.path.join(opts.newKit, 'bin/voltdb'),\n                                                                opts.newRoot,\n                                                                os.path.join(opts.newRoot, new_cluster_deploy),\n                                                                os.path.join(opts.newRoot, 'schema.sql'),\n                                                                os.path.join(opts.newRoot, 'procedure.jar')))\n    if opts.newNode is not None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateInitOldClusterCommmand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateInitOldClusterCommmand(opts, surviveSet, files, new_cluster_deploy, halfNodes, step):\n    initNodes = 0\n    for hostInfo in surviveSet:\n        initNodes += 1\n        writeCommands(files[getKey(hostInfo)],\n                      'Step %d: initialize new cluster' % step,\n                      '%s init --dir=%s --config=%s --schema=%s --classes%s --force' % (os.path.join(opts.newKit, 'bin/voltdb'),\n                                                                opts.newRoot,\n                                                                os.path.join(opts.newRoot, new_cluster_deploy),\n                                                                os.path.join(opts.newRoot, 'schema.sql'),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateStartNewClusterCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateStartNewClusterCommand(opts, killSet, hostcount, files, newNodeF, step):\n    leadersString = []\n    for hostInfo in killSet:\n        leadersString.append(getHostnameOrIp(hostInfo) + ':' + str(hostInfo.internalport))\n    if opts.newNode is not None:\n        leadersString.append(opts.newNode + ':' + str(hostInfo.internalport))\n    for hostInfo in killSet:\n        writeCommands(files[getKey(hostInfo)],\n                      'Step %d: start new cluster' % step,\n                      \"%s start --dir=%s -H %s -c %d --missing=%d\" % (os.path.join(opts.newKit, 'bin/voltdb'),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateDisableDRConnectionCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateDisableDRConnectionCommand(opts, survivor, files, post_upgrade_deploy, step):\n    writeCommands(files[getKey(survivor)],\n              'Step %d: disable DR connection in the new cluster' % step,\n              'voltadmin update -H %s:%d %s' % (survivor.hostname,\n                                                survivor.adminport,\n                                                os.path.join(opts.newRoot, post_upgrade_deploy)))\ndef generatePauseCommand(survivor, files, step):\n   writeCommands(files[getKey(survivor)],\n                  'Step %d: wait for XDCR stream to drain' % step,\n                  'voltadmin pause --wait -H %s:%d' % (survivor.hostname, survivor.adminport))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generatePauseCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generatePauseCommand(survivor, files, step):\n   writeCommands(files[getKey(survivor)],\n                  'Step %d: wait for XDCR stream to drain' % step,\n                  'voltadmin pause --wait -H %s:%d' % (survivor.hostname, survivor.adminport))\ndef generateShutdownOriginClusterCommand(survivor, files, step):\n    writeCommands(files[getKey(survivor)],\n                  'Step %d: shutdown the original cluster' % step,\n                  'voltadmin shutdown -H %s:%d' % (survivor.hostname, survivor.adminport))\ndef generateDRResetCommand(runner, survivor, victim, clusterIds, files, step):\n    command = \"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateShutdownOriginClusterCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateShutdownOriginClusterCommand(survivor, files, step):\n    writeCommands(files[getKey(survivor)],\n                  'Step %d: shutdown the original cluster' % step,\n                  'voltadmin shutdown -H %s:%d' % (survivor.hostname, survivor.adminport))\ndef generateDRResetCommand(runner, survivor, victim, clusterIds, files, step):\n    command = \"\"\n    if len(clusterIds) == 1:\n        command = 'voltadmin dr reset --cluster=%s -H %s:%d --force\\n' % (survivor.clusterid, getHostnameOrIp(victim), victim.adminport)\n    else:\n        remoteTopo = dict()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateDRResetCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateDRResetCommand(runner, survivor, victim, clusterIds, files, step):\n    command = \"\"\n    if len(clusterIds) == 1:\n        command = 'voltadmin dr reset --cluster=%s -H %s:%d --force\\n' % (survivor.clusterid, getHostnameOrIp(victim), victim.adminport)\n    else:\n        remoteTopo = dict()\n        # Find remote covering host through drconsumer stats, one for each remote cluster\n        response = checkstats.get_stats(runner, \"DRCONSUMER\")\n        for tuple in response.table(1).tuples():\n            remote_cluster_id = tuple[4]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "generateNodeRejoinCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def generateNodeRejoinCommand(opts, surviveSet, leadersString, files, halfNodes, step):\n    rejoinNodes = 0\n    for hostInfo in surviveSet:\n        rejoinNodes += 1\n        file = files[getKey(hostInfo)]\n        writeCommands(file,\n                      'Step %d: rejoin the node to new cluster' % step,\n                      '%s start --dir=%s -H %s' % (os.path.join(opts.newKit, 'bin/voltdb'),\n                                                   opts.newRoot,\n                                                   ','.join(leadersString)))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "cleanup",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def cleanup(opts, files, newNodeF):\n    upgradePlan = open(\"upgrade-plan.txt\", 'w+')\n    upgradePlan.write(\"Instructions:\\n\\n\")\n    upgradePlan.write(\"1. This plan provides steps to be executed on each of the servers in the cluster.\\n\")\n    upgradePlan.write(\"2. The steps for each server are listed separately.\\n\")\n    upgradePlan.write(\"3. For each step (0, 1, 2, etc.), execute that step on all servers to which it applies before moving on to the next step.\\n\\n\")\n    for key, file in list(files.items()):\n        upgradePlan.write(file.getvalue() + '\\n')\n        file.close()\n    if opts.newNode is not None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "pickNodeToKill",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def pickNodeToKill(hosts, kfactor, expectation):\n    victims = []\n    survivors = []\n    if kfactor >= expectation:\n        for hostId, hostInfo in list(hosts.hosts_by_id.items()):\n            if len(victims) < expectation:\n                victims.append(hostInfo)\n            else:\n                survivors.append(hostInfo)\n        return victims, survivors",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "getKey",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def getKey(host):\n    return host.ipaddress + str(host.internalport) + host.hostname\ndef getHostnameOrIp(host):\n    if host.hostname is None:\n        return host.ipaddress\n    else:\n        return host.hostname\ndef writeHeader(file, name):\n    delimiter = '=' * 40\n    file.write(delimiter + '\\n')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "getHostnameOrIp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def getHostnameOrIp(host):\n    if host.hostname is None:\n        return host.ipaddress\n    else:\n        return host.hostname\ndef writeHeader(file, name):\n    delimiter = '=' * 40\n    file.write(delimiter + '\\n')\n    file.write(name);\n    file.write('\\n')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "writeHeader",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def writeHeader(file, name):\n    delimiter = '=' * 40\n    file.write(delimiter + '\\n')\n    file.write(name);\n    file.write('\\n')\n    file.write(delimiter)\n    file.write('\\n')\ndef writeCommands(file, subject, command):\n    delimiter = '*' * 5\n    file.write(delimiter + subject + delimiter)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "writeCommands",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def writeCommands(file, subject, command):\n    delimiter = '*' * 5\n    file.write(delimiter + subject + delimiter)\n    file.write('\\n')\n    if command is not None:\n        file.write(command)\n        file.write('\\n\\n')\n# get deployment file through rest API\ndef getCurrentDeploymentFile(runner, host):\n    sslContext = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "getCurrentDeploymentFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def getCurrentDeploymentFile(runner, host):\n    sslContext = None\n    if runner.opts.ssl_config is None:\n        protocol = \"http://\"\n    else:\n        protocol = \"https://\"\n        tlsv = None\n        try:\n            tlsv = ssl.PROTOCOL_TLS\n        except AttributeError as e:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "createDeploymentForOriginalCluster",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def createDeploymentForOriginalCluster(runner, xmlString, drSource, post_upgrade_deploy):\n    et = ElementTree.ElementTree(ElementTree.fromstring(xmlString))\n    hasAbsPath = checkAbsPaths(runner, et.getroot(), post_upgrade_deploy)\n    dr = et.getroot().find('./dr')\n    if dr is None:\n        runner.abort(\"This cluster doesn't have a DR tag in its deployment file, hence we can't generate online upgrade plan for it. \" +\n                     \"In order to add DR tag to the deployment file, users are required to shutdown the database.\")\n    if 'id' not in dr.attrib:\n        clusterId = 0;  # by default clusterId is 0\n    else :",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "createDeploymentForNewCluster",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def createDeploymentForNewCluster(runner, xmlString, clusterIds, drSource, new_cluster_deploy, post_upgrade_deploy):\n    et = ElementTree.ElementTree(ElementTree.fromstring(xmlString))\n    hasAbsPath = checkAbsPaths(runner, et.getroot(), new_cluster_deploy)\n    # Prefer not to use 0 as the cluster Id\n    for clusterId in range(1, 127):\n        if clusterId not in clusterIds:\n            break\n    # since we check the existence of DR tag when generating deployment file for origin cluster, it's safe to skip it here\n    dr = et.getroot().find('./dr')\n    dr.attrib['id'] = str(clusterId)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "commentAbsPath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def commentAbsPath(root, pathname, comment):\n    path = root.find(pathname)\n    if os.path.isabs(path.attrib['path']):\n        commentedPath = ElementTree.Comment(ElementTree.tostring(path))\n        root.append(comment)\n        root.append(commentedPath)\n        root.remove(path)\n        return True\n    return False\n# Check if the path is an absolute path, if true then comment the path in case of overwriting important artifact accidentally",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "checkAbsPaths",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def checkAbsPaths(runner, root, filename):\n    ret = False;\n    comment = ElementTree.Comment(\"ERROR: PLEASE EDIT THE PATH BEFORE USE!\")\n    paths = root.find('./paths')\n    ret |= commentAbsPath(paths, 'voltdbroot', comment)\n    ret |= commentAbsPath(paths, 'snapshots', comment)\n    ret |= commentAbsPath(paths, 'exportoverflow', comment)\n    ret |= commentAbsPath(paths, 'droverflow', comment)\n    ret |= commentAbsPath(paths, 'commandlog', comment)\n    ret |= commentAbsPath(paths, 'commandlogsnapshot', comment)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "prettyprint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def prettyprint(elem, level=0):\n    tabspace = \"    \"\n    i = \"\\n\" + level * tabspace\n    if len(elem):\n        if not elem.text or not elem.text.strip():\n            elem.text = i + \"  \"\n        if not elem.tail or not elem.tail.strip():\n            elem.tail = i\n        for elem in elem:\n            prettyprint(elem, level + 1)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "checkNewNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "peekOfCode": "def checkNewNode(hostname):\n    try:\n        subprocess.call([\"ping\", \"-c 1\", hostname], stdout=open(os.devnull, 'wb'))\n    except Exception as e:\n        return e\n    return None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.plan_upgrade",
        "documentation": {}
    },
    {
        "label": "promote",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.promote",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.promote",
        "peekOfCode": "def promote(runner):\n    # Check the STATUS column. runner.call_proc() detects and aborts on errors.\n    status = runner.call_proc('@Promote', [], []).table(0).tuple(0).column_integer(0)\n    if status == 0:\n        runner.info('The cluster is promoted to normal operation.')\n    else:\n        runner.abort('The cluster failed to promote with status: %d' % status)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.promote",
        "documentation": {}
    },
    {
        "label": "Option",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "peekOfCode": "class Option:\n    TEST = 0\n    START = 1\n    STATUS = 2\n    RESTART = 3\n    UPDATE = 4\ndef hostIdsToNames(hostId, hosts):\n    host = hosts.hosts_by_id.get(int(hostId))\n    return host.hostname if host else 'UNAVAILABLE'\n@VOLT.Command(",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "documentation": {}
    },
    {
        "label": "hostIdsToNames",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "peekOfCode": "def hostIdsToNames(hostId, hosts):\n    host = hosts.hosts_by_id.get(int(hostId))\n    return host.hostname if host else 'UNAVAILABLE'\n@VOLT.Command(\n    bundles = VOLT.AdminBundle(),\n    description = 'Elastic resizing cluster command.',\n    options = (\n            VOLT.StringListOption(None, '--ignore', 'skip_requirements',\n                                  '''Conditions that can be ignored when resizing the cluster:\n                                  disabled_export -- ignore pending export data for targets that are disabled''',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "documentation": {}
    },
    {
        "label": "resize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "peekOfCode": "def resize(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])\n    # Convert @SystemInformation results to objects.\n    hosts = Hosts(runner.abort)\n    for tuple in response.table(0).tuples():\n        hosts.update(*tuple)\n    # get current version and root directory from an arbitrary node\n    host = next(iter(hosts.hosts_by_id.values()))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "documentation": {}
    },
    {
        "label": "RELEASE_MAJOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "peekOfCode": "RELEASE_MAJOR_VERSION = 9\nRELEASE_MINOR_VERSION = 1\n# elastic remove procedure call option\n# Need to be update once ElasticRemoveNT.java add/remove/change option coding\nclass Option:\n    TEST = 0\n    START = 1\n    STATUS = 2\n    RESTART = 3\n    UPDATE = 4",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "documentation": {}
    },
    {
        "label": "RELEASE_MINOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "peekOfCode": "RELEASE_MINOR_VERSION = 1\n# elastic remove procedure call option\n# Need to be update once ElasticRemoveNT.java add/remove/change option coding\nclass Option:\n    TEST = 0\n    START = 1\n    STATUS = 2\n    RESTART = 3\n    UPDATE = 4\ndef hostIdsToNames(hostId, hosts):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resize",
        "documentation": {}
    },
    {
        "label": "restore",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.restore",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.restore",
        "peekOfCode": "def restore(runner):\n    nonce = runner.opts.nonce.replace('\"', '\\\\\"')\n    if runner.opts.tables and runner.opts.skip_tables:\n        print('Cannot specify both --tables and --skiptables.')\n        return\n    if runner.opts.hashinator:\n        hashinator = 'true'\n    else:\n        hashinator = 'false'\n    json_opts = ['{path:\"%s\",nonce:\"%s\",hashinator:\"%s\"}' % (runner.opts.directory, nonce, hashinator)]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.restore",
        "documentation": {}
    },
    {
        "label": "resume",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resume",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resume",
        "peekOfCode": "def resume(runner):\n    # Check the STATUS column. runner.call_proc() detects and aborts on errors.\n    status = runner.call_proc('@Resume', [], []).table(0).tuple(0).column_integer(0)\n    if status == 0:\n        runner.info('The cluster has resumed.')\n    else:\n        runner.abort('The cluster has failed to resume with status: %d' % status)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.resume",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.save",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.save",
        "peekOfCode": "def save(runner):\n    uri = None\n    dir_specified = False\n    if runner.opts.directory is not None:\n        uri = 'file://%s' % urllib.parse.quote(runner.opts.directory)\n        dir_specified = True\n    nonce = None\n    if runner.opts.nonce is not None:\n        nonce = runner.opts.nonce.replace('\"', '\\\\\"')\n    elif dir_specified:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.save",
        "documentation": {}
    },
    {
        "label": "show_snapshots",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "peekOfCode": "def show_snapshots(runner):\n    response = checkstats.get_stats(runner, \"SnapshotSummary\")\n    print(response.table(0).format_table(caption = 'Snapshot Summary'))\ndef show_license(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['LICENSE'])\n    print(response.table(0).format_table(caption = 'License Information'))\n    for tuple in response.table(0).tuples():\n        if tuple[0] == 'EXPIRATION':",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "documentation": {}
    },
    {
        "label": "show_license",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "peekOfCode": "def show_license(runner):\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['LICENSE'])\n    print(response.table(0).format_table(caption = 'License Information'))\n    for tuple in response.table(0).tuples():\n        if tuple[0] == 'EXPIRATION':\n            expiration = datetime.datetime.strptime(tuple[1], \"%a %b %d, %Y\")\n            daysUntilExpiration = expiration - datetime.datetime.today()\n            print(\"License expires on \" + tuple[1] + \" (\" + str(daysUntilExpiration.days) + \" days remaining).\")",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "documentation": {}
    },
    {
        "label": "show",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "peekOfCode": "def show(runner):\n    runner.go()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.show",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.shutdown",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.shutdown",
        "peekOfCode": "def shutdown(runner):\n    if runner.opts.forcing and runner.opts.save:\n       runner.abort_with_help('You cannot specify both --force and --save options.')\n    if runner.opts.cancel and runner.opts.save:\n       runner.abort_with_help('You cannot specify both --cancel and --save options.')\n    if runner.opts.cancel and runner.opts.forcing:\n       runner.abort_with_help('You cannot specify both --cancel and --force options.')\n    if runner.opts.timeout <= 0:\n        runner.abort_with_help('The timeout value must be more than zero seconds.')\n    shutdown_params = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.shutdown",
        "documentation": {}
    },
    {
        "label": "status",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "def status(runner):\n    available_hosts = []\n    if runner.opts.continuous:\n        try:\n            while True:\n                # clear screen first\n                tmp = subprocess.call('clear', shell=True)\n                doStatus(runner, available_hosts)\n                time.sleep(5)  # used to be runner.opts.interval, default as 2 seconds\n        except KeyboardInterrupt as e:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "doStatus",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "def doStatus(runner, available_hosts):\n    # the cluster(host) which voltadmin is running on always comes first\n    clusterInfo = None\n    try:\n        if runner.client.host != runner.opts.host.host:\n            runner.__voltdb_connect__(available_hosts[0].split(':')[0],\n                                      int(available_hosts[0].split(':')[1]),\n                                      runner.opts.username,\n                                      runner.opts.password,\n                                      runner.opts.ssl_config)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "getClusterInfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "def getClusterInfo(runner, available_hosts, clearHostCache):\n    # raise execption when failed to connect\n    response = runner.call_proc('@SystemInformation',\n                                    [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                    ['OVERVIEW'],\n                                    True, None, True)\n    if response.response.status != 1:\n        return None\n    if clearHostCache:\n        available_hosts[:] = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "printPlainSummary",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "def printPlainSummary(cluster):\n    header1 = \"Cluster {}, version {}, hostcount {}, kfactor {}\".format(cluster.id,\n                                                                        cluster.version,\n                                                                        cluster.hostcount,\n                                                                        cluster.kfactor)\n    livehost = len(cluster.hosts_by_id)\n    missing = cluster.hostcount - livehost\n    header2 = \" {} live host{}, {} missing host{}, {} live client{}, uptime {}\".format(\n                livehost, 's' if livehost > 2 else '',\n                missing, 's' if missing > 2 else '',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "printJSONSummary",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "def printJSONSummary(cluster):\n    remoteClusterInfos = []\n    for clusterId, remoteCluster in list(cluster.remoteclusters_by_id.items()):\n        clusterInfo = {\n            \"clusterId\": clusterId,\n            \"state\": remoteCluster.status,\n            \"role\": remoteCluster.role\n        }\n        remoteClusterInfos.append(clusterInfo)\n    members = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "RELEASE_MAJOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "RELEASE_MAJOR_VERSION = 7\nRELEASE_MINOR_VERSION = 2\nRESIZE_MAJOR_VERSION = 9\nRESIZE_MINOR_VERSION = 1\n@VOLT.Command(\n    bundles=VOLT.AdminBundle(),\n    description=\"Show status of current cluster and remote cluster(s) it connects to\",\n    options=(\n            VOLT.BooleanOption('-c', '--continuous', 'continuous', 'continuous listing', default=False),\n            VOLT.BooleanOption('-j', '--json', 'json', 'print out JSON format instead of plain text', default=False),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "RELEASE_MINOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "RELEASE_MINOR_VERSION = 2\nRESIZE_MAJOR_VERSION = 9\nRESIZE_MINOR_VERSION = 1\n@VOLT.Command(\n    bundles=VOLT.AdminBundle(),\n    description=\"Show status of current cluster and remote cluster(s) it connects to\",\n    options=(\n            VOLT.BooleanOption('-c', '--continuous', 'continuous', 'continuous listing', default=False),\n            VOLT.BooleanOption('-j', '--json', 'json', 'print out JSON format instead of plain text', default=False),\n            VOLT.BooleanOption(None, '--dr', 'dr', 'display DR/XDCR related status', default=False)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "RESIZE_MAJOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "RESIZE_MAJOR_VERSION = 9\nRESIZE_MINOR_VERSION = 1\n@VOLT.Command(\n    bundles=VOLT.AdminBundle(),\n    description=\"Show status of current cluster and remote cluster(s) it connects to\",\n    options=(\n            VOLT.BooleanOption('-c', '--continuous', 'continuous', 'continuous listing', default=False),\n            VOLT.BooleanOption('-j', '--json', 'json', 'print out JSON format instead of plain text', default=False),\n            VOLT.BooleanOption(None, '--dr', 'dr', 'display DR/XDCR related status', default=False)\n    ),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "RESIZE_MINOR_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "peekOfCode": "RESIZE_MINOR_VERSION = 1\n@VOLT.Command(\n    bundles=VOLT.AdminBundle(),\n    description=\"Show status of current cluster and remote cluster(s) it connects to\",\n    options=(\n            VOLT.BooleanOption('-c', '--continuous', 'continuous', 'continuous listing', default=False),\n            VOLT.BooleanOption('-j', '--json', 'json', 'print out JSON format instead of plain text', default=False),\n            VOLT.BooleanOption(None, '--dr', 'dr', 'display DR/XDCR related status', default=False)\n    ),\n)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.status",
        "documentation": {}
    },
    {
        "label": "stop",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.stop",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.stop",
        "peekOfCode": "def stop(runner):\n    # Exec @SystemInformation to find out about the cluster.\n    response = runner.call_proc('@SystemInformation',\n                                [VOLT.FastSerializer.VOLTTYPE_STRING],\n                                ['OVERVIEW'])\n    # Convert @SystemInformation results to objects.\n    hosts = Hosts(runner.abort)\n    for tuple in response.table(0).tuples():\n        hosts.update(tuple[0], tuple[1], tuple[2])\n    # Connect to an arbitrary host that isn't being stopped.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.stop",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "peekOfCode": "def release(runner):\n    columns = [VOLT.FastSerializer.VOLTTYPE_STRING, VOLT.FastSerializer.VOLTTYPE_STRING]\n    params = [runner.opts.topic, \"release\"]\n    response = runner.call_proc('@TopicControl', columns, params)\n    print(response.table(0).format_table(caption = 'Topic Release Results'))\n@VOLT.Multi_Command(\n    bundles = VOLT.AdminBundle(),\n    description = 'Topic control command.',\n    options = (\n            VOLT.StringOption('-t', '--topic', 'topic', 'The topic stream', default = '')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "documentation": {}
    },
    {
        "label": "topic",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "peekOfCode": "def topic(runner):\n     runner.go()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.topic",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.update",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.update",
        "peekOfCode": "def update(runner):\n    columns = [VOLT.FastSerializer.VOLTTYPE_NULL, VOLT.FastSerializer.VOLTTYPE_NULL]\n    catalog = None\n    deployment = None\n    configuration = runner.opts.configuration\n    deployment = VOLT.utility.File(configuration).read()\n    columns[1] = VOLT.FastSerializer.VOLTTYPE_STRING\n    params = [catalog, deployment]\n    # call_proc() aborts with an error if the update failed.\n    runner.call_proc('@UpdateApplicationCatalog', columns, params)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.update",
        "documentation": {}
    },
    {
        "label": "validate_partitioning",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "peekOfCode": "def validate_partitioning(runner):\n    print('Validating partitioning...')\n    columns = [VOLT.FastSerializer.VOLTTYPE_VARBINARY]\n    response = runner.call_proc('@ValidatePartitioning', columns, [None])\n    mispartitioned_tuples = sum([t[4] for t in response.table(0).tuples()])\n    total_hashes = response.table(1).tuple_count()\n    mismatched_hashes = total_hashes - sum([t[3] for t in response.table(1).tuples()])\n    print('')\n    if mispartitioned_tuples == 0 and mismatched_hashes == 0:\n        print('Partitioning is correct.')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "documentation": {}
    },
    {
        "label": "validate",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "peekOfCode": "def validate(runner):\n    validate_partitioning(runner)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltadmin.d.validate",
        "documentation": {}
    },
    {
        "label": "displayResults",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "peekOfCode": "def displayResults():\n    fails = 0\n    warns = 0\n    for key,val in sorted(output.items()):\n        if val[0] == \"FAIL\":\n            fails += 1\n        elif val[0] == \"WARN\":\n            warns += 1\n        print(\"Status: %-25s %-8s %-9s\" % ( key, val[0], val[1] ))\n    if fails > 0:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "peekOfCode": "def check(runner):\n    systemCheck()\ndef systemCheck():\n    output['Hostname'] = [\"\", platform.node()]\n    output['ThreadCount'] = [\"\", str(multiprocessing.cpu_count())]\n    checkconfig.test_full_config(output)\n    displayResults()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "documentation": {}
    },
    {
        "label": "systemCheck",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "peekOfCode": "def systemCheck():\n    output['Hostname'] = [\"\", platform.node()]\n    output['ThreadCount'] = [\"\", str(multiprocessing.cpu_count())]\n    checkconfig.test_full_config(output)\n    displayResults()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "peekOfCode": "output = {\n            \"Hostname\" : [\"\", \"Unable to gather information\"],\n            \"OS\" : [\"\", \"Unable to gather information\"],\n            \"OS release\" : [\"\", \"Unable to gather information\"],\n            \"ThreadCount\" : [\"\", \"Unable to gather information\"],\n            \"64 bit\" : [\"\", \"Unable to gather information\"],\n            \"Memory\" : [\"\", \"Unable to gather information\"]\n          }\ndef displayResults():\n    fails = 0",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.check",
        "documentation": {}
    },
    {
        "label": "collect",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "def collect(runner):\n    if int(runner.opts.days) == 0:\n        utility.abort(' \\'0\\' is invalid entry for option --days')\n    process_voltdbroot_args(runner)\n    process_outputfile_args(runner)\n    runner.args.extend(['--dryrun=' + str(runner.opts.dryrun), '--skipheapdump=' + str(runner.opts.skipheapdump),\n                        '--days=' + str(runner.opts.days), '--force=' + str(runner.opts.force)])\n    runner.java_execute('org.voltdb.utils.Collector', None, *runner.args)\ndef process_voltdbroot_args(runner) :\n    if (runner.opts.directory_spec) and (runner.opts.voltdbroot):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "process_voltdbroot_args",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "def process_voltdbroot_args(runner) :\n    if (runner.opts.directory_spec) and (runner.opts.voltdbroot):\n        utility.abort('Cannot specify both --dir and command line argument. Please use --dir option.')\n    os.environ['PATH'] += os.pathsep + os.pathsep.join(s for s in sys.path if os.path.join('voltdb', 'bin') in s)\n    # If database directory is given, derive voltdbroot path to store results of systemcheck in voltdbroot directory\n    if runner.opts.directory_spec:\n        if os.path.isdir(runner.opts.directory_spec) and os.access(runner.opts.directory_spec, os.R_OK|os.W_OK|os.X_OK):\n            voltdbrootDir = os.path.join(runner.opts.directory_spec, 'voltdbroot')\n        else:\n            utility.abort('Specified database directory is not valid', runner.opts.directory_spec)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "performSystemCheck",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "def performSystemCheck(runner, dirPath):\n    if os.path.isdir(dirPath) and os.access(dirPath, os.R_OK|os.W_OK|os.X_OK):\n        checkFD = os.open(os.path.join(dirPath, 'systemcheck'), os.O_WRONLY|os.O_CREAT|os.O_TRUNC)\n        checkOutput = os.fdopen(checkFD, 'w')\n        subprocess.call('voltdb check', stdout=checkOutput, shell=True)\n        checkOutput.close()\n    else:\n        if runner.opts.directory_spec:\n            utility.abort('Invalid database directory ' + runner.opts.directory_spec +\n                          '. Specify valid database directory using --dir option.')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "process_outputfile_args",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "def process_outputfile_args(runner):\n    if runner.opts.output and runner.opts.prefix:\n        utility.abort('Cannot specify both --output and --prefix. Please use --output option.')\n    if runner.opts.output:\n        runner.args.extend(['--outputFile=' + runner.opts.output])\n    elif runner.opts.prefix:\n        utility.warning('Specifying prefix for outputfile name is deprecated. Consider using --output option to specify'\n                        ' output file name.')\n        runner.args.extend(['--prefix=' + runner.opts.prefix])",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "collect_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "collect_help = ('Collect logs on the current node for problem analysis')\ndir_spec_help = ('root directory for the database. The default is the current working directory.')\noutput_help = ('file name to store collect data in compressed format. \\'-\\' means standard output. '\n                'The default is the \\'voltdb_collect_<hostname or IP>.zip\\' in the current working directory.')\n@VOLT.Command(\n    description = collect_help,\n    options = (\n        VOLT.StringOption (None, '--prefix', 'prefix',\n                           'file name prefix for uniquely identifying collection. (Deprecated. Please use --output).',\n                           default = ''),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "dir_spec_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "dir_spec_help = ('root directory for the database. The default is the current working directory.')\noutput_help = ('file name to store collect data in compressed format. \\'-\\' means standard output. '\n                'The default is the \\'voltdb_collect_<hostname or IP>.zip\\' in the current working directory.')\n@VOLT.Command(\n    description = collect_help,\n    options = (\n        VOLT.StringOption (None, '--prefix', 'prefix',\n                           'file name prefix for uniquely identifying collection. (Deprecated. Please use --output).',\n                           default = ''),\n        VOLT.StringOption('-o', '--output', 'output', output_help, default=''),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "output_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "peekOfCode": "output_help = ('file name to store collect data in compressed format. \\'-\\' means standard output. '\n                'The default is the \\'voltdb_collect_<hostname or IP>.zip\\' in the current working directory.')\n@VOLT.Command(\n    description = collect_help,\n    options = (\n        VOLT.StringOption (None, '--prefix', 'prefix',\n                           'file name prefix for uniquely identifying collection. (Deprecated. Please use --output).',\n                           default = ''),\n        VOLT.StringOption('-o', '--output', 'output', output_help, default=''),\n        VOLT.BooleanOption(None, '--dry-run', 'dryrun',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.collect",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "peekOfCode": "def get(runner):\n    runner.args.extend(['get'])\n    if runner.opts.resource in ('deployment', 'schema', 'classes', 'license'):\n        runner.args.extend([runner.opts.resource])\n    else:\n        utility.abort('Invalid argument \\'%s\\' for Get command. Valid arguments are deployment, schema, classes and license' % runner.opts.resource)\n    if runner.opts.output:\n        runner.args.extend(['file', runner.opts.output])\n    if runner.opts.directory_spec:\n        runner.args.extend(['getvoltdbroot', runner.opts.directory_spec])",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "documentation": {}
    },
    {
        "label": "dir_spec_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "peekOfCode": "dir_spec_help = ('Specifies the root directory for the database. The default is the current working directory.')\nget_resource_help = ('Supported configuration resources for get command are \\'classes\\', \\'deployment\\', \\'schema\\', and \\'license\\'.\\r\\n'\n                     '           classes    - gets procedure classes of current node\\n'\n                     '           deployment - gets deployment configuration of current node\\n'\n                     '           schema     - gets schema of current node\\n'\n                     '           license    - gets license of current node\\n')\noutput_help = ('Specifies the path and file name for the output file. \\'-\\' operator means standard output. '\n               'Defaults are: '\n               'Deployment - deployment.xml;\\r\\n'\n               'Schema - schema.sql;\\r\\n'",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "documentation": {}
    },
    {
        "label": "get_resource_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "peekOfCode": "get_resource_help = ('Supported configuration resources for get command are \\'classes\\', \\'deployment\\', \\'schema\\', and \\'license\\'.\\r\\n'\n                     '           classes    - gets procedure classes of current node\\n'\n                     '           deployment - gets deployment configuration of current node\\n'\n                     '           schema     - gets schema of current node\\n'\n                     '           license    - gets license of current node\\n')\noutput_help = ('Specifies the path and file name for the output file. \\'-\\' operator means standard output. '\n               'Defaults are: '\n               'Deployment - deployment.xml;\\r\\n'\n               'Schema - schema.sql;\\r\\n'\n               'Classes - procedures.jar;\\r\\n'",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "documentation": {}
    },
    {
        "label": "output_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "peekOfCode": "output_help = ('Specifies the path and file name for the output file. \\'-\\' operator means standard output. '\n               'Defaults are: '\n               'Deployment - deployment.xml;\\r\\n'\n               'Schema - schema.sql;\\r\\n'\n               'Classes - procedures.jar;\\r\\n'\n               'License - license.xml;\\r\\n'\n               )\n@VOLT.Command(\n    description = 'Write the selected database resource (deployment or schema) to a file.',\n    options = (",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.get",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "peekOfCode": "def init(runner):\n    runner.args.extend(['initialize'])\n    if runner.opts.configfile:\n        runner.args.extend(['deployment', runner.opts.configfile])\n    if runner.opts.directory_spec:\n        runner.args.extend(['voltdbroot', runner.opts.directory_spec])\n    if runner.opts.force:\n        runner.args.extend(['force'])\n    if runner.opts.schemas:\n        runner.args.append('schema')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "documentation": {}
    },
    {
        "label": "VoltDB",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "peekOfCode": "VoltDB = 'org.voltdb.VoltDB'\ndef _listOfGlobsToFiles(pathGlobs):\n    result = set()\n    for pathGlob in pathGlobs:\n        globRes = glob(pathGlob.strip())\n        if globRes:\n            result.update(globRes)\n        else:\n            result.add(pathGlob)\n    return \",\".join(result)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.init",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "peekOfCode": "def mask(runner):\n    # Check that there's something to compile.\n    if not runner.opts.deploymentfile:\n        runner.abort_with_help('At least one deployment file must be specified.')\n    # Verbose argument display.\n    if runner.is_verbose():\n        params = ['Deployment file: %s' % runner.opts.deploymentfile[0]]\n        if len(runner.opts.deploymentfile) == 2:\n            params.append('Masked deployment file: %s' % runner.opts.deploymentfile[1])\n        runner.verbose_info('Mask parameters:', params)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "documentation": {}
    },
    {
        "label": "CatalogPasswordScrambler",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "peekOfCode": "CatalogPasswordScrambler = 'org.voltdb.utils.CatalogPasswordScrambler'\n@VOLT.Command(\n    # Descriptions for help screen.\n    description  = 'Mask user passwords in VoltDB deployment file.',\n    description2 = 'At least one deployment file is required.',\n    # Command line arguments.\n    arguments = (\n        VOLT.PathArgument(\n            'deploymentfile',\n            'Source and optionally a destination masked deployment file(s)',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.mask",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "peekOfCode": "def start(runner):\n    if runner.opts.replica:\n        runner.abort_with_help('The --replica option is no longer allowed.')\n    if runner.opts.directory_spec:\n        upath = os.path.expanduser(runner.opts.directory_spec)\n        runner.args.extend(['voltdbroot', upath])\n    if not runner.opts.server_list:\n        runner.abort_with_help('You must specify the --host option.')\n    runner.args.extend(['mesh', ','.join(runner.opts.server_list)])\n    if runner.opts.hostcount:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "documentation": {}
    },
    {
        "label": "voltdbroot_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "peekOfCode": "voltdbroot_help = ('Specifies the root directory for the database. The default '\n                   'is voltdbroot under the current working directory.')\nserver_list_help = ('{hostname-or-ip[,...]}, '\n             'Specifies the leader(s) for coordinating cluster startup. ')\n@VOLT.Command(\n    bundles = VOLT.ServerBundle('probe',\n                                safemode_available=True,\n                                supports_daemon=True,\n                                supports_multiple_daemons=True,\n                                check_environment_config=True,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "documentation": {}
    },
    {
        "label": "server_list_help",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "peekOfCode": "server_list_help = ('{hostname-or-ip[,...]}, '\n             'Specifies the leader(s) for coordinating cluster startup. ')\n@VOLT.Command(\n    bundles = VOLT.ServerBundle('probe',\n                                safemode_available=True,\n                                supports_daemon=True,\n                                supports_multiple_daemons=True,\n                                check_environment_config=True,\n                                supports_paused=True),\n    options = (",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.voltdb.d.start",
        "documentation": {}
    },
    {
        "label": "test_os_release",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_os_release(output):\n    supported = False\n    osName = platform.system()\n    osVersion = None\n    note = None\n    if osName == 'Linux':\n        output['OS'] = ['PASS', 'Linux']\n        distro = distro_info()\n        if distro:\n            osId, osName, osVersion = distro",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "distro_info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def distro_info():\n    # Try Python LSB module as it has the best-looking content\n    try:\n        import lsb_release\n        info = lsb_release.get_distro_information()\n        return (info['ID'].lower(), info['ID'], info['RELEASE'])\n    except Exception:\n        pass\n    # Not got that? Try os-release file\n    try:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "lsb_release_by_command",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def lsb_release_by_command():\n    try:\n        ver = subprocess.run(['lsb_release', '-sr'], timeout=2.0, check=True,\n                             stdout=subprocess.PIPE, encoding='utf-8')\n        return ver.stdout.strip()\n    except Exception:\n        return None\ndef version_number(str, n):\n    try:\n        return int(str.split('.')[n])",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "version_number",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def version_number(str, n):\n    try:\n        return int(str.split('.')[n])\n    except Exception:\n        return 0\ndef test_64bit_os(output):\n    if platform.machine().endswith('64'):\n        output['64 bit'] = [\"PASS\", platform.uname()[2]]\n    else:\n        output['64 bit'] = [\"FAIL\", \"64-bit Linux-based operating system is required to run VoltDB\"]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_64bit_os",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_64bit_os(output):\n    if platform.machine().endswith('64'):\n        output['64 bit'] = [\"PASS\", platform.uname()[2]]\n    else:\n        output['64 bit'] = [\"FAIL\", \"64-bit Linux-based operating system is required to run VoltDB\"]\ndef test_host_memory(output):\n    hostMemory = subprocess.Popen(\"free | grep 'Mem' | tr -s ' ' | cut -d' ' -f2 \", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    if int(hostMemory) >= 4194304:\n        output['Memory'] = [\"PASS\", hostMemory]\n        if int(hostMemory) >= 67108864:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_host_memory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_host_memory(output):\n    hostMemory = subprocess.Popen(\"free | grep 'Mem' | tr -s ' ' | cut -d' ' -f2 \", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    if int(hostMemory) >= 4194304:\n        output['Memory'] = [\"PASS\", hostMemory]\n        if int(hostMemory) >= 67108864:\n            mmapCount = subprocess.Popen(\"cat /proc/sys/vm/max_map_count\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n            if int(mmapCount) >= 1048576:\n                output['MemoryMapCount'] = [\"PASS\", \"Virtual memory max map count is \" + mmapCount]\n            else:\n                output['MemoryMapCount'] = [\"WARN\", \"Virtual memory max map count is \" + mmapCount +",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_ntp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_ntp(output):\n    numOfRunningNTP = subprocess.Popen(\"ps -ef | grep 'ntpd ' | grep -cv grep\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    returnCodeForNTPD = os.system(\"which ntpd >/dev/null 2>&1\")\n    if numOfRunningNTP == '1':\n        output['NTP'] = [\"PASS\", \"NTP is installed and running\"]\n    elif numOfRunningNTP  == '0':\n        if returnCodeForNTPD == 0:\n            output['NTP'] = [\"WARN\", \"NTP is installed but not running\"]\n        else:\n            output['NTP'] = [\"WARN\", \"NTP is not installed or not in PATH enviroment\"]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_java_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_java_version(output):\n    if 'JAVA_HOME' in os.environ:\n        java = os.path.join(os.environ['JAVA_HOME'], 'bin', 'java')\n        jar = os.path.join(os.environ['JAVA_HOME'], 'bin', 'jar')\n    else:\n        java = utility.find_in_path('java')\n        jar = utility.find_in_path('jar')\n    if not java:\n        utility.abort('Could not find java in environment, set JAVA_HOME or put java in the path.')\n    javaVersion = utility.get_java_version(javaHome=java, verbose=True).decode(\"utf-8\")",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_python_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_python_version(output):\n    pythonVersion = \"Python \" + str(sys.version_info[0]) + '.' + str(sys.version_info[1]) + '.' + str(sys.version_info[2])\n    if sys.hexversion < 0x03060000:\n        for dir in os.environ['PATH'].split(':'):\n            # Hunt for some python 3.x (but not too far into future versions), though if\n            # we're running from 'voltdb check' we are already running under python 3.\n            for n in range(6, 12):\n                name = 'python3.%d' % n\n                path = os.path.join(dir, name)\n                if os.path.exists(path):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_username",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_username(output):\n    if os.geteuid()==0:\n        output['RootUser'] = [\"WARN\", \"Running the VoltDB server software from the system root account is not recommended\"]\n    else:\n        output['RootUser'] = [\"PASS\", \"Not running as root\"]\ndef test_thp_config(output):\n    thpError = _check_thp_config()\n    if thpError is not None:\n        output['TransparentHugePage'] = [\"FAIL\", thpError]\n    else:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_thp_config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_thp_config(output):\n    thpError = _check_thp_config()\n    if thpError is not None:\n        output['TransparentHugePage'] = [\"FAIL\", thpError]\n    else:\n        output['TransparentHugePage'] = [\"PASS\", \"Transparent huge pages not set to always\"]\ndef test_swap(output):\n    swaponFiles = subprocess.Popen(\"cat /proc/swaps\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").split('\\n')[1:-1]\n    if len(swaponFiles) > 0:\n        swaponList = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_swap",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_swap(output):\n    swaponFiles = subprocess.Popen(\"cat /proc/swaps\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").split('\\n')[1:-1]\n    if len(swaponFiles) > 0:\n        swaponList = []\n        for x in swaponFiles:\n            l = x.split()\n            if len(l) != 0:\n                swaponList.append(l[0])\n        output['Swapoff'] = [\"WARN\", \"Swap is enabled for the filenames: \" + ' '.join(swaponList)]\n    else:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_swappinness",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_swappinness(output):\n    swappiness = subprocess.Popen(\"cat /proc/sys/vm/swappiness\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    output['Swappiness'] = [\"PASS\" if int(swappiness) == 0 else \"WARN\", \"Swappiness is set to \" + swappiness]\ndef test_vm_overcommit(output):\n    oc = subprocess.Popen(\"cat /proc/sys/vm/overcommit_memory\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    if int(oc) == 1:\n        output['MemoryOvercommit'] = [\"PASS\", \"Virtual memory overcommit is enabled\"]\n    else:\n        output['MemoryOvercommit'] = [\"WARN\", \"Virtual memory overcommit is disabled\"]\ndef test_segmentation_offload(output):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_vm_overcommit",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_vm_overcommit(output):\n    oc = subprocess.Popen(\"cat /proc/sys/vm/overcommit_memory\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").rstrip('\\n')\n    if int(oc) == 1:\n        output['MemoryOvercommit'] = [\"PASS\", \"Virtual memory overcommit is enabled\"]\n    else:\n        output['MemoryOvercommit'] = [\"WARN\", \"Virtual memory overcommit is disabled\"]\ndef test_segmentation_offload(output):\n    devInfoList = _check_segmentation_offload()\n    if devInfoList is None:\n        return",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_segmentation_offload",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_segmentation_offload(output):\n    devInfoList = _check_segmentation_offload()\n    if devInfoList is None:\n        return\n    for devInfo in devInfoList:\n        dev = devInfo[0]\n        if devInfo[1]:\n            output['TCPSegOffload_'+dev] = [\"PASS\", \"TCP segmentation offload for \" + dev + \" is disabled\"]\n        else:\n            output['TCPSegOffload_'+dev] = [\"WARN\", \"TCP segmentation offload is recommended to be disabled, but is currently enabled for \" + dev]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_tcp_retries2",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_tcp_retries2(output):\n    tcpretries2=subprocess.Popen(\"sysctl  net.ipv4.tcp_retries2 | cut -d'=' -f2\", stdout=subprocess.PIPE, shell=True).stdout.read().decode(\"utf-8\").strip()\n    if int(tcpretries2) >= 8:\n        output['TCP Retries2'] = [\"PASS\", \"net.ipv4.tcp_retries2 is set to \" + tcpretries2]\n    else:\n        output['TCP Retries2'] = [\"WARN\", \"net.ipv4.tcp_retries2 is recommended to be 8 or higher, but is currently set to \" + tcpretries2]\ndef test_full_config(output):\n    \"\"\" Runs a full set of configuration tests and writes the results to output\n    \"\"\"\n    test_os_release(output)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_full_config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_full_config(output):\n    \"\"\" Runs a full set of configuration tests and writes the results to output\n    \"\"\"\n    test_os_release(output)\n    test_64bit_os(output)\n    test_ntp(output)\n    test_java_version(output)\n    test_python_version(output)\n    test_username(output)\n    if platform.system() == \"Linux\":",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "test_hard_requirements",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "def test_hard_requirements():\n    \"\"\" Returns any errors resulting from hard config requirement violations\n    \"\"\"\n    output = {}\n    for k in hardRequirements:\n        hardRequirements[k](output)\n    return output\n# (Moved to end since Python does not handle forward reference.)\n# Define HardRequirements (full name : checker method)\n# and possible SkippableleRequirements(fullname:init)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "hardRequirements",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "hardRequirements = {\n        'TransparentHugePage' : test_thp_config,\n        \"Java\" : test_java_version,\n        \"OS Release\" : test_os_release,\n}\nskippableRequirements = {'TransparentHugePage':'thp'}",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "skippableRequirements",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "peekOfCode": "skippableRequirements = {'TransparentHugePage':'thp'}",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkconfig",
        "documentation": {}
    },
    {
        "label": "StatisticsProcedureException",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "class StatisticsProcedureException(Exception):\n    def __init__(self, message, exitCode, isTimeout=True):\n       self.message = message\n       self.exitCode = exitCode\n       self.isTimeout = isTimeout",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_exporter",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_exporter(runner):\n    runner.info('Completing outstanding exporter transactions...')\n    last_table_stat_time = 0\n    export_tables_with_data = dict()\n    last_table_stat_time = check_export_stats(runner, export_tables_with_data, last_table_stat_time)\n    if last_table_stat_time == 1:\n        # there are no outstanding export transactions\n        runner.info('All exporter transactions have been processed.')\n        return\n    # after 10 seconds notify admin of what transactions have not drained",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_dr_producer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_dr_producer(runner):\n    runner.info('Completing outstanding DR producer transactions...')\n    partition_min_host = dict()\n    partition_min = dict()\n    partition_max = dict()\n    partition_gap_min = dict()\n    last_partition_min = dict()\n    last_partition_max = dict()\n    lastUpdatedTime = time.time()\n    dr_producer_stats(runner, partition_min_host, partition_min, partition_max, partition_gap_min)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "monitorDRProducerStatisticsProgress",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def monitorDRProducerStatisticsProgress(lastPartitionMin, lastPartitionMax, currentPartitionMin,\n                             currentPartitionMax, lastUpdatedTime, runner):\n    currentTime = time.time()\n    timeout = runner.opts.timeout\n    # any stats progress?\n    partitionMinProgressed = (lastPartitionMin != currentPartitionMin)\n    partitionMaxProgressed = (lastPartitionMax != currentPartitionMax)\n    # stats moved\n    if partitionMinProgressed or partitionMaxProgressed:\n        return currentTime",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def get_stats(runner, component):\n    retry = 5\n    while retry > 0:\n        retry -= 1\n        resp = runner.call_proc('@Statistics', [voltdbclient.FastSerializer.VOLTTYPE_STRING,\n                                    voltdbclient.FastSerializer.VOLTTYPE_INTEGER], [component, 0], False)\n        status = resp.status()\n        if status == 1:\n            return resp\n        # procedure timeout, retry",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "dr_producer_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def dr_producer_stats(runner, partition_min_host, partition_min, partition_max, partition_gap_min):\n    resp = get_stats(runner, 'DRPRODUCER')\n    partition_data = resp.table(0)\n    for pid in partition_min:\n        # reset all min values to find the new min\n        if pid in partition_max:\n            partition_min[pid] = partition_max[pid]\n    if len(partition_data.tuples()) == 0:\n        return\n    for row in partition_data.tuples():",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "print_dr_pending",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def print_dr_pending(runner, partition_min_host, partition_min, partition_max, partition_gap_min):\n    runner.info('The following partitions have pending DR transactions that the consumer cluster has not processed:')\n    summarylineUnacked = \"    Partition %i needs acknowledgement for drIds %i to %i on hosts: %s.\"\n    summarylineGap = \"    Partition %i has a gap of %i missing drIds that exist on a host that is currently offline.\"\n    for pid in partition_min_host:\n        if pid in partition_gap_min and partition_gap_min[pid] > 0:\n            runner.info(summarylineGap % (pid, partition_gap_min[pid]))\n        else:\n            runner.info(summarylineUnacked % (pid, partition_min[pid] + 1, partition_max[pid], ', '.join(partition_min_host[pid])))\ndef check_export_stats(runner, export_tables_with_data, last_collection_time):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_export_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_export_stats(runner, export_tables_with_data, last_collection_time):\n    resp = get_stats(runner, 'EXPORT')\n    export_tables = 0\n    collection_time = 0\n    if not resp.table_count() > 0:\n        # this is an empty database and we don't need to wait for export to drain\n        export_tables_with_data.clear()\n        return 1\n    else:\n        tablestats = resp.table(0)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "print_export_pending",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def print_export_pending(runner, export_tables_with_data):\n    runner.info('\\tThe following export tables have unacknowledged transactions:')\n    summaryline = \"    %s needs acknowledgement on host %s for partition %s.\"\n    for table in export_tables_with_data:\n        pidlist = set()\n        hostlist = list(export_tables_with_data[table].keys())\n        for host in hostlist:\n            pidlist = pidlist | export_tables_with_data[table][host]\n        partlist = reduce(lambda a, x: a + \",\" + str(x), list(pidlist), \"\")[1:]\n        runner.info(summaryline % (table, ', '.join(hostlist), partlist))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_clients",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_clients(runner):\n     runner.info('Completing outstanding client transactions...')\n     lastUpdatedTime = time.time()\n     lastValidationParamms = [0, 0, 0]\n     notifyInterval = 10\n     while True:\n        resp = get_stats(runner, 'LIVECLIENTS')\n        trans = 0\n        bytes = 0\n        msgs = 0",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_importer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_importer(runner):\n     runner.info('Completing outstanding importer requests...')\n     lastUpdatedTime = time.time()\n     lastValidationParamms = [0]\n     notifyInterval = 10\n     while True:\n        resp = get_stats(runner, 'IMPORTER')\n        outstanding = 0\n        if len(resp.table(0).tuples()) == 0:\n            return",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_dr_consumer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_dr_consumer(runner):\n     runner.info('Completing outstanding DR consumer transactions...')\n     lastUpdatedTime = time.time()\n     lastValidationParamms = dict()\n     notifyInterval = 10\n     while True:\n        resp = get_stats(runner, 'DRCONSUMER')\n        outstanding = 0\n        if len(resp.table(1).tuples()) == 0:\n            return",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_no_dr_consumer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_no_dr_consumer(runner, forDrop=True):\n    runner.info('Checking dr consumers...')\n    last_node_dispatcher = []\n    last_updated_time = time.time()\n    notify_interval = 10\n    while True:\n        resp = get_stats(runner, 'DRCONSUMERNODE')\n        node_dispatcher = [row[1:6] for row in resp.table(0).tuples()]\n        if not node_dispatcher:\n            return True",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "print_dr_consumer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def print_dr_consumer(runner, node_dispatcher):\n    runner.info('The following dispatchers haven\\'t successfully received acknowledgment of reset:')\n    summaryline = \"    Dispatcher on host id % s for remote cluster %i.\"\n    for dispatcher in node_dispatcher:\n        runner.info(summaryline % (dispatcher[0], dispatcher[3]))\ndef check_command_log(runner):\n    runner.info('Completing outstanding Command Log transactions...')\n    lastUpdatedTime = time.time()\n    lastValidationParamms = [0, 0]\n    notifyInterval = 10",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_command_log",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_command_log(runner):\n    runner.info('Completing outstanding Command Log transactions...')\n    lastUpdatedTime = time.time()\n    lastValidationParamms = [0, 0]\n    notifyInterval = 10\n    while True:\n        resp = get_stats(runner, 'COMMANDLOG')\n        outstandingByte = 0\n        outstandingTxn = 0\n        if len(resp.table(0).tuples()) == 0:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "monitorStatisticsProgress",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def monitorStatisticsProgress(lastUpdatedParams, currentParams, lastUpdatedTime, runner, component, msg=\"The cluster has not drained any transactions for %s in last %d seconds. There are outstanding transactions.\"):\n    currentTime = time.time()\n    timeout = runner.opts.timeout\n    statsProgressed = (lastUpdatedParams != currentParams)\n    # stats progressed, update lastUpdatedTime\n    if statsProgressed:\n        return currentTime\n    # stats has not made any progress since last check\n    timeSinceLastUpdate = currentTime - lastUpdatedTime\n    # stats timeout",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_partition_leaders_on_host",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_partition_leaders_on_host(runner, hostid):\n    lastUpdatedTime = time.time()\n    notifyInterval = 10\n    lastValidationParamms = [sys.maxsize]\n    while True:\n        resp = get_stats(runner, 'TOPO')\n        if len(resp.table(0).tuples()) == 0:\n            return\n        # TOPO stats\n        # column 0: partition id",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "check_export_mastership_on_host",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "peekOfCode": "def check_export_mastership_on_host(runner, hostid):\n    lastUpdatedTime = time.time()\n    notifyInterval = 10\n    lastValidationParamms = [sys.maxsize]\n    while True:\n        resp = get_stats(runner, 'EXPORT')\n        if len(resp.table(0).tuples()) == 0:\n            return\n        # EXPORT stats\n        # column 1: host id",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.checkstats",
        "documentation": {}
    },
    {
        "label": "BaseOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class BaseOption(object):\n#===============================================================================\n    \"\"\"\n    General CLI option specification (uses optparse keywords for now).\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        self.short_opt = short_opt\n        self.long_opt  = long_opt\n        self.kwargs    = kwargs\n        self.kwargs['dest'] = dest",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "BooleanOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class BooleanOption(BaseOption):\n#===============================================================================\n    \"\"\"\n    Boolean CLI option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        BaseOption.__init__(self, short_opt, long_opt, dest, help_msg,\n                           action = 'store_true', **kwargs)\n#===============================================================================\nclass StringOption(BaseOption):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "StringOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class StringOption(BaseOption):\n#===============================================================================\n    \"\"\"\n    CLI string value option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        BaseOption.__init__(self, short_opt, long_opt, dest, help_msg, **kwargs)\n#===============================================================================\nclass IntegerOption(BaseOption):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "IntegerOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class IntegerOption(BaseOption):\n#===============================================================================\n    \"\"\"\n    Integer CLI option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        BaseOption.__init__(self, short_opt, long_opt, dest, help_msg, **kwargs)\n    def postprocess_value(self, value):\n        if type(value) is not int:\n            try:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "StringListOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class StringListOption(StringOption):\n#===============================================================================\n    \"\"\"\n    CLI comma-separated string list option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        StringOption.__init__(self, short_opt, long_opt, dest, help_msg, **kwargs)\n    def postprocess_value(self, value):\n        return [v.strip() for v in value.split(',')]\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "IntegerListOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class IntegerListOption(StringOption):\n#===============================================================================\n    \"\"\"\n    CLI comma-separated integer list option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_msg, **kwargs):\n        StringOption.__init__(self, short_opt, long_opt, dest, help_msg, **kwargs)\n    def postprocess_value(self, value):\n        bad = []\n        converted = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "EnumOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class EnumOption(StringOption):\n#===============================================================================\n    \"\"\"\n    Enumeration option for selecting from a list of possible symbols.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, help_pfx, *values, **kwargs):\n        if not values or len(values) <= 1:\n            utility.abort('EnumOption \"%s\" must specify multiple valid values.' % dest)\n        self.values = values\n        help_msg = '%s [%s]' % (help_pfx, '|'.join(self.values))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "HostOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class HostOption(StringOption):\n#===============================================================================\n    \"\"\"\n    Comma-separated HOST[:PORT] list option.\n    \"\"\"\n    def __init__(self, short_opt, long_opt, dest, name, **kwargs):\n        self.min_count    = utility.kwargs_get_integer(kwargs, 'min_count', default = 1)\n        self.max_count    = utility.kwargs_get_integer(kwargs, 'max_count', default = 1)\n        self.default_port = utility.kwargs_get_integer(kwargs, 'default_port', default = 21212)\n        if self.max_count == 1:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "ArgumentException",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class ArgumentException(Exception):\n#===============================================================================\n    pass\n#===============================================================================\nclass BaseArgument(object):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):\n        self.name      = name\n        self.help      = help\n        self.min_count = kwargs.get('min_count', 1)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "BaseArgument",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class BaseArgument(object):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):\n        self.name      = name\n        self.help      = help\n        self.min_count = kwargs.get('min_count', 1)\n        self.max_count = kwargs.get('max_count', 1)\n        self.optional = utility.kwargs_get_boolean(kwargs, 'optional', default=False)\n        # A max_count value of None is interpreted as infinity.\n        if self.max_count is None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "StringArgument",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class StringArgument(BaseArgument):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):\n        BaseArgument.__init__(self, name, help, **kwargs)\n    def get(self, value):\n        return str(value)\n#===============================================================================\nclass IntegerArgument(BaseArgument):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "IntegerArgument",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class IntegerArgument(BaseArgument):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):\n        BaseArgument.__init__(self, name, help, **kwargs)\n    def get(self, value):\n        try:\n            return int(value)\n        except ValueError as e:\n            raise ArgumentException('%s value is not a valid integer: %s'\n                                        % (self.name.upper(), str(value)))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "PathArgument",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class PathArgument(StringArgument):\n#===============================================================================\n    def __init__(self, name, help, **kwargs):\n        # For now the only intelligence is to check for absolute paths when required.\n        # TODO: Add options to check for directories, files, attributes, etc..\n        self.absolute = utility.kwargs_get_boolean(kwargs, 'absolute', default = False)\n        self.exists   = utility.kwargs_get_boolean(kwargs, 'exists', default = False)\n        requirements = []\n        help2 = ''\n        if self.absolute:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "ParsedCommand",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class ParsedCommand(object):\n#===============================================================================\n    \"\"\"\n    Holds the result of parsing a CLI command.\n    \"\"\"\n    def __init__(self, parser, opts, args, verb):\n        self.opts   = opts\n        self.args   = args\n        self.parser = parser\n        self.verb   = verb",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "ExtendedHelpOptionParser",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class ExtendedHelpOptionParser(optparse.OptionParser):\n#===============================================================================\n    '''\n    Extends OptionParser in order to support extended help.\n    '''\n    def __init__(self, *args, **kwargs):\n        self.format_epilog_called = False\n        optparse.OptionParser.__init__(self, *args, **kwargs)\n    def format_epilog(self, formatter):\n        \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "CLIParser",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class CLIParser(ExtendedHelpOptionParser):\n#===============================================================================\n    \"\"\"\n    Command/sub-command (verb) argument and option parsing and validation.\n    \"\"\"\n    def __init__(self, prog, verbs, base_options, usage, description, version):\n        \"\"\"\n        Command line processor constructor.\n        \"\"\"\n        self.prog         = prog",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "CLISpec",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "class CLISpec(object):\n#===============================================================================\n    def __init__(self, **kwargs):\n        self._kwargs = kwargs\n        # Make sure options and arguments are flat lists.\n        if 'options' in self._kwargs:\n            self._kwargs['options'] = utility.flatten_to_list(self._kwargs['options'])\n        else:\n            self._kwargs['options'] = []\n        if 'arguments' in self._kwargs:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "get_argument_usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "def get_argument_usage(a):\n#===============================================================================\n    if a.max_count > 1:\n        ellipsis = ' ...'\n    else:\n        ellipsis = ''\n    if a.min_count == 0:\n        fmt = '[ %s%s ]'\n    else:\n        fmt = '%s%s'",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "preprocess_options",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "peekOfCode": "def preprocess_options(base_options, cmdargs):\n#===============================================================================\n    \"\"\"\n    Simplistically parses command line options to allow early option checking.\n    Allows the parsing process to display debug messages.  Returns an object\n    with attributes set for option values.\n    \"\"\"\n    class OptionValues(object):\n        pass\n    option_values = OptionValues()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.cli",
        "documentation": {}
    },
    {
        "label": "Cluster",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "peekOfCode": "class Cluster(object):\n    def __init__(self, id, version, kfactor, hostcount, uptime):\n        self.id = id\n        self.version = version\n        self.kfactor = kfactor\n        self.hostcount = hostcount\n        self.hosts_by_id = dict()\n        self.remoteclusters_by_id = dict()\n        self.uptime = uptime\n        self.liveclients = 0",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "documentation": {}
    },
    {
        "label": "RemoteCluster",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "peekOfCode": "class RemoteCluster(object):\n    def __init__(self, cluster_id, status, role):\n        self.id = cluster_id\n        self.status = status\n        self.role = role\n        self.members = set()\n        self.producer_max_latency = dict()\n    def add_remote_member(self, host_name):\n        self.members.add(host_name)\n    def update_producer_latency(self, host_name, remote_cluster_id, delay):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.clusterinfo",
        "documentation": {}
    },
    {
        "label": "Daemon",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "peekOfCode": "class Daemon(object):\n    \"\"\"\n        A generic daemon class.\n        Usage: subclass the Daemon class and override the on_started() method\n    \"\"\"\n    ### Exceptions\n    class ExceptionBase(Exception):\n        def __init__(self, daemon, cause=None):\n            self.pid = daemon.pid\n            self.pidfile = daemon.pidfile",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "documentation": {}
    },
    {
        "label": "read_pid_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "peekOfCode": "def read_pid_file(pidfile):\n    \"\"\"\n    Read the PID file and return the PID or -1.\n    \"\"\"\n    pid = -1\n    if os.path.exists(pidfile):\n        try:\n            pf = open(pidfile,'r')\n            pid = int(pf.read().strip())\n            pf.close()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "documentation": {}
    },
    {
        "label": "get_status",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "peekOfCode": "def get_status(pidfile):\n    \"\"\"\n    Get the running PID and a boolean True if alive.\n    \"\"\"\n    pid = read_pid_file(pidfile)\n    alive = False\n    if pid != -1:\n        try:\n            os.kill(pid, 0)\n            alive = True",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.daemon",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "def initialize(standalone_arg, command_name_arg, command_dir_arg, version_arg):\n    \"\"\"\n    Set the VOLTDB_LIB and VOLTDB_VOLTDB environment variables based on the\n    script location and the working directory.\n    \"\"\"\n    global command_name, command_dir, version, pro_version\n    command_name = command_name_arg\n    command_dir = command_dir_arg\n    version = version_arg\n    # Stand-alone scripts don't need a develoopment environment.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "__author__ = 'scooper'\nimport sys\nimport os\nimport glob\nimport re\nimport shlex\nimport platform\nfrom voltcli import utility\nre_voltdb_jar = re.compile('^voltdb(client)?-[.0-9]+[.]([\\w]+\\.)*jar$')\nconfig_name = 'volt.cfg'",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "re_voltdb_jar",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "re_voltdb_jar = re.compile('^voltdb(client)?-[.0-9]+[.]([\\w]+\\.)*jar$')\nconfig_name = 'volt.cfg'\nconfig_name_local = 'volt_local.cfg'\n# This is for k8s environment which wish to provide external jars for jdbc driver and such.\nvoltdb_etc = '/etc/voltdb/'\n# Filled in during startup.\nstandalone   = None\nversion      = None\npro_version  = False\ncommand_dir  = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "config_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "config_name = 'volt.cfg'\nconfig_name_local = 'volt_local.cfg'\n# This is for k8s environment which wish to provide external jars for jdbc driver and such.\nvoltdb_etc = '/etc/voltdb/'\n# Filled in during startup.\nstandalone   = None\nversion      = None\npro_version  = False\ncommand_dir  = None\ncommand_name = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "config_name_local",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "config_name_local = 'volt_local.cfg'\n# This is for k8s environment which wish to provide external jars for jdbc driver and such.\nvoltdb_etc = '/etc/voltdb/'\n# Filled in during startup.\nstandalone   = None\nversion      = None\npro_version  = False\ncommand_dir  = None\ncommand_name = None\nvoltdb_jar   = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "voltdb_etc",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "voltdb_etc = '/etc/voltdb/'\n# Filled in during startup.\nstandalone   = None\nversion      = None\npro_version  = False\ncommand_dir  = None\ncommand_name = None\nvoltdb_jar   = None\nclasspath    = None\n# Location of third_party/python if available.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "command_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "command_name = None\nvoltdb_jar   = None\nclasspath    = None\n# Location of third_party/python if available.\nthird_party_python = None\n# Assume that we're in a subdirectory of the main volt Python library\n# directory.  Add the containing library directory to the Python module load\n# path so that verb modules can import any module here. E.g.:\n#   from voltcli import <module>...\nvolt_python = os.path.dirname(os.path.dirname(__file__))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "third_party_python",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "third_party_python = None\n# Assume that we're in a subdirectory of the main volt Python library\n# directory.  Add the containing library directory to the Python module load\n# path so that verb modules can import any module here. E.g.:\n#   from voltcli import <module>...\nvolt_python = os.path.dirname(os.path.dirname(__file__))\nif volt_python not in sys.path:\n    sys.path.insert(0, volt_python)\n# Java configuration\nif 'JAVA_HOME' in os.environ:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "volt_python",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "volt_python = os.path.dirname(os.path.dirname(__file__))\nif volt_python not in sys.path:\n    sys.path.insert(0, volt_python)\n# Java configuration\nif 'JAVA_HOME' in os.environ:\n    java = os.path.join(os.environ['JAVA_HOME'], 'bin', 'java')\n    jar = os.path.join(os.environ['JAVA_HOME'], 'bin', 'jar')\nelse:\n    java = utility.find_in_path('java')\n    jar = utility.find_in_path('jar')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "java_version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "java_version = utility.get_java_version(java)\njava_opts = []\n# Indicator we're running in something like kubernetes.\n# This should be set only by the container image.\nvoltdb_container = os.environ.get('VOLTDB_CONTAINER')\n# Should we commit the full heap on JVM startup?\n# 1. Obey explicit instruction from environment variable\n# 2. Otherwise only on non-container 'large memory' systems\nspecifyMinimumHeapSize = False\nif 'VOLTDB_HEAPCOMMIT' in os.environ:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "java_opts",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "java_opts = []\n# Indicator we're running in something like kubernetes.\n# This should be set only by the container image.\nvoltdb_container = os.environ.get('VOLTDB_CONTAINER')\n# Should we commit the full heap on JVM startup?\n# 1. Obey explicit instruction from environment variable\n# 2. Otherwise only on non-container 'large memory' systems\nspecifyMinimumHeapSize = False\nif 'VOLTDB_HEAPCOMMIT' in os.environ:\n    specifyMinimumHeapSize = os.environ['VOLTDB_HEAPCOMMIT'].lower() == 'true'",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "voltdb_container",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "voltdb_container = os.environ.get('VOLTDB_CONTAINER')\n# Should we commit the full heap on JVM startup?\n# 1. Obey explicit instruction from environment variable\n# 2. Otherwise only on non-container 'large memory' systems\nspecifyMinimumHeapSize = False\nif 'VOLTDB_HEAPCOMMIT' in os.environ:\n    specifyMinimumHeapSize = os.environ['VOLTDB_HEAPCOMMIT'].lower() == 'true'\nelif platform.system() == \"Linux\" and not voltdb_container:\n    memory = os.popen(\"free -m\")\n    try:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "specifyMinimumHeapSize",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "specifyMinimumHeapSize = False\nif 'VOLTDB_HEAPCOMMIT' in os.environ:\n    specifyMinimumHeapSize = os.environ['VOLTDB_HEAPCOMMIT'].lower() == 'true'\nelif platform.system() == \"Linux\" and not voltdb_container:\n    memory = os.popen(\"free -m\")\n    try:\n        totalMemory = int(memory.readlines()[1].split()[1])\n        specifyMinimumHeapSize = totalMemory > 1024 * 16\n    finally:\n        memory.close()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "tmpDir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "peekOfCode": "tmpDir = '/tmp'\nfor opt in [o for o in java_opts if o.startswith('-Djava.io.tmpdir=')]:\n    tmpDir = opt.split('=', 1)[1]\n# Set common options now.\njava_opts.append('-server')\njava_opts.append('-Djava.awt.headless=true')\njava_opts.append('-Djavax.security.auth.useSubjectCredsOnly=false')\njava_opts.append('-Dsun.net.inetaddr.ttl=300')\njava_opts.append('-Dsun.net.inetaddr.negative.ttl=3600')\njava_opts.append('-XX:+HeapDumpOnOutOfMemoryError')",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.environment",
        "documentation": {}
    },
    {
        "label": "Host",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "peekOfCode": "class Host(dict):\n    def __init__(self, id, abort_func):\n        self.id = id\n        self.abort_func = abort_func\n    # Provide pseudo-attributes for dictionary items with error checking\n    def __getattr__(self, name):\n        try:\n            return self[name]\n        except IndexError:\n            self.abort_func('Attribute \"%s\" not present for host.' % name)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "Hosts",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "peekOfCode": "class Hosts(object):\n    def __init__(self, abort_func):\n        self.hosts_by_id = {}\n        self.abort_func = abort_func\n    def update(self, host_id_raw, prop_name_raw, value_raw):\n        host_id = int(host_id_raw)\n        prop_name = prop_name_raw.lower()\n        value = value_raw\n        if prop_name.endswith('port'):\n            value = int(value)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.hostinfo",
        "documentation": {}
    },
    {
        "label": "JavaRunner",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "class JavaRunner(object):\n#===============================================================================\n    \"\"\"\n    Execute or compile Java programs.\n    \"\"\"\n    def __init__(self, verb, config, **kwargs):\n        self.verb = verb\n        self.config = config\n        self.kwargs = kwargs\n        self.classpath = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "VerbRunner",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "class VerbRunner(object):\n#===============================================================================\n    def __init__(self, command, verbspace, internal_verbspaces, config, **kwargs):\n        \"\"\"\n        VerbRunner constructor.\n        \"\"\"\n        # Unpack the command object for use by command implementations.\n        self.verb = command.verb\n        self.opts = command.opts\n        self.args = command.args",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "VOLT",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "class VOLT(object):\n#===============================================================================\n    \"\"\"\n    The VOLT namespace provided to dynamically loaded verb scripts.\n    \"\"\"\n    def __init__(self, verb_decorators):\n        # Add all verb_decorators methods not starting with '_' as members.\n        for name, function in inspect.getmembers(verb_decorators, inspect.ismethod):\n            if not name.startswith('_'):\n                setattr(self, name, function)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "VoltConfig",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "class VoltConfig(utility.PersistentConfig):\n#===============================================================================\n    \"\"\"\n    Volt-specific persistent configuration provides customized error messages.\n    \"\"\"\n    def __init__(self, permanent_path, local_path):\n        utility.PersistentConfig.__init__(self, 'INI', permanent_path, local_path)\n    def get_required(self, key):\n        value = self.get(key)\n        if value is None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "VoltCLIParser",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "class VoltCLIParser(cli.CLIParser):\n#===============================================================================\n    def __init__(self, verbspace):\n        \"\"\"\n        VoltCLIParser constructor.\n        \"\"\"\n        verstr = '%%prog version %s Enterprise Edition' % verbspace.version \\\n            if verbspace.pro_version else '%%prog version %s' % verbspace.version\n        cli.CLIParser.__init__(self, environment.command_name,\n                                     verbspace.verbs,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "load_verbspace",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "def load_verbspace(command_name, command_dir, config, version, description, package, pro_version):\n#===============================================================================\n    \"\"\"\n    Build a verb space by searching for source files with verbs in this source\n    file's directory, the calling script location (if provided), and the\n    working directory.\n    \"\"\"\n    utility.debug('Loading verbspace for \"%s\" version \"%s\" from \"%s\"...'\n                        % (command_name, version, command_dir))\n    scan_base_dirs = [os.path.dirname(__file__)]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "def run_command(verbspace, internal_verbspaces, config, *args, **kwargs):\n#===============================================================================\n    \"\"\"\n    Run a command after parsing the command line arguments provided.\n    \"\"\"\n    # Parse the command line.\n    parser = VoltCLIParser(verbspace)\n    command = parser.parse(*args)\n    \"\"\"\n    Read username/password from txt file",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "def main(command_name, command_dir, version, description, *args, **kwargs):\n#===============================================================================\n    \"\"\"\n    Called by running script to execute command with command line arguments.\n    \"\"\"\n    # The \"package\" keyword flags when running from a package zip __main__.py.\n    package = utility.kwargs_get_boolean(kwargs, 'package', default=False)\n    # The \"standalone\" keyword allows environment.py to skip the library search.\n    standalone = utility.kwargs_get_boolean(kwargs, 'standalone', default=False)\n    # The \"state_directory\" keyword overrides ~/.<command_name> as the",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "__author__ = 'scooper'\nimport sys\nimport os\nimport inspect\nimport getpass\nfrom voltdbclient import *\nfrom voltcli.verbs import *\nfrom voltcli import cli\nfrom voltcli import environment\nfrom voltcli import utility",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "base_cli_spec",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "base_cli_spec = cli.CLISpec(\n    description='''\\\nSpecific actions are provided by verbs.  Run \"%prog help VERB\" to display full\nusage for a verb, including its options and arguments.\n''',\n    usage='%prog VERB [ OPTIONS ... ] [ ARGUMENTS ... ]',\n    options=(\n        cli.BooleanOption(None, '--debug', 'debug', None),\n        cli.BooleanOption('-v', '--verbose', 'verbose',\n                          'display verbose messages and external commands'),",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "internal_commands",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "internal_commands = ['voltdb', 'voltadmin']\n# Written to the README file when the packaged executable is created.\ncompatibility_warning = '''\\\nThe program package in the bin directory requires Python version 3.6 or greater.\nIf Python 3.6+ is not the default version, then pass the full command line\nincluding the executable package path as arguments to an explicit Python version.\nFor example:\n      python3.6 bin/%(name)s VERB [ OPTIONS ... ] [ ARGUMENTS ... ]'''\n# README file template.\nreadme_template = '''",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "compatibility_warning",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "compatibility_warning = '''\\\nThe program package in the bin directory requires Python version 3.6 or greater.\nIf Python 3.6+ is not the default version, then pass the full command line\nincluding the executable package path as arguments to an explicit Python version.\nFor example:\n      python3.6 bin/%(name)s VERB [ OPTIONS ... ] [ ARGUMENTS ... ]'''\n# README file template.\nreadme_template = '''\n=== %(name)s README ===\n%(usage)s",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "readme_template",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "peekOfCode": "readme_template = '''\n=== %(name)s README ===\n%(usage)s\n-- WARNING --\n%(warning)s\n'''\n#===============================================================================\nclass JavaRunner(object):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.runner",
        "documentation": {}
    },
    {
        "label": "Global",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class Global:\n#===============================================================================\n    \"\"\"\n    Global data for utilities.\n    \"\"\"\n    verbose_enabled = False\n    debug_enabled   = False\n    dryrun_enabled  = False\n    manifest_path   = 'MANIFEST'\n    state_directory = ''",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "PythonSourceFinder",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class PythonSourceFinder(object):\n#===============================================================================\n    \"\"\"\n    Find and invoke python source files in a set of directories and resource\n    subdirectories (for searching in zip packages).  Execute all discovered\n    source files and pass in the symbols provided.\n    A typical usage relies on decorators to mark discoverable functions in user\n    code. The decorator is called when the source file is executed which serves\n    as an opportunity to keep track of discovered functions.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "Daemonizer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class Daemonizer(daemon.Daemon):\n#===============================================================================\n    \"\"\"\n    Class that supports daemonization (inherited from the daemon module). The\n    current process, i.e. the running Python script is completely replaced by\n    the executed program.\n    \"\"\"\n    def __init__(self, name, description, output=None):\n        \"\"\"\n        Constructor. The optional \"output\" keyword specifies an override to",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "Zipper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class Zipper(object):\n#===============================================================================\n    \"\"\"\n    The Zipper class creates a zip file using the directories, strings, and\n    exclusion regular expresions provided. It can also add a preamble and make\n    the resulting file executable in order to support making a self-executable\n    compressed Python program.\n    \"\"\"\n    def __init__(self, excludes = []):\n        self.output_file = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "File",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class File(object):\n#===============================================================================\n    \"\"\"\n    File reader/writer object that aborts on any error. Must explicitly call\n    close(). The main point is to standardize the error-handling.\n    \"\"\"\n    def __init__(self, path, mode = 'r', make_dirs=False):\n        if mode not in ('r', 'w'):\n            abort('Invalid file mode \"%s\".' % mode)\n        self.path      = path",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "FileGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class FileGenerator(object):\n#===============================================================================\n    \"\"\"\n    File generator.\n    \"\"\"\n    def __init__(self, resource_finder, **symbols):\n        \"\"\"\n        resource_finder must implement a find_resource(path) method.\n        \"\"\"\n        self.resource_finder = resource_finder",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "INIConfigManager",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class INIConfigManager(object):\n#===============================================================================\n    \"\"\"\n    Loads/saves INI format configuration to and from a dictionary.\n    \"\"\"\n    def load(self, path):\n        parser = configparser.SafeConfigParser()\n        parser.read(path)\n        d = dict()\n        for section in parser.sections():",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "PersistentConfig",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class PersistentConfig(object):\n#===============================================================================\n    \"\"\"\n    Persistent access to configuration data. Manages two configuration\n    files, one for permanent configuration and the other for local state.\n    \"\"\"\n    def __init__(self, format, path, local_path):\n        \"\"\"\n        Construct persistent configuration based on specified format name, path\n        to permanent config file, and path to local config file.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "VoltTupleWrapper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class VoltTupleWrapper(object):\n#===============================================================================\n    \"\"\"\n    Wraps a Volt tuple to add error handling, type safety, etc..\n    \"\"\"\n    def __init__(self, tuple):\n        self.tuple = tuple\n    def column_count(self, index):\n        return len(self.tuple)\n    def column(self, index):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "VoltTableWrapper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class VoltTableWrapper(object):\n#===============================================================================\n    \"\"\"\n    Wraps a voltdbclient.VoltTable to add error handling, type safety, etc..\n    \"\"\"\n    def __init__(self, table):\n        self.table = table\n    def tuple_count(self):\n        return len(self.table.tuples)\n    def tuple(self, index):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "VoltResponseWrapper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class VoltResponseWrapper(object):\n#===============================================================================\n    \"\"\"\n    Wraps a voltdbclient.VoltResponse to add error handling, type safety, etc..\n    \"\"\"\n    def __init__(self, response):\n        self.response = response\n    def status(self):\n        return self.response.status\n    def table_count(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "MessageDict",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class MessageDict(dict):\n#===============================================================================\n    \"\"\"\n    Message dictionary provides message numbers as attributes or the messages\n    by looking up that message number in the underlying dictionary.\n        messages.MY_MESSAGE == <integer index>\n        messages[messages.MY_MESSAGE] == <string>\n    \"\"\"\n    def __init__(self, **kwargs):\n        dict.__init__(self)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "CodeFormatter",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "class CodeFormatter(object):\n#===============================================================================\n    \"\"\"\n    Useful for formatting generated code. It is currently geared for DDL, but\n    this isn't etched in stone.\n    \"\"\"\n    def __init__(self, separator=',', vcomment_prefix='', indent_string='    '):\n        self.separator = separator\n        self.vcomment_prefix = vcomment_prefix\n        self.indent_string = indent_string",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "set_dryrun",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def set_dryrun(dryrun):\n#===============================================================================\n    \"\"\"\n    Enable or disable command dry run (display only/no execution).\n    \"\"\"\n    Global.dryrun_enabled = dryrun\n#===============================================================================\ndef set_verbose(verbose):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "set_verbose",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def set_verbose(verbose):\n#===============================================================================\n    \"\"\"\n    Enable or disable verbose messages. Increases the number of INFO messages.\n    \"\"\"\n    Global.verbose_enabled = verbose\n#===============================================================================\ndef set_debug(debug):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "set_debug",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def set_debug(debug):\n#===============================================================================\n    \"\"\"\n    Enable or disable DEBUG messages. Also enables verbose INFO messages.\n    \"\"\"\n    Global.debug_enabled = debug\n    if debug:\n        Global.verbose_enabled = True\n#===============================================================================\ndef set_state_directory(directory):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "set_state_directory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def set_state_directory(directory):\n#===============================================================================\n    if not os.path.exists(directory):\n        try:\n            os.makedirs(directory)\n        except (OSError, IOError) as e:\n            abort('Error creating state directory \"%s\".' % directory, e)\n    Global.state_directory = os.path.expandvars(os.path.expanduser(directory))\n#===============================================================================\ndef get_state_directory():",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "get_state_directory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def get_state_directory():\n#===============================================================================\n    \"\"\"\n    Return and create as needed a path for saving state.\n    \"\"\"\n    return Global.state_directory\n#===============================================================================\ndef is_dryrun():\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_dryrun",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_dryrun():\n#===============================================================================\n    \"\"\"\n    Return True if dry-run is enabled.\n    \"\"\"\n    return Global.dryrun_enabled\n#===============================================================================\ndef is_verbose():\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_verbose",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_verbose():\n#===============================================================================\n    \"\"\"\n    Return True if verbose messages are enabled.\n    \"\"\"\n    return Global.verbose_enabled\n#===============================================================================\ndef is_debug():\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_debug",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_debug():\n#===============================================================================\n    \"\"\"\n    Return True if debug messages are enabled.\n    \"\"\"\n    return Global.debug_enabled\n#===============================================================================\ndef get_state_directory():\n#===============================================================================\n    return Global.state_directory",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "get_state_directory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def get_state_directory():\n#===============================================================================\n    return Global.state_directory\n#===============================================================================\ndef display_messages(msgs, f = sys.stdout, tag = None, level = 0):\n#===============================================================================\n    \"\"\"\n    Low level message display.\n    \"\"\"\n    if tag:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "display_messages",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def display_messages(msgs, f = sys.stdout, tag = None, level = 0):\n#===============================================================================\n    \"\"\"\n    Low level message display.\n    \"\"\"\n    if tag:\n        stag = '%s: ' % tag\n    else:\n        stag = ''\n    # Special case to allow a string instead of an iterable.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def info(*msgs):\n#===============================================================================\n    \"\"\"\n    Display INFO level messages.\n    \"\"\"\n    display_messages(msgs, tag = 'INFO')\n#===============================================================================\ndef verbose_info(*msgs):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "verbose_info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def verbose_info(*msgs):\n#===============================================================================\n    \"\"\"\n    Display verbose INFO level messages if enabled.\n    \"\"\"\n    if Global.verbose_enabled:\n        display_messages(msgs, tag = 'INFO2')\n#===============================================================================\ndef debug(*msgs):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def debug(*msgs):\n#===============================================================================\n    \"\"\"\n    Display DEBUG level message(s) if debug is enabled.\n    \"\"\"\n    if Global.debug_enabled:\n        display_messages(msgs, tag = 'DEBUG')\n#===============================================================================\ndef warning(*msgs):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def warning(*msgs):\n#===============================================================================\n    \"\"\"\n    Display WARNING level messages.\n    \"\"\"\n    display_messages(msgs, tag = 'WARNING')\n#===============================================================================\ndef error(*msgs):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def error(*msgs):\n#===============================================================================\n    \"\"\"\n    Display ERROR level messages.\n    \"\"\"\n    display_messages(msgs, tag = 'ERROR')\n#===============================================================================\ndef abort(*msgs, **kwargs):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def abort(*msgs, **kwargs):\n#===============================================================================\n    \"\"\"\n    Display ERROR messages and then abort.\n    :Keywords:\n    return_code: integer result returned to the OS (default=1)\n    \"\"\"\n    keys = list(kwargs.keys())\n    bad_keywords = [k for k in list(kwargs.keys()) if k != 'return_code']\n    if bad_keywords:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "find_in_path",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def find_in_path(name):\n#===============================================================================\n    \"\"\"\n    Find program in the system path.\n    \"\"\"\n    # NB: non-portable\n    for dir in os.environ['PATH'].split(':'):\n        if os.path.exists(os.path.join(dir, name)):\n            return os.path.join(dir, name)\n    return None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "find_programs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def find_programs(*names):\n#===============================================================================\n    \"\"\"\n    Check for required programs in the path.\n    \"\"\"\n    missing = []\n    paths = {}\n    for name in names:\n        paths[name] = find_in_path(name)\n        if paths[name] is None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "normalize_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def normalize_list(items, width, filler = None):\n#===============================================================================\n    \"\"\"\n    Normalize list to a specified width, truncating or filling as needed.\n    Filler data can be supplied by caller. The filler will be copied to each\n    added item. None will be used as the filler if none is provided.\n    \"\"\"\n    assert items is not None\n    assert width >= 0\n    output = items[:width]",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "format_table",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def format_table(tuples, caption = None, headings = None, indent = 0, separator = ' '):\n#===============================================================================\n    \"\"\"\n    Format a table, i.e. tuple list, including an optional caption, optional\n    column headings, and rows of data cells. Aligns the headings and data\n    cells.  Headings and data rows must be iterable. Each data row must provide\n    iterable cells.  For now it only handles stringized data and right\n    alignment. Returns the table-formatted string.\n    \"\"\"\n    output = []",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "format_tables",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def format_tables(tuples_list, caption_list = None, heading_list = None, indent = 0):\n#===============================================================================\n    \"\"\"\n    Format multiple tables, i.e. a list of tuple lists. See format_table() for\n    more information.\n    \"\"\"\n    output = []\n    for i in range(len(tuples_list)):\n        if caption_list is None or i >= len(caption_list):\n            caption = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "format_volt_table",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def format_volt_table(table, caption = None, headings = True):\n#===============================================================================\n    \"\"\"\n    Format a VoltTable for display.\n    \"\"\"\n    rows = table.tuples\n    if headings:\n        heading_row = [c.name for c in table.columns]\n    else:\n        heading_row = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "format_volt_tables",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def format_volt_tables(table_list, caption_list = None, headings = True):\n#===============================================================================\n    \"\"\"\n    Format a list of VoltTable's for display.\n    \"\"\"\n    output = []\n    if table_list:\n        for i in range(len(table_list)):\n            if caption_list is None or i >= len(caption_list):\n                caption = None",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "quote_shell_arg",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def quote_shell_arg(arg):\n#===============================================================================\n    \"\"\"\n    Return an argument with quotes added as needed.\n    \"\"\"\n    sarg = str(arg)\n    if len(sarg) == 0 or len(sarg.split()) > 1:\n        return '\"%s\"' % sarg\n    return sarg\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "unquote_shell_arg",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def unquote_shell_arg(arg):\n#===============================================================================\n    \"\"\"\n    Return an argument with quotes removed if present.\n    \"\"\"\n    sarg = str(arg)\n    if len(sarg) == 0:\n        return sarg\n    quote_char = sarg[-1]\n    if quote_char not in ('\"', \"'\"):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "quote_shell_args",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def quote_shell_args(*args_in):\n#===============================================================================\n    \"\"\"\n    Return a list of arguments that are quoted as needed.\n    \"\"\"\n    return [quote_shell_arg(arg) for arg in args_in]\n#===============================================================================\ndef unquote_shell_args(*args_in):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "unquote_shell_args",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def unquote_shell_args(*args_in):\n#===============================================================================\n    \"\"\"\n    Return a list of arguments with quotes removed when present.\n    \"\"\"\n    return [unquote_shell_arg(arg) for arg in args_in]\n#===============================================================================\ndef join_shell_cmd(cmd, *args):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "join_shell_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def join_shell_cmd(cmd, *args):\n#===============================================================================\n    \"\"\"\n    Join shell command and arguments into one string.\n    Add quotes as appropriate.\n    \"\"\"\n    return ' '.join(quote_shell_args(cmd, *args))\n#===============================================================================\ndef run_cmd(cmd, *args):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def run_cmd(cmd, *args):\n#===============================================================================\n    \"\"\"\n    Run external program without capturing or suppressing output and check return code.\n    \"\"\"\n    fullcmd = join_shell_cmd(cmd, *args)\n    if Global.dryrun_enabled:\n        sys.stdout.write('Run: %s\\n' % fullcmd)\n    else:\n        if Global.verbose_enabled:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "exec_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def exec_cmd(cmd, *args):\n#===============================================================================\n    \"\"\"\n    Run external program by replacing the current (Python) process.\n    \"\"\"\n    display_cmd = join_shell_cmd(cmd, *args)\n    if Global.dryrun_enabled:\n        sys.stdout.write('Exec: %s\\n' % display_cmd)\n    else:\n        if Global.verbose_enabled:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "pipe_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def pipe_cmd(*args):\n#===============================================================================\n    \"\"\"\n    Run an external program, capture its output, and yield each output line for\n    iteration.\n    \"\"\"\n    try:\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        for line in iter(proc.stdout.readline, ''):\n            yield line.rstrip()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "daemon_file_name",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def daemon_file_name(base_name=None, host=None, instance=None):\n#===============================================================================\n    \"\"\"\n    Build a daemon output file name using optional base name, host, and instance.\n    \"\"\"\n    names = []\n    if not base_name is None:\n        names.append(base_name)\n    if not host is None:\n        names.append(host.replace(':', '_'))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_string",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_string(item):\n#===============================================================================\n    \"\"\"\n    Return True if the item behaves like a string.\n    \"\"\"\n    try:\n        test_string = item + ''\n        return True\n    except TypeError:\n        return False",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_sequence",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_sequence(item):\n#===============================================================================\n    \"\"\"\n    Return True if the item behaves like an iterable sequence.\n    \"\"\"\n    if is_string(item):\n        return False\n    try:\n        for var in item:\n            break",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "flatten",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def flatten(*items):\n#===============================================================================\n    \"\"\"\n    Flatten and yield individual items from a potentially nested list or tuple.\n    \"\"\"\n    for item in _flatten(items):\n        yield item\n#===============================================================================\ndef flatten_to_list(*items):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "flatten_to_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def flatten_to_list(*items):\n#===============================================================================\n    \"\"\"\n    Flatten a potentially nested list or tuple to a simple list.\n    \"\"\"\n    return [item for item in flatten(*items)]\n#===============================================================================\ndef to_display_string(item):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "to_display_string",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def to_display_string(item):\n#===============================================================================\n    \"\"\"\n    Recursively convert simple items and potentially nested sequences to a\n    string, using square brackets and commas to format sequences.\n    \"\"\"\n    if not is_sequence(item):\n        return str(item)\n    s = ''\n    for subitem in item:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "merge_java_options",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def merge_java_options(*opts):\n#===============================================================================\n    \"\"\"\n    Merge redundant -X... java command line options. Keep others intact.\n    Arguments can be lists or individual arguments. Returns the reduced list.\n    \"\"\"\n    ret_opts = []\n    xargs = set()\n    for opt in flatten(*opts):\n        if opt is not None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "get_java_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def get_java_version(javaHome=\"java\", verbose=False):\n#===============================================================================\n    \"\"\"\n    Assumes caller has already run \"find_in_path(java)\" so we know it can be checked.\n    \"\"\"\n    try:\n        version = subprocess.Popen([javaHome, '-version'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        grep = subprocess.Popen(['grep', 'java \\|openjdk'], stdin=version.stdout, stdout=subprocess.PIPE)\n        version.stdout.close()\n        out, err = grep.communicate()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "is_pro_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def is_pro_version(voltdb_jar):\n#===============================================================================\n    \"\"\"\n    Assumes caller has already run \"find_in_path(jar)\" so we know it can be checked.\n    The jar is already validated as present before this is called.\n    \"\"\"\n    try:\n        zf = zipfile.ZipFile(voltdb_jar, 'r')\n    except (IOError, OSError) as e:\n        print('Error reading zip file \"%s\".' % voltdb_jar, e)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_merge_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_merge_list(kwargs, name, *args):\n#===============================================================================\n    \"\"\"\n    Merge and flatten kwargs list with additional items.\n    \"\"\"\n    kwargs[name] = flatten_to_list(kwargs.get(name, None), *args)\n#===============================================================================\ndef kwargs_merge_java_options(kwargs, name, *args):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_merge_java_options",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_merge_java_options(kwargs, name, *args):\n#===============================================================================\n    \"\"\"\n    Merge and flatten kwargs Java options list with additional options.\n    \"\"\"\n    kwargs[name] = merge_java_options(kwargs.get(name, None), *args)\n#===============================================================================\ndef choose(prompt, *choices):\n#===============================================================================\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "choose",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def choose(prompt, *choices):\n#===============================================================================\n    \"\"\"\n    Prompt the user for multiple choice input. Keep prompting until a valid\n    choice is received. Choice shortcuts require unique first letters. The user\n    can either respond with a single letter or an entire word.\n    \"\"\"\n    letters = set()\n    choice_list = []\n    for choice in choices:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "dict_to_sorted_pairs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def dict_to_sorted_pairs(d):\n#===============================================================================\n    \"\"\"\n    Convert a dictionary to a list of key/value pairs sorted by key.\n    \"\"\"\n    keys = list(d.keys())\n    keys.sort()\n    results = []\n    for key in keys:\n        results.append((key, d[key]))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "pluralize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def pluralize(s, count):\n#===============================================================================\n    \"\"\"\n    Return word with 's' appended if the count > 1.\n    \"\"\"\n    if count > 1:\n        return '%ss' % s\n    return s\n#===============================================================================\ndef kwargs_extract(kwargs, defaults, remove = True, check_extras = False):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_extract",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_extract(kwargs, defaults, remove = True, check_extras = False):\n#===============================================================================\n    \"\"\"\n    Extract and optionally remove valid keyword arguments and convert to an\n    object with attributes.  The defaults argument specifies both the list of\n    valid keywords and their default values. Abort on any invalid keyword.\n    \"\"\"\n    class O(object):\n        pass\n    o = O()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_get",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_get(kwargs, name, remove = True, default = None):\n#===============================================================================\n    defaults = {name: default}\n    args = kwargs_extract(kwargs, defaults, remove = remove, check_extras = False)\n    return getattr(args, name)\n#===============================================================================\ndef kwargs_get_string(kwargs, name, remove = True, default = None):\n#===============================================================================\n    value = kwargs_get(kwargs, name, remove = remove, default = default)\n    if value is not None:",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_get_string",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_get_string(kwargs, name, remove = True, default = None):\n#===============================================================================\n    value = kwargs_get(kwargs, name, remove = remove, default = default)\n    if value is not None:\n        value = str(value)\n    return value\n#===============================================================================\ndef kwargs_get_integer(kwargs, name, remove = True, default = None):\n#===============================================================================\n    value = kwargs_get(kwargs, name, remove = remove, default = default)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_get_integer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_get_integer(kwargs, name, remove = True, default = None):\n#===============================================================================\n    value = kwargs_get(kwargs, name, remove = remove, default = default)\n    if value is not None:\n        try:\n            value = int(value)\n        except (ValueError, TypeError):\n            abort('Keyword argument \"%s\" must be an integer: %s' % (name, str(value)))\n    return value\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_get_boolean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_get_boolean(kwargs, name, remove = True, default = None):\n#===============================================================================\n    value = kwargs_get(kwargs, name, remove = remove, default = default)\n    if value is None or value == True or value == False:\n        return value\n    abort('Keyword argument \"%s\" must be a boolean value: %s' % (name, str(value)))\n#===============================================================================\ndef kwargs_get_list(kwargs, name, remove = True, default = []):\n#===============================================================================\n    return flatten_to_list(kwargs_get(kwargs, name, remove = remove, default = default))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_get_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_get_list(kwargs, name, remove = True, default = []):\n#===============================================================================\n    return flatten_to_list(kwargs_get(kwargs, name, remove = remove, default = default))\n#===============================================================================\ndef kwargs_set_defaults(kwargs, **defaults):\n#===============================================================================\n    for name in defaults:\n        if name not in kwargs:\n            kwargs[name] = defaults[name]\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "kwargs_set_defaults",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def kwargs_set_defaults(kwargs, **defaults):\n#===============================================================================\n    for name in defaults:\n        if name not in kwargs:\n            kwargs[name] = defaults[name]\n#===============================================================================\ndef parse_hosts(host_string, min_hosts = None, max_hosts = None, default_port = None):\n#===============================================================================\n    \"\"\"\n    Split host string on commas, extract optional port for each and return list",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "parse_hosts",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def parse_hosts(host_string, min_hosts = None, max_hosts = None, default_port = None):\n#===============================================================================\n    \"\"\"\n    Split host string on commas, extract optional port for each and return list\n    of host objects. Check against minimum/maximum quantities if specified.\n    We attempt to classify strings as one of:\n       <ip4 address>  |  <ip4 address> : <port>\n       <ip6_address>  |  [<ip6 address>]  |  [<ip6 address>] : <port>\n       <host name>    |  <host name> : port\n    Brackets are required around IPv6 addresses; this is consistent with",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "paragraph",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "peekOfCode": "def paragraph(*lines):\n#===============================================================================\n    \"\"\"\n    Strip leading and trailing whitespace and wrap text into a paragraph block.\n    The arguments can include arbitrarily nested sequences.\n    \"\"\"\n    wlines = []\n    for line in flatten_to_list(lines):\n        wlines.extend(line.strip().split('\\n'))\n    return textwrap.fill('\\n'.join(wlines))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.utility",
        "documentation": {}
    },
    {
        "label": "BaseVerb",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class BaseVerb(object):\n#===============================================================================\n    \"\"\"\n    Base class for verb implementations. Used by the @Volt.Command decorator.\n    \"\"\"\n    def __init__(self, name, **kwargs):\n        self.name = name\n        self.classpath = utility.kwargs_get_string(kwargs, 'classpath', default = None)\n        self.cli_spec = cli.CLISpec(**kwargs)\n        self.dirty_opts = False",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "CommandVerb",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class CommandVerb(BaseVerb):\n#===============================================================================\n    \"\"\"\n    Verb that wraps a command function. Used by the @VOLT.Command decorator.\n    \"\"\"\n    def __init__(self, name, function, **kwargs):\n        BaseVerb.__init__(self, name, **kwargs)\n        self.function = function\n        self.bundles = utility.kwargs_get_list(kwargs, 'bundles')\n        # Allow the bundles to adjust options.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "HelpVerb",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class HelpVerb(CommandVerb):\n#===============================================================================\n    \"\"\"\n    Verb to provide standard help. Used by the @VOLT.Help decorator.\n    \"\"\"\n    def __init__(self, name, function, **kwargs):\n        CommandVerb.__init__(self, name, function, **kwargs)\n        self.set_defaults(description = 'Display general or verb-specific help.', baseverb = True)\n        self.add_options(\n            cli.BooleanOption('-a', '--all', 'all',",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "PackageVerb",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class PackageVerb(CommandVerb):\n#===============================================================================\n    \"\"\"\n    Verb to create a runnable Python package. Used by @VOLT.Package decorator.\n    \"\"\"\n    def __init__(self, name, function, **kwargs):\n        CommandVerb.__init__(self, name, function, **kwargs)\n        self.set_defaults(description  = 'Create a runnable Python program package.',\n                          baseverb     = True,\n                          hideverb     = True,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "Modifier",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class Modifier(object):\n#===============================================================================\n    \"\"\"\n    Class for declaring multi-command modifiers.\n    \"\"\"\n    def __init__(self, name, function, description, arg_name = ''):\n        self.name = name\n        self.description = description\n        self.function = function\n        self.arg_name = arg_name.upper()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "MultiVerb",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class MultiVerb(CommandVerb):\n#===============================================================================\n    \"\"\"\n    Verb to create multi-commands with modifiers and optional arguments.\n    \"\"\"\n    def __init__(self, name, function, **kwargs):\n        CommandVerb.__init__(self, name, function, **kwargs)\n        self.modifiers = utility.kwargs_get_list(kwargs, 'modifiers', default = [])\n        if not self.modifiers:\n            utility.abort('Multi-command \"%s\" must provide a \"modifiers\" list.' % self.name)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "VerbDecorators",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class VerbDecorators(object):\n#===============================================================================\n    \"\"\"\n    Provide decorators used by command implementations to declare commands.\n    NB: All decorators assume they are being called.  E.g. @VOLT.Command() is\n    valid, but @VOLT.Command is not, even though Python won't catch the latter\n    as a compile-time error.\n    \"\"\"\n    def __init__(self, verbs):\n        \"\"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "VerbSpace",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class VerbSpace(object):\n#===============================================================================\n    \"\"\"\n    Manages a collection of Verb objects that support a particular CLI interface.\n    \"\"\"\n    def __init__(self, name, version, description, VOLT, scan_dirs, verbs, pro_version):\n        self.name        = name\n        self.version     = version\n        self.pro_version       = pro_version\n        self.description = description.strip()",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "JavaBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class JavaBundle(object):\n#===============================================================================\n    \"\"\"\n    Verb that wraps a function that calls into a Java class. Used by\n    the @VOLT.Java decorator.\n    \"\"\"\n    def __init__(self, java_class):\n        self.java_class = java_class\n    def initialize(self, verb):\n        verb.add_options(",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "ServerBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class ServerBundle(JavaBundle):\n#===============================================================================\n    \"\"\"\n    Bundle class to run org.voltdb.VoltDB process.\n    As of V11.0, only used by 'voltdb start' command.\n    \"\"\"\n    def __init__(self, subcommand,\n                 safemode_available=False,\n                 supports_daemon=False,\n                 daemon_name=None,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "ConnectionBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class ConnectionBundle(object):\n#===============================================================================\n    \"\"\"\n    Bundle class to add host(s), port(s), user, and password connection\n    options. Use by assigning an instance to the \"bundles\" keyword inside a\n    decorator invocation.\n    \"\"\"\n    def __init__(self, default_port = None, min_count = 1, max_count = 1):\n        self.default_port = default_port\n        self.min_count    = min_count",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "BaseClientBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class BaseClientBundle(ConnectionBundle):\n#===============================================================================\n    \"\"\"\n    Bundle class to automatically create a client connection.  Use by\n    assigning an instance to the \"bundles\" keyword inside a decorator\n    invocation.\n    \"\"\"\n    def __init__(self, default_port):\n        ConnectionBundle.__init__(self, default_port = default_port, min_count = 1, max_count = 1)\n    def start(self, verb, runner):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "ClientBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class ClientBundle(BaseClientBundle):\n#===============================================================================\n    \"\"\"\n    Bundle class to automatically create an non-admin client connection.  Use\n    by assigning an instance to the \"bundles\" keyword inside a decorator\n    invocation.\n    \"\"\"\n    def __init__(self, **kwargs):\n        BaseClientBundle.__init__(self, 21212, **kwargs)\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "AdminBundle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "class AdminBundle(BaseClientBundle):\n#===============================================================================\n    \"\"\"\n    Bundle class to automatically create an admin client connection.  Use by\n    assigning an instance to the \"bundles\" keyword inside a decorator\n    invocation.\n    \"\"\"\n    def __init__(self, **kwargs):\n        BaseClientBundle.__init__(self, 21211, **kwargs)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "description": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "peekOfCode": "__author__ = 'scooper'\nimport sys\nimport voltdbclient\nfrom voltcli import cli\nfrom voltcli import environment\nfrom voltcli import utility\nfrom voltcli import checkconfig\n#===============================================================================\nclass BaseVerb(object):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.lib.python.voltcli.verbs",
        "documentation": {}
    },
    {
        "label": "VoltQueryClient",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.Query",
        "description": "github.com.voltdb.voltdb.lib.python.Query",
        "peekOfCode": "class VoltQueryClient(cmd.Cmd):\n    TYPES = {\"byte\": FastSerializer.VOLTTYPE_TINYINT,\n             \"short\": FastSerializer.VOLTTYPE_SMALLINT,\n             \"int\": FastSerializer.VOLTTYPE_INTEGER,\n             \"long\": FastSerializer.VOLTTYPE_BIGINT,\n             \"float\": FastSerializer.VOLTTYPE_FLOAT,\n             \"string\": FastSerializer.VOLTTYPE_STRING,\n             \"varbinary\": FastSerializer.VOLTTYPE_STRING,\n             \"date\": FastSerializer.VOLTTYPE_TIMESTAMP}\n    TRANSFORMERS = {FastSerializer.VOLTTYPE_TINYINT: eval,",
        "detail": "github.com.voltdb.voltdb.lib.python.Query",
        "documentation": {}
    },
    {
        "label": "help",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.Query",
        "description": "github.com.voltdb.voltdb.lib.python.Query",
        "peekOfCode": "def help(program_name):\n    print(program_name, \"hostname port [dump=filename] [command]\")\nif __name__ == \"__main__\":\n    # TODO Add SSL arguments to command line & its help\n    if len(sys.argv) < 3:\n        help(sys.argv[0])\n        exit(-1)\n    filename = None\n    if len(sys.argv) >= 4 and sys.argv[3].startswith(\"dump=\"):\n        filename = sys.argv[3].split(\"=\")[1]",
        "detail": "github.com.voltdb.voltdb.lib.python.Query",
        "documentation": {}
    },
    {
        "label": "VoltQueryClient",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "description": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "peekOfCode": "class VoltQueryClient(cmd.Cmd):\n    TYPES = {\"byte\": FastSerializer.VOLTTYPE_TINYINT,\n             \"short\": FastSerializer.VOLTTYPE_SMALLINT,\n             \"int\": FastSerializer.VOLTTYPE_INTEGER,\n             \"long\": FastSerializer.VOLTTYPE_BIGINT,\n             \"float\": FastSerializer.VOLTTYPE_FLOAT,\n             \"string\": FastSerializer.VOLTTYPE_STRING,\n             \"varbinary\": FastSerializer.VOLTTYPE_STRING,\n             \"date\": FastSerializer.VOLTTYPE_TIMESTAMP}\n    TRANSFORMERS = {FastSerializer.VOLTTYPE_TINYINT: eval,",
        "detail": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "documentation": {}
    },
    {
        "label": "help",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "description": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "peekOfCode": "def help(program_name):\n    print program_name, \"hostname port [dump=filename] [command]\"\nif __name__ == \"__main__\":\n    # TODO Add SSL arguments to command line & its help\n    if len(sys.argv) < 3:\n        help(sys.argv[0])\n        exit(-1)\n    filename = None\n    if len(sys.argv) >= 4 and sys.argv[3].startswith(\"dump=\"):\n        filename = sys.argv[3].split(\"=\")[1]",
        "detail": "github.com.voltdb.voltdb.lib.python.QueryPy2",
        "documentation": {}
    },
    {
        "label": "ReadBuffer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class ReadBuffer(object):\n    \"\"\"\n    Read buffer management class.\n    \"\"\"\n    def __init__(self):\n        self.clear()\n    def clear(self):\n        self._buf = bytes()\n        self._off = 0\n    def buffer_length(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "FastSerializer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class FastSerializer:\n    \"Primitive type de/serialization in VoltDB formats\"\n    LITTLE_ENDIAN = '<'\n    BIG_ENDIAN = '>'\n    ARRAY = -99\n    # VoltType enumerations\n    VOLTTYPE_NULL = 1\n    VOLTTYPE_TINYINT = 3  # int8\n    VOLTTYPE_SMALLINT = 4 # int16\n    VOLTTYPE_INTEGER = 5  # int32",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "XYZPoint",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class XYZPoint(object):\n    \"\"\"\n    Google's S2 geometry library uses (x, y, z) representation of polygon vertices,\n    But the interface we expose to users is (lat, lng).  This class is the\n    internal representation for vertices.\n    \"\"\"\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "Geography",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class Geography(object):\n    \"\"\"\n    S2-esque geography element representing a polygon for now\n    \"\"\"\n    EPSILON = 1.0e-12\n    NULL_COORD = 360.0\n    def __init__(self, loops=[]):\n        self.loops = loops\n    # Serialization format for polygons.\n    #",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "VoltColumn",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class VoltColumn:\n    \"definition of one VoltDB table column\"\n    def __init__(self, fser = None, type = None, name = None):\n        if fser != None:\n            self.type = fser.readByte()\n            self.name = None\n        elif type != None and name != None:\n            self.type = type\n            self.name = name\n    def __str__(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "VoltTable",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class VoltTable:\n    \"definition and content of one VoltDB table\"\n    def __init__(self, fser):\n        self.fser = fser\n        self.columns = []  # column definitions\n        self.tuples = []\n    def __str__(self):\n        result = \"\"\n        result += \"column count: %d\\n\" % (len(self.columns))\n        result += \"row count: %d\\n\" % (len(self.tuples))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "VoltException",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class VoltException:\n    # Volt SerializableException enumerations\n    VOLTEXCEPTION_NONE = 0\n    VOLTEXCEPTION_EEEXCEPTION = 1\n    VOLTEXCEPTION_SQLEXCEPTION = 2\n    VOLTEXCEPTION_CONSTRAINTFAILURE = 3\n    VOLTEXCEPTION_GENERIC = 4\n    def __init__(self, fser):\n        self.type = self.VOLTEXCEPTION_NONE\n        self.typestr = \"None\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "VoltResponse",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class VoltResponse:\n    \"VoltDB called procedure response (ClientResponse.java)\"\n    def __init__(self, fser):\n        self.fser = fser\n        self.version = -1\n        self.clientHandle = -1\n        self.status = -1\n        self.statusString = \"\"\n        self.appStatus = -1\n        self.appStatusString = \"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "VoltProcedure",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "class VoltProcedure:\n    \"VoltDB called procedure interface\"\n    def __init__(self, fser, name, paramtypes = []):\n        self.fser = fser             # FastSerializer object\n        self.name = name             # procedure class name\n        self.paramtypes = paramtypes # list of fser.WIRE_* values\n    def call(self, params = None, response = True, timeout = None):\n        self.fser.writeByte(0)  # version number\n        self.fser.writeString(self.name)\n        self.fser.writeInt64(1)            # client handle",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "use_logging",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def use_logging():\n    import logging\n    global logger\n    logger = logging.getLogger()\ndef error(text):\n    if logger:\n        logger.error(text)\n    else:\n        print(text)\ndecimal.getcontext().prec = 38",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def error(text):\n    if logger:\n        logger.error(text)\n    else:\n        print(text)\ndecimal.getcontext().prec = 38\ndef int16toBytes(val):\n    return [val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int32toBytes(val):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "int16toBytes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def int16toBytes(val):\n    return [val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int32toBytes(val):\n    return [val >> 24 & 0xff,\n            val >> 16 & 0xff,\n            val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int64toBytes(val):\n    return [val >> 56 & 0xff,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "int32toBytes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def int32toBytes(val):\n    return [val >> 24 & 0xff,\n            val >> 16 & 0xff,\n            val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int64toBytes(val):\n    return [val >> 56 & 0xff,\n            val >> 48 & 0xff,\n            val >> 40 & 0xff,\n            val >> 32 & 0xff,",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "int64toBytes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def int64toBytes(val):\n    return [val >> 56 & 0xff,\n            val >> 48 & 0xff,\n            val >> 40 & 0xff,\n            val >> 32 & 0xff,\n            val >> 24 & 0xff,\n            val >> 16 & 0xff,\n            val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef isNaN(d):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "isNaN",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "def isNaN(d):\n    # Per IEEE 754, 'NaN == NaN' must be false,\n    # so we cannot check for simple equality\n    if d == None:\n        return False\n    else: # routine misnamed, returns true for 'Inf' too\n        return math.isnan(d) or math.isinf(d)\nclass ReadBuffer(object):\n    \"\"\"\n    Read buffer management class.",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "logger = None\ndef use_logging():\n    import logging\n    global logger\n    logger = logging.getLogger()\ndef error(text):\n    if logger:\n        logger.error(text)\n    else:\n        print(text)",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "decimal.getcontext().prec",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "peekOfCode": "decimal.getcontext().prec = 38\ndef int16toBytes(val):\n    return [val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int32toBytes(val):\n    return [val >> 24 & 0xff,\n            val >> 16 & 0xff,\n            val >>  8 & 0xff,\n            val >>  0 & 0xff]\ndef int64toBytes(val):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclient",
        "documentation": {}
    },
    {
        "label": "ReadBuffer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class ReadBuffer(object):\n    \"\"\"\n    Read buffer management class.\n    \"\"\"\n    def __init__(self):\n        self.clear()\n    def clear(self):\n        self._buf = \"\"\n        self._off = 0\n    def buffer_length(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "FastSerializer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class FastSerializer:\n    \"Primitive type de/serialization in VoltDB formats\"\n    LITTLE_ENDIAN = '<'\n    BIG_ENDIAN = '>'\n    ARRAY = -99\n    # VoltType enumerations\n    VOLTTYPE_NULL = 1\n    VOLTTYPE_TINYINT = 3  # int8\n    VOLTTYPE_SMALLINT = 4 # int16\n    VOLTTYPE_INTEGER = 5  # int32",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltColumn",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class VoltColumn:\n    \"definition of one VoltDB table column\"\n    def __init__(self, fser = None, type = None, name = None):\n        if fser != None:\n            self.type = fser.readByte()\n            self.name = None\n        elif type != None and name != None:\n            self.type = type\n            self.name = name\n    def __str__(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltTable",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class VoltTable:\n    \"definition and content of one VoltDB table\"\n    def __init__(self, fser):\n        self.fser = fser\n        self.columns = []  # column definitions\n        self.tuples = []\n    def __str__(self):\n        result = \"\"\n        result += \"column count: %d\\n\" % (len(self.columns))\n        result += \"row count: %d\\n\" % (len(self.tuples))",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltException",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class VoltException:\n    # Volt SerializableException enumerations\n    VOLTEXCEPTION_NONE = 0\n    VOLTEXCEPTION_EEEXCEPTION = 1\n    VOLTEXCEPTION_SQLEXCEPTION = 2\n    VOLTEXCEPTION_CONSTRAINTFAILURE = 3\n    VOLTEXCEPTION_GENERIC = 4\n    def __init__(self, fser):\n        self.type = self.VOLTEXCEPTION_NONE\n        self.typestr = \"None\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltResponse",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class VoltResponse:\n    \"VoltDB called procedure response (ClientResponse.java)\"\n    def __init__(self, fser):\n        self.fser = fser\n        self.version = -1\n        self.clientHandle = -1\n        self.status = -1\n        self.statusString = \"\"\n        self.appStatus = -1\n        self.appStatusString = \"\"",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "VoltProcedure",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "class VoltProcedure:\n    \"VoltDB called procedure interface\"\n    def __init__(self, fser, name, paramtypes = []):\n        self.fser = fser             # FastSerializer object\n        self.name = name             # procedure class name\n        self.paramtypes = paramtypes # list of fser.WIRE_* values\n    def call(self, params = None, response = True, timeout = None):\n        self.fser.writeByte(0)  # version number\n        self.fser.writeString(self.name)\n        self.fser.writeInt64(1)            # client handle",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "isNaN",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "def isNaN(d):\n    \"\"\"Since Python has the weird behavior that a float('nan') is not equal to\n    itself, we have to test it by ourselves.\n    \"\"\"\n    if d == None:\n        return False\n    # work-around for Python 2.4\n    s = array.array(\"d\", [d])\n    return (s.tostring() == \"\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x7f\" or\n            s.tostring() == \"\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\xff\" or",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "if_else",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "def if_else(cond, a, b):\n    \"\"\"Work around Python 2.4\n    \"\"\"\n    if cond: return a\n    else: return b\nclass ReadBuffer(object):\n    \"\"\"\n    Read buffer management class.\n    \"\"\"\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "decimal.getcontext().prec",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "description": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "peekOfCode": "decimal.getcontext().prec = 38\ndef isNaN(d):\n    \"\"\"Since Python has the weird behavior that a float('nan') is not equal to\n    itself, we have to test it by ourselves.\n    \"\"\"\n    if d == None:\n        return False\n    # work-around for Python 2.4\n    s = array.array(\"d\", [d])\n    return (s.tostring() == \"\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x7f\" or",
        "detail": "github.com.voltdb.voltdb.lib.python.voltdbclientpy2",
        "documentation": {}
    },
    {
        "label": "prettify",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.lib.python.XMLUtils",
        "description": "github.com.voltdb.voltdb.lib.python.XMLUtils",
        "peekOfCode": "def prettify(elem):\n    \"\"\"Return a pretty-printed XML string for the Element.\n    \"\"\"\n    rough_string = ElementTree.tostring(elem, 'utf-8')\n    reparsed = minidom.parseString(rough_string)\n    return reparsed.toprettyxml(indent=\"  \")",
        "detail": "github.com.voltdb.voltdb.lib.python.XMLUtils",
        "documentation": {}
    },
    {
        "label": "Field",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "class Field:\n    def __init__(self, name, type, comment):\n        self.name = name\n        self.type = type\n        self.comment = comment\n    def has_comment(self):\n        return self.comment != None and len(self.comment) > 0\nclass CatalogDefn:\n    def __init__(self, name, fields, removedFields, comment, hasEE):\n        self.name = name",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "CatalogDefn",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "class CatalogDefn:\n    def __init__(self, name, fields, removedFields, comment, hasEE):\n        self.name = name\n        self.fields = fields\n        self.removedFields = removedFields\n        self.comment = comment\n        self.hasEE = hasEE\n    def has_comment(self):\n        return self.comment != None and len(self.comment) > 0\n# return values are lists of CatalogDefn",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "strip_comments",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "def strip_comments(text):\n    \"\"\"\n    Removes all the // and /**/ comments.\n    \"\"\"\n    return strip_comments_regex.sub( '', text )\nclass Field:\n    def __init__(self, name, type, comment):\n        self.name = name\n        self.type = type\n        self.comment = comment",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "def parse(text, debug):\n    retval = []\n    javaOnlyClasses = []\n    text = strip_comments(text)\n    text = text.split('\\n')\n    while len(text):\n        line = text.pop(0).strip().split(None, 3)\n        if len(line) == 0:\n            continue\n        beginStmt = line.pop(0)",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "strip_comments_regex",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "strip_comments_regex = compile( r'/\\*.*?\\*/|//.*?$', DOTALL | MULTILINE )\ndef strip_comments(text):\n    \"\"\"\n    Removes all the // and /**/ comments.\n    \"\"\"\n    return strip_comments_regex.sub( '', text )\nclass Field:\n    def __init__(self, name, type, comment):\n        self.name = name\n        self.type = type",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "#classes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "peekOfCode": "#classes = parse(testspec)",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.parser",
        "documentation": {}
    },
    {
        "label": "gpl_header",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "peekOfCode": "gpl_header = \\\n\"\"\"/* This file is part of VoltDB.\n * Copyright (C) 2008-2020 VoltDB Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "documentation": {}
    },
    {
        "label": "auto_gen_warning",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "peekOfCode": "auto_gen_warning = \\\n\"\"\"/* WARNING: THIS FILE IS AUTO-GENERATED\n            DO NOT MODIFY THIS SOURCE\n            ALL CHANGES MUST BE MADE IN THE CATALOG GENERATOR */\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.strings",
        "documentation": {}
    },
    {
        "label": "checkeq",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "peekOfCode": "def checkeq( a, b ):\n  if a != b:\n    raise Exception( 'test failed: %r != %r' % (a,b) )",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "documentation": {}
    },
    {
        "label": "testspec",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "peekOfCode": "testspec = \"\"\"\n  class Database {\n    /** test comment */\n    // more comments\n    Partition* partitions; // more comments\n    Table*     tables;\n    Program*   programs;\n    Procedure* procedures;\n  }\n  /*",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog_utils.testdata",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def writer( f ):\n    def write( *args ):\n        f.write( ' '.join( map( str, args ) ) + '\\n' )\n    return write\ndef interp(text, params = locals()):\n    t = Template(text)\n    #return t.safe_substitute(params)\n    return t.substitute(params)\n#\n# Java code generation.",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "interp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def interp(text, params = locals()):\n    t = Template(text)\n    #return t.safe_substitute(params)\n    return t.substitute(params)\n#\n# Java code generation.\n#\ndef javatypify( x ):\n    if x == 'string': return 'String'\n    elif x == 'int': return 'int'",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "javatypify",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def javatypify( x ):\n    if x == 'string': return 'String'\n    elif x == 'int': return 'int'\n    elif x == 'bool': return 'boolean'\n    elif x == 'byte': return 'byte'\n    elif x[-1] == '*': return 'CatalogMap<%s>' % x.rstrip('*')\n    elif x[-1] == '?': return x.rstrip('?')\n    else: raise Exception( 'bad type: ' + x )\ndef javaobjectify( x ):\n    if x == 'string': return 'String'",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "javaobjectify",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def javaobjectify( x ):\n    if x == 'string': return 'String'\n    elif x == 'int': return 'Integer'\n    elif x == 'bool': return 'Boolean'\n    elif x == 'byte': return 'Byte'\n    elif x[-1] == '*': return 'CatalogMap<%s>' % x.rstrip('*')\n    elif x[-1] == '?': return x.rstrip('?')\n    else: raise Exception( 'bad type: ' + x )\ndef genjava( classes, javaOnlyClasses, prepath, postpath, package ):\n    ##########",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "genjava",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def genjava( classes, javaOnlyClasses, prepath, postpath, package ):\n    ##########\n    # SETUP\n    ##########\n    pkgdir = package.replace('.', '/')\n    shutil.rmtree(postpath, ignore_errors=True)\n    os.makedirs(postpath)\n    javasrcs = os.listdir(prepath)\n    for javasrc in javasrcs:\n        shutil.copy(os.path.join(prepath, javasrc), postpath)",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "cpptypify",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def cpptypify( x ):\n    if x == 'string': return 'std::string'\n    elif x == 'int': return 'int32_t'\n    elif x == 'bool': return 'bool'\n    elif x == 'byte': return 'int8_t'\n    elif x[-1] == '*': return 'CatalogMap<%s>' % x.rstrip('*')\n    elif x[-1] == '?': return 'CatalogType*'\n    else: raise Exception( 'bad type: ' + x )\ndef gencpp( classes, javaOnlyClasses, prepath, postpath ):\n    ##########",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "gencpp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def gencpp( classes, javaOnlyClasses, prepath, postpath ):\n    ##########\n    # SETUP\n    ##########\n    shutil.rmtree(postpath, ignore_errors=True)\n    os.makedirs(postpath)\n    cppsrcs = os.listdir(prepath)\n    for cppsrc in cppsrcs:\n        shutil.copy(os.path.join(prepath, cppsrc), postpath)\n    ##########",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "def main():\n    global debug\n    specpath = \"spec.txt\"\n    javapkg = 'org.voltdb.catalog'\n    cpp_postpath = 'out/cppsrc'\n    cpp_prepath = 'in/cppsrc'\n    java_prepath = 'in/javasrc'\n    java_postpath = 'out/javasrc'\n    f =  file( specpath )\n    classes, javaOnlyClasses = parse( f.read(), debug )",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.catalog",
        "description": "github.com.voltdb.voltdb.src.catgen.catalog",
        "peekOfCode": "debug = False\n#\n# Main.\n#\ndef main():\n    global debug\n    specpath = \"spec.txt\"\n    javapkg = 'org.voltdb.catalog'\n    cpp_postpath = 'out/cppsrc'\n    cpp_prepath = 'in/cppsrc'",
        "detail": "github.com.voltdb.voltdb.src.catgen.catalog",
        "documentation": {}
    },
    {
        "label": "exit_status",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.install",
        "description": "github.com.voltdb.voltdb.src.catgen.install",
        "peekOfCode": "exit_status = os.system(\"diff -x .svn -x .fake -x .DS_Store out/cppsrc/ ../ee/catalog/\")\nif (exit_status != 0):\n    os.system(\"rm ../ee/catalog/*\")\n    os.system(\"cp out/cppsrc/* ../ee/catalog/\")\nexit_status = os.system(\"diff -x .svn -x gui  -x package.html -x .DS_Store out/javasrc/ ../frontend/org/voltdb/catalog/\")\nif (exit_status != 0):\n    os.system(\"rm ../frontend/org/voltdb/catalog/*.java\")\n    os.system(\"cp out/javasrc/* ../frontend/org/voltdb/catalog/\")",
        "detail": "github.com.voltdb.voltdb.src.catgen.install",
        "documentation": {}
    },
    {
        "label": "exit_status",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.catgen.install",
        "description": "github.com.voltdb.voltdb.src.catgen.install",
        "peekOfCode": "exit_status = os.system(\"diff -x .svn -x gui  -x package.html -x .DS_Store out/javasrc/ ../frontend/org/voltdb/catalog/\")\nif (exit_status != 0):\n    os.system(\"rm ../frontend/org/voltdb/catalog/*.java\")\n    os.system(\"cp out/javasrc/* ../frontend/org/voltdb/catalog/\")",
        "detail": "github.com.voltdb.voltdb.src.catgen.install",
        "documentation": {}
    },
    {
        "label": "gpl_header",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "description": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "peekOfCode": "gpl_header = \\\n\"\"\"/* This file is part of VoltDB.\n * Copyright (C) 2008-2020 VoltDB Inc.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,",
        "detail": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "documentation": {}
    },
    {
        "label": "auto_gen_warning",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "description": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "peekOfCode": "auto_gen_warning = \\\n\"\"\"/* WARNING: THIS FILE IS AUTO-GENERATED\n            DO NOT MODIFY THIS SOURCE\n            ALL CHANGES MUST BE MADE IN voltdb_logstrings.properties GENERATOR */\n\"\"\"\nf = file( \"LogKeys.java\", 'w' )\nf.truncate(0)\nf.seek(0)\nif not f:\n    raise OSError(\"Can't create file LogKeys.java for writing\")",
        "detail": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "description": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "peekOfCode": "f = file( \"LogKeys.java\", 'w' )\nf.truncate(0)\nf.seek(0)\nif not f:\n    raise OSError(\"Can't create file LogKeys.java for writing\")\nf.write(gpl_header )\nf.write(auto_gen_warning)\nf.write(\n\"\"\"/**\n * Keys for internationalized log strings in the voltdb_logstrings resource bundle",
        "detail": "github.com.voltdb.voltdb.src.frontend.org.voltdb.utils.generate_logkeys",
        "documentation": {}
    },
    {
        "label": "Results",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "class Results(object):\n    def __init__(self, runname):\n        self.runname = runname\n        self.snapshot_count = 0\n        self.snapshot_total_duration = 0.0\n        self.throughput = 0\n        self.latency = 0.0\n    def __str__(self):\n        if self.snapshot_count == 0:\n            duration = 0.0",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "format_name_value",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def format_name_value(label, value):\n    return '%22s: %s' % (label, str(value))\ndef format_heading(text):\n    return '===== %s =====' % text\nclass Results(object):\n    def __init__(self, runname):\n        self.runname = runname\n        self.snapshot_count = 0\n        self.snapshot_total_duration = 0.0\n        self.throughput = 0",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "format_heading",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def format_heading(text):\n    return '===== %s =====' % text\nclass Results(object):\n    def __init__(self, runname):\n        self.runname = runname\n        self.snapshot_count = 0\n        self.snapshot_total_duration = 0.0\n        self.throughput = 0\n        self.latency = 0.0\n    def __str__(self):",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "delta",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def delta(old, new):\n    try:\n        return (new - old) / float(old)\n    except ZeroDivisionError:\n        return 0.0\ndef delta_attr(res1, res2, name):\n    v1 = getattr(res1, name)\n    v2 = getattr(res2, name)\n    return delta(v1, v2)\ndef format_delta(value):",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "delta_attr",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def delta_attr(res1, res2, name):\n    v1 = getattr(res1, name)\n    v2 = getattr(res2, name)\n    return delta(v1, v2)\ndef format_delta(value):\n    return '%+0.2f%%' % (value * 100.0)\ndef analyze(outroot, runname):\n    outdir = '%(outroot)s/%(runname)s' % locals()\n    logfile = '%(outdir)s/volt.log' % locals()\n    runfile = '%(outdir)s/run.txt' % locals()",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "format_delta",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def format_delta(value):\n    return '%+0.2f%%' % (value * 100.0)\ndef analyze(outroot, runname):\n    outdir = '%(outroot)s/%(runname)s' % locals()\n    logfile = '%(outdir)s/volt.log' % locals()\n    runfile = '%(outdir)s/run.txt' % locals()\n    results = Results(runname)\n    f = open(logfile)\n    for line in f:\n        m = RE_SNAP.search(line)",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "analyze",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "def analyze(outroot, runname):\n    outdir = '%(outroot)s/%(runname)s' % locals()\n    logfile = '%(outdir)s/volt.log' % locals()\n    runfile = '%(outdir)s/run.txt' % locals()\n    results = Results(runname)\n    f = open(logfile)\n    for line in f:\n        m = RE_SNAP.search(line)\n        if m:\n            results.snapshot_count += 1",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "RE_SNAP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "RE_SNAP = re.compile('and took ([0-9.]+)')\nRE_THROUGHPUT = re.compile('Average throughput:\\s*([0-9,]+)')\nRE_LATENCY = re.compile('Average latency:\\s*([0-9.]+)')\ndef format_name_value(label, value):\n    return '%22s: %s' % (label, str(value))\ndef format_heading(text):\n    return '===== %s =====' % text\nclass Results(object):\n    def __init__(self, runname):\n        self.runname = runname",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "RE_THROUGHPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "RE_THROUGHPUT = re.compile('Average throughput:\\s*([0-9,]+)')\nRE_LATENCY = re.compile('Average latency:\\s*([0-9.]+)')\ndef format_name_value(label, value):\n    return '%22s: %s' % (label, str(value))\ndef format_heading(text):\n    return '===== %s =====' % text\nclass Results(object):\n    def __init__(self, runname):\n        self.runname = runname\n        self.snapshot_count = 0",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "RE_LATENCY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "description": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "peekOfCode": "RE_LATENCY = re.compile('Average latency:\\s*([0-9.]+)')\ndef format_name_value(label, value):\n    return '%22s: %s' % (label, str(value))\ndef format_heading(text):\n    return '===== %s =====' % text\nclass Results(object):\n    def __init__(self, runname):\n        self.runname = runname\n        self.snapshot_count = 0\n        self.snapshot_total_duration = 0.0",
        "detail": "github.com.voltdb.voltdb.tests.bench.snapshot-performance.analyze",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.bench.throughput.run",
        "description": "github.com.voltdb.voltdb.tests.bench.throughput.run",
        "peekOfCode": "def run(procs, threadsPerProc, workload):\n    results = []\n    totalThroughput = 0.0\n    output = Popen(['./throughput', str(procs), str(threadsPerProc), workload], stdout=PIPE).communicate()[0]\n    lines = output.split('\\n')\n    for line in lines:\n        if line.startswith('RESULT: '):\n            print line\n            line = line.split(' ')[1]\n            parts = line.split(',')",
        "detail": "github.com.voltdb.voltdb.tests.bench.throughput.run",
        "documentation": {}
    },
    {
        "label": "write",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "description": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "peekOfCode": "def write(x):\n    p.stdin.write(x)\nwrite(script)\nretcode = p.wait()\nsys.exit(retcode)",
        "detail": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "documentation": {}
    },
    {
        "label": "script",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "description": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "peekOfCode": "script = \"\"\"\n# setup commands:\n#   begin indexname indextypes schema\n# types:\n#   bint = big integer\n#   int = integer\n#   sint = small integer\n#   tint = tiny integer\n#   float = double (float)\n#   dec = decimal",
        "detail": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "description": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "peekOfCode": "p = Popen(cmd, shell=False, stdin=PIPE, close_fds=True)\ndef write(x):\n    p.stdin.write(x)\nwrite(script)\nretcode = p.wait()\nsys.exit(retcode)",
        "detail": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "documentation": {}
    },
    {
        "label": "retcode",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "description": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "peekOfCode": "retcode = p.wait()\nsys.exit(retcode)",
        "detail": "github.com.voltdb.voltdb.tests.ee.indexes.index_scripted_test",
        "documentation": {}
    },
    {
        "label": "JSONDecoder",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "class JSONDecoder(object):\n    \"\"\"\n    Simple JSON <http://json.org> decoder\n    Performs the following translations in decoding by default:\n    +---------------+-------------------+\n    | JSON          | Python            |\n    +===============+===================+\n    | object        | dict              |\n    +---------------+-------------------+\n    | array         | list              |",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "linecol",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def linecol(doc, pos):\n    lineno = doc.count('\\n', 0, pos) + 1\n    if lineno == 1:\n        colno = pos\n    else:\n        colno = pos - doc.rindex('\\n', 0, pos)\n    return lineno, colno\ndef errmsg(msg, doc, pos, end=None):\n    lineno, colno = linecol(doc, pos)\n    if end is None:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "errmsg",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def errmsg(msg, doc, pos, end=None):\n    lineno, colno = linecol(doc, pos)\n    if end is None:\n        return '%s: line %d column %d (char %d)' % (msg, lineno, colno, pos)\n    endlineno, endcolno = linecol(doc, end)\n    return '%s: line %d column %d - line %d column %d (char %d - %d)' % (\n        msg, lineno, colno, endlineno, endcolno, pos, end)\n_CONSTANTS = {\n    '-Infinity': NegInf,\n    'Infinity': PosInf,",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONConstant",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def JSONConstant(match, context, c=_CONSTANTS):\n    s = match.group(0)\n    fn = getattr(context, 'parse_constant', None)\n    if fn is None:\n        rval = c[s]\n    else:\n        rval = fn(s)\n    return rval, None\npattern('(-?Infinity|NaN|true|false|null)')(JSONConstant)\ndef JSONNumber(match, context):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONNumber",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def JSONNumber(match, context):\n    match = JSONNumber.regex.match(match.string, *match.span())\n    integer, frac, exp = match.groups()\n    if frac or exp:\n        fn = getattr(context, 'parse_float', None) or float\n        res = fn(integer + (frac or '') + (exp or ''))\n    else:\n        fn = getattr(context, 'parse_int', None) or int\n        res = fn(integer)\n    return res, None",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "py_scanstring",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):\n    if encoding is None:\n        encoding = DEFAULT_ENCODING\n    chunks = []\n    _append = chunks.append\n    begin = end - 1\n    while 1:\n        chunk = _m(s, end)\n        if chunk is None:\n            raise ValueError(",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONString",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def JSONString(match, context):\n    encoding = getattr(context, 'encoding', None)\n    strict = getattr(context, 'strict', True)\n    return scanstring(match.string, match.end(), encoding, strict)\npattern(r'\"')(JSONString)\nWHITESPACE = re.compile(r'\\s*', FLAGS)\ndef JSONObject(match, context, _w=WHITESPACE.match):\n    pairs = {}\n    s = match.string\n    end = _w(s, match.end()).end()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONObject",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def JSONObject(match, context, _w=WHITESPACE.match):\n    pairs = {}\n    s = match.string\n    end = _w(s, match.end()).end()\n    nextchar = s[end:end + 1]\n    # Trivial empty object\n    if nextchar == '}':\n        return pairs, end + 1\n    if nextchar != '\"':\n        raise ValueError(errmsg(\"Expecting property name\", s, end))",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONArray",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "def JSONArray(match, context, _w=WHITESPACE.match):\n    values = []\n    s = match.string\n    end = _w(s, match.end()).end()\n    # Look-ahead for trivial empty array\n    nextchar = s[end:end + 1]\n    if nextchar == ']':\n        return values, end + 1\n    iterscan = JSONScanner.iterscan\n    while True:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL\ndef _floatconstants():\n    import struct\n    import sys\n    _BYTES = '7FF80000000000007FF0000000000000'.decode('hex')\n    if sys.byteorder != 'big':\n        _BYTES = _BYTES[:8][::-1] + _BYTES[8:][::-1]\n    nan, inf = struct.unpack('dd', _BYTES)\n    return nan, inf, -inf\nNaN, PosInf, NegInf = _floatconstants()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "_CONSTANTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "_CONSTANTS = {\n    '-Infinity': NegInf,\n    'Infinity': PosInf,\n    'NaN': NaN,\n    'true': True,\n    'false': False,\n    'null': None,\n}\ndef JSONConstant(match, context, c=_CONSTANTS):\n    s = match.group(0)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "STRINGCHUNK",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "STRINGCHUNK = re.compile(r'(.*?)([\"\\\\\\x00-\\x1f])', FLAGS)\nBACKSLASH = {\n    '\"': u'\"', '\\\\': u'\\\\', '/': u'/',\n    'b': u'\\b', 'f': u'\\f', 'n': u'\\n', 'r': u'\\r', 't': u'\\t',\n}\nDEFAULT_ENCODING = \"utf-8\"\ndef py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):\n    if encoding is None:\n        encoding = DEFAULT_ENCODING\n    chunks = []",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "BACKSLASH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "BACKSLASH = {\n    '\"': u'\"', '\\\\': u'\\\\', '/': u'/',\n    'b': u'\\b', 'f': u'\\f', 'n': u'\\n', 'r': u'\\r', 't': u'\\t',\n}\nDEFAULT_ENCODING = \"utf-8\"\ndef py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):\n    if encoding is None:\n        encoding = DEFAULT_ENCODING\n    chunks = []\n    _append = chunks.append",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ENCODING",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "DEFAULT_ENCODING = \"utf-8\"\ndef py_scanstring(s, end, encoding=None, strict=True, _b=BACKSLASH, _m=STRINGCHUNK.match):\n    if encoding is None:\n        encoding = DEFAULT_ENCODING\n    chunks = []\n    _append = chunks.append\n    begin = end - 1\n    while 1:\n        chunk = _m(s, end)\n        if chunk is None:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "WHITESPACE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "WHITESPACE = re.compile(r'\\s*', FLAGS)\ndef JSONObject(match, context, _w=WHITESPACE.match):\n    pairs = {}\n    s = match.string\n    end = _w(s, match.end()).end()\n    nextchar = s[end:end + 1]\n    # Trivial empty object\n    if nextchar == '}':\n        return pairs, end + 1\n    if nextchar != '\"':",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "ANYTHING",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "ANYTHING = [\n    JSONObject,\n    JSONArray,\n    JSONString,\n    JSONConstant,\n    JSONNumber,\n]\nJSONScanner = Scanner(ANYTHING)\nclass JSONDecoder(object):\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONScanner",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "JSONScanner = Scanner(ANYTHING)\nclass JSONDecoder(object):\n    \"\"\"\n    Simple JSON <http://json.org> decoder\n    Performs the following translations in decoding by default:\n    +---------------+-------------------+\n    | JSON          | Python            |\n    +===============+===================+\n    | object        | dict              |\n    +---------------+-------------------+",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "peekOfCode": "__all__ = ['JSONDecoder']",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.decoder",
        "documentation": {}
    },
    {
        "label": "JSONEncoder",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "class JSONEncoder(object):\n    \"\"\"\n    Extensible JSON <http://json.org> encoder for Python data structures.\n    Supports the following objects and types by default:\n    +-------------------+---------------+\n    | Python            | JSON          |\n    +===================+===============+\n    | dict              | object        |\n    +-------------------+---------------+\n    | list, tuple       | array         |",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "floatstr",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "def floatstr(o, allow_nan=True):\n    # Check for specials.  Note that this type of test is processor- and/or\n    # platform-specific, so do tests which don't depend on the internals.\n    if o != o:\n        text = 'NaN'\n    elif o == INFINITY:\n        text = 'Infinity'\n    elif o == -INFINITY:\n        text = '-Infinity'\n    else:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "encode_basestring",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "def encode_basestring(s):\n    \"\"\"\n    Return a JSON representation of a Python string\n    \"\"\"\n    def replace(match):\n        return ESCAPE_DCT[match.group(0)]\n    return '\"' + ESCAPE.sub(replace, s) + '\"'\ndef py_encode_basestring_ascii(s):\n    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n        s = s.decode('utf-8')",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "py_encode_basestring_ascii",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "def py_encode_basestring_ascii(s):\n    if isinstance(s, str) and HAS_UTF8.search(s) is not None:\n        s = s.decode('utf-8')\n    def replace(match):\n        s = match.group(0)\n        try:\n            return ESCAPE_DCT[s]\n        except KeyError:\n            n = ord(s)\n            if n < 0x10000:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "ESCAPE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "ESCAPE = re.compile(r'[\\x00-\\x1f\\\\\"\\b\\f\\n\\r\\t]')\nESCAPE_ASCII = re.compile(r'([\\\\\"]|[^\\ -~])')\nHAS_UTF8 = re.compile(r'[\\x80-\\xff]')\nESCAPE_DCT = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "ESCAPE_ASCII",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "ESCAPE_ASCII = re.compile(r'([\\\\\"]|[^\\ -~])')\nHAS_UTF8 = re.compile(r'[\\x80-\\xff]')\nESCAPE_DCT = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "HAS_UTF8",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "HAS_UTF8 = re.compile(r'[\\x80-\\xff]')\nESCAPE_DCT = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n}",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "ESCAPE_DCT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "ESCAPE_DCT = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\t': '\\\\t',\n}\nfor i in range(0x20):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "INFINITY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "INFINITY = float('1e66666')\nFLOAT_REPR = repr\ndef floatstr(o, allow_nan=True):\n    # Check for specials.  Note that this type of test is processor- and/or\n    # platform-specific, so do tests which don't depend on the internals.\n    if o != o:\n        text = 'NaN'\n    elif o == INFINITY:\n        text = 'Infinity'\n    elif o == -INFINITY:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "FLOAT_REPR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "FLOAT_REPR = repr\ndef floatstr(o, allow_nan=True):\n    # Check for specials.  Note that this type of test is processor- and/or\n    # platform-specific, so do tests which don't depend on the internals.\n    if o != o:\n        text = 'NaN'\n    elif o == INFINITY:\n        text = 'Infinity'\n    elif o == -INFINITY:\n        text = '-Infinity'",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "peekOfCode": "__all__ = ['JSONEncoder']",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.encoder",
        "documentation": {}
    },
    {
        "label": "Scanner",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "peekOfCode": "class Scanner(object):\n    def __init__(self, lexicon, flags=FLAGS):\n        self.actions = [None]\n        # Combine phrases into a compound pattern\n        s = sre_parse.Pattern()\n        s.flags = flags\n        p = []\n        for idx, token in enumerate(lexicon):\n            phrase = token.pattern\n            try:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "pattern",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "peekOfCode": "def pattern(pattern, flags=FLAGS):\n    def decorator(fn):\n        fn.pattern = pattern\n        fn.regex = re.compile(pattern, flags)\n        return fn\n    return decorator",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "peekOfCode": "__all__ = ['Scanner', 'pattern']\nFLAGS = (VERBOSE | MULTILINE | DOTALL)\nclass Scanner(object):\n    def __init__(self, lexicon, flags=FLAGS):\n        self.actions = [None]\n        # Combine phrases into a compound pattern\n        s = sre_parse.Pattern()\n        s.flags = flags\n        p = []\n        for idx, token in enumerate(lexicon):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "FLAGS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "peekOfCode": "FLAGS = (VERBOSE | MULTILINE | DOTALL)\nclass Scanner(object):\n    def __init__(self, lexicon, flags=FLAGS):\n        self.actions = [None]\n        # Combine phrases into a compound pattern\n        s = sre_parse.Pattern()\n        s.flags = flags\n        p = []\n        for idx, token in enumerate(lexicon):\n            phrase = token.pattern",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.scanner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.simplejson.tool",
        "description": "github.com.voltdb.voltdb.tests.scripts.simplejson.tool",
        "peekOfCode": "def main():\n    import sys\n    if len(sys.argv) == 1:\n        infile = sys.stdin\n        outfile = sys.stdout\n    elif len(sys.argv) == 2:\n        infile = open(sys.argv[1], 'rb')\n        outfile = sys.stdout\n    elif len(sys.argv) == 3:\n        infile = open(sys.argv[1], 'rb')",
        "detail": "github.com.voltdb.voltdb.tests.scripts.simplejson.tool",
        "documentation": {}
    },
    {
        "label": "findSectionInFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def findSectionInFile(srce, start, end):\n    flag = 0\n    status = False\n    ins = open(srce, \"r\" )\n    str = \"\"\n    for line in ins:\n        if(flag == 0 and line.find(start) > -1):\n            flag = 1\n        if(flag == 1):\n            str += line",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "readFileIntoArray",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def readFileIntoArray(srce):\n    content = []\n    if(os.path.getsize(srce) > 0):\n        with open(srce) as f:\n            content = f.readlines()\n    return content\n# The release number can be optionally passed in from cmdline with -r switch\n# If it's ommitted at cmdline, then this function is called to get the release\n# number from 'version.txt'\ndef getReleaseNum():",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "getReleaseNum",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def getReleaseNum():\n    path = os.path.dirname(os.path.abspath(__file__))\n    root = path.replace(\"tests/scripts\", \"\")\n    verFile = root + \"version.txt\"\n    ver = readFileIntoArray(verFile)[0].rstrip()\n    return ver\n# Always create a fresh new subdir\ndef createAFreshDir(dir):\n    ret = 0\n    if os.path.exists(dir):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "createAFreshDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def createAFreshDir(dir):\n    ret = 0\n    if os.path.exists(dir):\n        shutil.rmtree(dir)\n    if not os.path.exists(dir):\n        os.makedirs(dir)\n    if not os.path.exists(dir):\n        ret = -1\n    return ret\n# To get a VoltDB tar ball file and untar it in a designated place",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "installVoltDB",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def installVoltDB(pkg, release):\n    info = {}\n    info[\"ok\"] = False\n    thispkg = pkgName[pkg] + '-' + release + \".\" + tail\n    srce = root + thispkg\n    dest = os.path.join('/tmp', thispkg)\n    cmd = \"wget \" + srce + \" -O \" + dest + \" 2>/dev/null\"\n    print sectionBreak\n    print \"Getting \" + srce\n    print \"to \" +dest",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "getEnterpriseLicense",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def getEnterpriseLicense(workDir, release):\n    print workDir\n    print release\n    url = root + \"license.xml\"\n    filename = os.path.join(workDir, \"voltdb-ent-\" + release, \"voltdb\",\"license.xml\")\n    urllib.urlretrieve(url,filename)\n    print \"Retrieved to \" + filename\n    return True\n# Sample key/val pairs for testSuiteList are:\n# key: voltcache,   val: /tmp/<user_name>_exp_test/voltdb-2.8.1/examples/voltcache",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "setTestSuite",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def setTestSuite(dname, suite):\n    testSuiteList = {}\n    for dirname, dirnames, filenames in os.walk(dname):\n        for subdirname in dirnames:\n            if subdirname in elem2Test.keys():\n                path = os.path.join(dirname, subdirname)\n                run_sh = path + \"/\" + elem2Test[subdirname]\n                if(os.access(run_sh, os.X_OK)):\n                    if(suite != \"all\"):\n                        if(path.find(suite) > -1):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "stopPS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def stopPS(ps):\n    print ps.returncode\n    if ps.returncode != None:\n        print \"Process %d exited early with return code %d\" % (ps.pid, ps.returncode)\n    print \"Going to kill this process: '%d'\" % ps.pid\n    ps.kill()\n# To return a voltDB client\ndef getQueryClient(timeout=60):\n    host = defaultHost\n    port = defaultPort",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "getQueryClient",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def getQueryClient(timeout=60):\n    host = defaultHost\n    port = defaultPort\n    client = None\n    endtime = time.time() + timeout\n    while (time.time() < endtime):\n        try:\n            client = VoltQueryClient(host, port)\n            client.set_quiet(True)\n            client.set_timeout(5.0) # 5 seconds",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "startService",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def startService(service, logS, logC):\n    cmd = service + \" > \" + logS + \" 2>&1\"\n    service_ps = subprocess.Popen(cmd, shell=True)\n    time.sleep(2)\n    client = getQueryClient()\n    if not client:\n        return None\n    cmd = service + \" client > \" + logC + \" 2>&1\"\n    ret = call(cmd, shell=True)\n    print \"returning results from service execution: '%s'\" % ret",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "stopService",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def stopService(ps, serviceHandle):\n    serviceHandle.onecmd(\"shutdown\")\n    ps.communicate()\n# To execute 'run.sh' and save the output in logS\n# To execute 'run.sh client' and save the output in logC\ndef execThisService(service, logS, logC):\n    cmd = service + \" > \" + logS + \" 2>&1\"\n    print \"   Server - Exec CMD: '%s'\" % cmd\n    service_ps = subprocess.Popen(cmd, shell=True)\n    client = getQueryClient(timeout=90)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "execThisService",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def execThisService(service, logS, logC):\n    cmd = service + \" > \" + logS + \" 2>&1\"\n    print \"   Server - Exec CMD: '%s'\" % cmd\n    service_ps = subprocess.Popen(cmd, shell=True)\n    client = getQueryClient(timeout=90)\n    service_ps.poll()\n    if service_ps.returncode or not client:\n        #TODO - write something in log\n        print \"   Server returned an error\"\n        stopPS(service_ps)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "assertVoltkv_Voltcache",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def assertVoltkv_Voltcache(mod, logC):\n    staticKeyStr = {\n\"Command Line Configuration\":1,\n\"Setup & Initialization\":1,\n\"Starting Benchmark\":1,\n\"KV Store Results\":1,\n\"Client Workload Statistics\":1,\n    }\n    dynamicKeyStr = {}\n    with open(logC) as f:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "assertVoter",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def assertVoter(mod, logC):\n    result = False\n    aStr = \"Voting Results\"\n    expected = \"The Winner is: Edwina Burnam\"\n    # The 'section' returned by findSectionInFile is not used here,\n    # However, this piece of info could be used by something else\n    # which calls findSectionInFile().\n    (result, section) = findSectionInFile(logC, aStr, expected)\n    if(result == False):\n        expected = \"ERROR: The Winner is NOT Edwina Burnam!\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "assertHelloWorld",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def assertHelloWorld(modulename, logC):\n    expected = \"Hola, Mundo!\"\n    buf = readFileIntoArray(logC)\n    for line in buf:\n        if(expected == line.rstrip()):\n            msg = expected\n            result = True\n            break\n    else:\n        msg = \"Expected '%s' for module '%s'. Actually returned: '%s'\" % (expected, modulename, actual)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "assertClient",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def assertClient(e, logC):\n    baselineD = origDir + \"/plannertester/baseline/\"\n    baselineF = baselineD + e + \"/client_output.txt\"\n#    print \"baselineD = '%s', baselineF = '%s'\" % (baselineD, baselineF)\n    ret = False\n    msg = None\n    if(os.path.exists(baselineF)):\n        ret = filecmp.cmp(baselineF, logC)\n        if(ret == True):\n            msg = \"The client output matches the baseline:\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "startTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def startTest(testSuiteList):\n    statusBySuite = {}\n    msgBySuite = {}\n    keyWordsBySuite = {}\n    msg = \"\"\n    result = False\n    # testSuiteList is a dictionary whose keys are test suite names, e.g. helloworld,\n    # voter, voltkv, & voltcache and the corresponding values are paths where the\n    # executable run.sh is in. Note that all run.sh can only be invoked as './run.sh\n    # by design.",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "create_rpt",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "def create_rpt(info, status, msg, keyStrings, elapsed, rptf):\n    testtime = \"%.2f\" % elapsed\n    testsuites = Element('testsuites', {'time':testtime})\n    for (mod, suiteNameDict) in status.iteritems():\n        testsuite = SubElement(testsuites, 'testsuite',\n                {'package':info[\"pkgname\"],'URL':info[\"srce\"],\n                 'hostname':hostname, 'name':pkgDict[mod]})\n        for (suitename, status4ThisSuite) in suiteNameDict.iteritems():\n            failureCnt = \"0\"\n            errCnt = \"0\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "hostname",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "hostname = socket.gethostname()\npkgName = {'comm': 'LINUX-voltdb',\n           'pro': 'LINUX-voltdb-ent'}\npkgDict = {'comm': 'Community',\n           'pro': 'Enterprise',\n           'all': \"Community, Pro\"}\nsuiteDict = {'helloworld': 'HelloWorld',\n             'voltcache': 'Voltcache',\n             'voltkv': 'Voltkv',\n             'voter': 'Voter',",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "pkgName",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "pkgName = {'comm': 'LINUX-voltdb',\n           'pro': 'LINUX-voltdb-ent'}\npkgDict = {'comm': 'Community',\n           'pro': 'Enterprise',\n           'all': \"Community, Pro\"}\nsuiteDict = {'helloworld': 'HelloWorld',\n             'voltcache': 'Voltcache',\n             'voltkv': 'Voltkv',\n             'voter': 'Voter',\n             'all': 'HelloWorld, Voter, Voltcache, Voltkv'}",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "pkgDict",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "pkgDict = {'comm': 'Community',\n           'pro': 'Enterprise',\n           'all': \"Community, Pro\"}\nsuiteDict = {'helloworld': 'HelloWorld',\n             'voltcache': 'Voltcache',\n             'voltkv': 'Voltkv',\n             'voter': 'Voter',\n             'all': 'HelloWorld, Voter, Voltcache, Voltkv'}\ntail = \"tar.gz\"\n# http://volt0/kits/candidate/LINUX-voltdb-2.8.1.tar.gz",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "suiteDict",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "suiteDict = {'helloworld': 'HelloWorld',\n             'voltcache': 'Voltcache',\n             'voltkv': 'Voltkv',\n             'voter': 'Voter',\n             'all': 'HelloWorld, Voter, Voltcache, Voltkv'}\ntail = \"tar.gz\"\n# http://volt0/kits/candidate/LINUX-voltdb-2.8.1.tar.gz\n# http://volt0/kits/candidate/LINUX-voltdb-ent-2.8.1.tar.gz\nroot = \"http://volt0/kits/branch/\"\ntestname = os.path.basename(os.path.abspath(__file__)).replace(\".py\", \"\")",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "tail",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "tail = \"tar.gz\"\n# http://volt0/kits/candidate/LINUX-voltdb-2.8.1.tar.gz\n# http://volt0/kits/candidate/LINUX-voltdb-ent-2.8.1.tar.gz\nroot = \"http://volt0/kits/branch/\"\ntestname = os.path.basename(os.path.abspath(__file__)).replace(\".py\", \"\")\nelem2Test = {'helloworld':'./run.sh', 'voltcache':'./run.sh', 'voltkv':'./run.sh', 'voter':'./run.sh'}\ndefaultHost = \"localhost\"\ndefaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "root = \"http://volt0/kits/branch/\"\ntestname = os.path.basename(os.path.abspath(__file__)).replace(\".py\", \"\")\nelem2Test = {'helloworld':'./run.sh', 'voltcache':'./run.sh', 'voltkv':'./run.sh', 'voter':'./run.sh'}\ndefaultHost = \"localhost\"\ndefaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion\n# of the output. A sample value would be like the one below:\n'''\n Voting Results",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "testname",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "testname = os.path.basename(os.path.abspath(__file__)).replace(\".py\", \"\")\nelem2Test = {'helloworld':'./run.sh', 'voltcache':'./run.sh', 'voltkv':'./run.sh', 'voter':'./run.sh'}\ndefaultHost = \"localhost\"\ndefaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion\n# of the output. A sample value would be like the one below:\n'''\n Voting Results\n --------------------------------------------------------------------------------",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "elem2Test",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "elem2Test = {'helloworld':'./run.sh', 'voltcache':'./run.sh', 'voltkv':'./run.sh', 'voter':'./run.sh'}\ndefaultHost = \"localhost\"\ndefaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion\n# of the output. A sample value would be like the one below:\n'''\n Voting Results\n --------------------------------------------------------------------------------\n A total of 8166781 votes were received...",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "defaultHost",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "defaultHost = \"localhost\"\ndefaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion\n# of the output. A sample value would be like the one below:\n'''\n Voting Results\n --------------------------------------------------------------------------------\n A total of 8166781 votes were received...\n  - 7,816,923 Accepted",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "defaultPort",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "peekOfCode": "defaultPort = 21212\nsectionBreak=\"=====================================================\"\n# To parse the output of './examples/voter/run.sh client' and get a specific portion\n# of the output. A sample value would be like the one below:\n'''\n Voting Results\n --------------------------------------------------------------------------------\n A total of 8166781 votes were received...\n  - 7,816,923 Accepted\n   -    79,031 Rejected (Invalid Contestant)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.exp_test",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "description": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "peekOfCode": "client = FastSerializer(\"localhost\", 21212)\nproc = VoltProcedure(client, \"@ProfCtl\", [FastSerializer.VOLTTYPE_STRING])\nresponse = proc.call([sys.argv[1]])\nfor x in response.tables:\n    print x",
        "detail": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "documentation": {}
    },
    {
        "label": "proc",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "description": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "peekOfCode": "proc = VoltProcedure(client, \"@ProfCtl\", [FastSerializer.VOLTTYPE_STRING])\nresponse = proc.call([sys.argv[1]])\nfor x in response.tables:\n    print x",
        "detail": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "description": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "peekOfCode": "response = proc.call([sys.argv[1]])\nfor x in response.tables:\n    print x",
        "detail": "github.com.voltdb.voltdb.tests.scripts.profctl",
        "documentation": {}
    },
    {
        "label": "ProcessFunc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "def ProcessFunc( countQueue, endTime):\n    client = FastSerializer(\"localhost\", 21212, \"\", \"\")\n    proc = VoltProcedure( client, \"measureOverhead\", [FastSerializer.VOLTTYPE_INTEGER] )\n    counter = 0;\n    while datetime.datetime.now() < endTime:\n        counter += 1\n        response = proc.call([counter])\n        if response.status != 1:\n            print response.statusString\n        now = datetime.datetime.now().microsecond / 1000",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "startTime",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "startTime = datetime.datetime.now()\nendTime = startTime + datetime.timedelta( 0, 60)\ncountQueue = Queue()\nprocs = []\nfor x in range(12):\n    p = Process( target=ProcessFunc, args=( countQueue, endTime ))\n    procs.append(p)\n    p.start()\nfor p in procs:\n    p.join()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "endTime",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "endTime = startTime + datetime.timedelta( 0, 60)\ncountQueue = Queue()\nprocs = []\nfor x in range(12):\n    p = Process( target=ProcessFunc, args=( countQueue, endTime ))\n    procs.append(p)\n    p.start()\nfor p in procs:\n    p.join()\nrequestCount = 0;",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "countQueue",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "countQueue = Queue()\nprocs = []\nfor x in range(12):\n    p = Process( target=ProcessFunc, args=( countQueue, endTime ))\n    procs.append(p)\n    p.start()\nfor p in procs:\n    p.join()\nrequestCount = 0;\ncount = None",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "procs",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "procs = []\nfor x in range(12):\n    p = Process( target=ProcessFunc, args=( countQueue, endTime ))\n    procs.append(p)\n    p.start()\nfor p in procs:\n    p.join()\nrequestCount = 0;\ncount = None\nwhile not countQueue.empty():",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "requestCount",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "requestCount = 0;\ncount = None\nwhile not countQueue.empty():\n    requestCount = requestCount + countQueue.get()\nduration = datetime.datetime.now() - startTime\nprint requestCount / duration.seconds",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "count = None\nwhile not countQueue.empty():\n    requestCount = requestCount + countQueue.get()\nduration = datetime.datetime.now() - startTime\nprint requestCount / duration.seconds",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "duration",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "description": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "peekOfCode": "duration = datetime.datetime.now() - startTime\nprint requestCount / duration.seconds",
        "detail": "github.com.voltdb.voltdb.tests.scripts.python_client_bench",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "peekOfCode": "class Result(object):\n    __slots__ = ('class_name', 'name', 'failure')\n    def __init__(self, class_name, name, failure):\n        assert len(class_name) > 0\n        self.class_name = class_name\n        assert len(name) > 0\n        self.name = name\n        assert failure is None or len(failure) > 0\n        self.failure = failure\ndef parseStupidUnit(json_data):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "documentation": {}
    },
    {
        "label": "parseStupidUnit",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "peekOfCode": "def parseStupidUnit(json_data):\n    \"\"\"Parses json_data from a stupidunit test suite into Result objects.\"\"\"\n    if len(json_data) == 0:\n        return []\n    if not json_data.endswith(\"]\\n\"):\n        if json_data.endswith(\",\\n\"):\n            json_data = json_data[:-2] + \"]\\n\"\n        else:\n            assert json_data == \"[\"\n            json_data = \"[]\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "documentation": {}
    },
    {
        "label": "lameXmlEscape",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "peekOfCode": "def lameXmlEscape(input):\n    input = input.replace('&', '&amp;')\n    return input.replace('<', '&lt;')\ndef writeJUnitXml(fileobj, suite_name, elapsed_time, stdout, stderr, results):\n    \"\"\"Writes a JUnit test report in XML format to fileobj from results.\"\"\"\n    timestamp = time.time()\n    iso_time = time.strftime(\"%Y-%m-%dT%H:%M:%S\", time.gmtime(timestamp))\n    tests = 0\n    failures = 0\n    for result in results:",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "documentation": {}
    },
    {
        "label": "writeJUnitXml",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "peekOfCode": "def writeJUnitXml(fileobj, suite_name, elapsed_time, stdout, stderr, results):\n    \"\"\"Writes a JUnit test report in XML format to fileobj from results.\"\"\"\n    timestamp = time.time()\n    iso_time = time.strftime(\"%Y-%m-%dT%H:%M:%S\", time.gmtime(timestamp))\n    tests = 0\n    failures = 0\n    for result in results:\n        if result.failure is not None:\n            failures += 1\n        tests += 1",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "documentation": {}
    },
    {
        "label": "runtests",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "peekOfCode": "def runtests(tests, output_dir):\n    stupidunit_out = None\n    if output_dir is not None:\n        # Create a temporary file for stupidunit output\n        fileobj, stupidunit_out = tempfile.mkstemp()\n        os.close(fileobj)\n        os.environ[\"STUPIDUNIT_OUTPUT\"] = stupidunit_out\n        os.unlink(stupidunit_out)\n    try:\n        failures = []",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit",
        "documentation": {}
    },
    {
        "label": "ParseStupidUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "peekOfCode": "class ParseStupidUnitTest(unittest.TestCase):\n    def testSimple(self):\n        output = \"\"\"[{ \"class_name\": \"MessageRegistryTest\", \"name\": \"BadAdd\" },\n{ \"class_name\": \"MessageRegistryTest\", \"name\": \"AddAlreadyRegistered\", \"failure\": \"foo\" }]\\n\"\"\"\n        results = runcppunit.parseStupidUnit(output)\n        self.assertEquals(2, len(results))\n        self.assertEquals(\"MessageRegistryTest\", results[0].class_name)\n        self.assertEquals(\"BadAdd\", results[0].name)\n        assert results[0].failure is None\n        self.assertEquals(\"MessageRegistryTest\", results[1].class_name)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "documentation": {}
    },
    {
        "label": "WriteJUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "peekOfCode": "class WriteJUnitTest(unittest.TestCase):\n    def testEmpty(self):\n        #~ results = [runcppunit.Result(\"Foo\", \"Bar\", True), runcppunit.Result(\"Foo\", \"Bar\", False)]\n        text = '<?xml version=\"1.0\"?><hello>world&bar</hello>'\n        out = cStringIO.StringIO()\n        runcppunit.writeJUnitXml(out, \"foo_test\", 0.5, text, text, [])\n        dom = xml.dom.minidom.parseString(out.getvalue())\n        self.assertEquals(dom.firstChild.getAttribute(\"name\"), \"foo_test\")\n        self.assertEquals(dom.firstChild.getAttribute(\"tests\"), \"0\")\n        self.assertEquals(dom.firstChild.getAttribute(\"failures\"), \"0\")",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "documentation": {}
    },
    {
        "label": "RunTestsTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "peekOfCode": "class RunTestsTest(unittest.TestCase):\n    def testNoStupidUnitSuccess(self):\n        exe = valleak_test.compile(self, \"int main() { return 0; }\\n\")\n        runcppunit.runtests([exe], self.tempdir.name)\n        output_name = self.tempdir.name + \"/TEST-\" + exe.replace(\"/\", \"_\") + \".xml\"\n        f = open(output_name)\n        data = f.read()\n        assert 'errors=\"0\"' in data\n        assert 'failures=\"0\"' in data\n        f.close()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.runcppunit_test",
        "documentation": {}
    },
    {
        "label": "Metadata",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "class Metadata:\n    def serializeVoltVerify(self, spacer):\n        return\n    def serializeVoltDescription(self, spacer):\n        return\nclass MetaDesc(Metadata):\n    def __init__(self, aDesc):\n        self.desc = aDesc\n    def serializeVoltDescription(self, spacer):\n        print spacer*2 + \"/* Description: \" + self.desc + \" */\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "MetaDesc",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "class MetaDesc(Metadata):\n    def __init__(self, aDesc):\n        self.desc = aDesc\n    def serializeVoltDescription(self, spacer):\n        print spacer*2 + \"/* Description: \" + self.desc + \" */\"\nclass MetaRows(Metadata):\n    def __init__(self, aRowcount):\n        self.rowcount = int(aRowcount)\n    def serializeVoltVerify(self, spacer):\n        print spacer*2 + \"RowCount = %s\" % self.rowcount",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "MetaRows",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "class MetaRows(Metadata):\n    def __init__(self, aRowcount):\n        self.rowcount = int(aRowcount)\n    def serializeVoltVerify(self, spacer):\n        print spacer*2 + \"RowCount = %s\" % self.rowcount\nclass MetaTable(Metadata):\n    def __init__(self, rows):\n        self.table = rows\n    def serializeVoltVerify(self, spacer):\n        print spacer*2 + \"TableVerfifier:\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "MetaTable",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "class MetaTable(Metadata):\n    def __init__(self, rows):\n        self.table = rows\n    def serializeVoltVerify(self, spacer):\n        print spacer*2 + \"TableVerfifier:\"\n        for x in self.table:\n            print x\nclass SQLStatement:\n    global_id = 0\n    def isReadOnly(self):",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "SQLStatement",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "class SQLStatement:\n    global_id = 0\n    def isReadOnly(self):\n        if (re.compile(\"(.*?)SELECT(.*)$\", re.I).match(self.statement) != None):\n            return True\n        return False\n    def isDDL(self):\n        if (re.compile(\"(.*?)CREATE(.*)$\", re.I).match(self.statement) != None):\n            return True\n        return False",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "readMultilineComment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def readMultilineComment(f):\n    commentText = \"\"\n    prevChar = None\n    char = f.read(1)\n    while char != \"\":\n        if prevChar == \"*\" and char == \"/\":\n            return commentText[:-1] + \"\\n\"\n        commentText = commentText + char\n        prevChar = char\n        char = f.read(1)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "readSingleLineComment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def readSingleLineComment(f):\n    commentText = \"\"\n    char = f.read(1)\n    while char != \"\" and char != \"\\n\":\n        commentText = commentText + char\n        char = f.read(1)\n    return commentText + \"\\n\"\ndef readConsecutiveComments(f):\n    comment = \"\"\n    prevChar = None",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "readConsecutiveComments",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def readConsecutiveComments(f):\n    comment = \"\"\n    prevChar = None\n    mark = f.tell()\n    while 1:\n        char = f.read(1)\n        if char == \"\":\n            f.seek(mark)\n            break\n        # condense all inititial whitespace to '\\n'",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "getNextStatementText",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def getNextStatementText(f):\n    \"return the next sql statement\"\n    statement = \"\"    # accumulated statement text.\n    prevChar = None   # previously read character\n    char = f.read(1)\n    while char != \"\":\n        # detect -- comments\n        if prevChar == \"-\" and char == \"-\":\n            prevChar = None\n            statement = statement[:-1]",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "getMetadataList",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def getMetadataList(f):\n    \"Collect all the metadata items from sequential comments\"\n    prevChar = None\n    mds = []\n    # regular expressions for metadata keywords\n    desc_re  = re.compile(r\"^\\s*desc:(.*)$\",re.M);\n    rows_re  = re.compile(r\"^\\s*rows:(.*)$\",re.M)\n    table_re = re.compile(r\"^\\s*table:(.*)$\",re.M)\n    # process the comment(s) for metadata\n    comment = readConsecutiveComments(f)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "getNextStatement",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def getNextStatement(f):\n    \"build a statement with metadata attached\"\n    stmtText = getNextStatementText(f)\n    if stmtText != None:\n        statement = SQLStatement(stmtText)\n        mds = getMetadataList(f)\n        while mds:\n            for m in mds:\n                statement.metadata.append(m)\n            mds = getMetadataList(f)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "createStoredProcedure",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def createStoredProcedure(sqlfile, classname):\n    # gather cleaned-up statements into a list\n    f = open(sqlfile)\n    statements = []\n    stmt = getNextStatement(f)\n    while stmt != None:\n        statements.append(stmt)\n        stmt = getNextStatement(f)\n    # file header stuff\n    print \"/* This procedure generated by sqltests.py using \", sqlfile, \"*/\"",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "description": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "peekOfCode": "def main(args):\n    # sqltests.py create-sp <file.sql>\n    if (args[1] == 'create-sp'):\n        return(createStoredProcedure(args[2], args[3]))\n    else:\n        # invalid input, display usage.\n        print argv[0] + \" create-sp <sqlfile> <output-class>\"\n        return -1\nif __name__ == '__main__':\n    exit(main(argv))",
        "detail": "github.com.voltdb.voltdb.tests.scripts.sqltests",
        "documentation": {}
    },
    {
        "label": "EchoServer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "description": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "peekOfCode": "class EchoServer(threading.Thread):\n    def __init__(self, cmd, lock):\n        threading.Thread.__init__(self)\n        self.__server_cmd = cmd\n        self.__lock = threading.Event()\n        self.__start = lock\n    def run(self):\n        server = subprocess.Popen(self.__server_cmd, shell=True, encoding='utf-8')\n        time.sleep(1)\n        self.__start.set()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "documentation": {}
    },
    {
        "label": "TestFastSerializer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "description": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "peekOfCode": "class TestFastSerializer(unittest.TestCase):\n    byteArray = [None, 1, -21, 127]\n    int16Array = [None, 128, -256, 32767]\n    int32Array = [None, 0, -32768, 2147483647]\n    int64Array = [None, -52423, 2147483647, -9223372036854775807]\n    floatArray = [None, float(\"-inf\"), float(\"nan\"), -0.009999999776482582]\n    stringArray = [None, u\"hello world\", u\"ça\"]\n    binArray = [None, array.array('B', [0, 128, 255])]\n    dateArray = [None, datetime.datetime.now(),\n                 datetime.datetime.utcfromtimestamp(0),",
        "detail": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "documentation": {}
    },
    {
        "label": "signalHandler",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "description": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "peekOfCode": "def signalHandler(server, signum, frame):\n    server.shutdown()\n    server.join()\n    raise Exception(\"Interrupted by SIGINT.\")\nclass EchoServer(threading.Thread):\n    def __init__(self, cmd, lock):\n        threading.Thread.__init__(self)\n        self.__server_cmd = cmd\n        self.__lock = threading.Event()\n        self.__start = lock",
        "detail": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "documentation": {}
    },
    {
        "label": "SERVER_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "description": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "peekOfCode": "SERVER_NAME = \"EchoServer\"\ndecimal.getcontext().prec = 19\ndef signalHandler(server, signum, frame):\n    server.shutdown()\n    server.join()\n    raise Exception(\"Interrupted by SIGINT.\")\nclass EchoServer(threading.Thread):\n    def __init__(self, cmd, lock):\n        threading.Thread.__init__(self)\n        self.__server_cmd = cmd",
        "detail": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "documentation": {}
    },
    {
        "label": "decimal.getcontext().prec",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "description": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "peekOfCode": "decimal.getcontext().prec = 19\ndef signalHandler(server, signum, frame):\n    server.shutdown()\n    server.join()\n    raise Exception(\"Interrupted by SIGINT.\")\nclass EchoServer(threading.Thread):\n    def __init__(self, cmd, lock):\n        threading.Thread.__init__(self)\n        self.__server_cmd = cmd\n        self.__lock = threading.Event()",
        "detail": "github.com.voltdb.voltdb.tests.scripts.Testvoltdbclient",
        "documentation": {}
    },
    {
        "label": "valleak",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "description": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "peekOfCode": "def valleak(executable):\n    \"\"\"Returns (error, stdout, stderr).\n    error == 0 if successful, an integer > 0 if there are memory leaks or errors.\"\"\"\n    valgrind_output = tempfile.NamedTemporaryFile()\n    valgrind_command = (\n            VALGRIND,\n            \"--leak-check=full\",\n            \"--log-file-exactly=\" + valgrind_output.name,\n            \"--error-exitcode=1\",\n            executable)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "documentation": {}
    },
    {
        "label": "VALGRIND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "description": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "peekOfCode": "VALGRIND = \"valgrind\"\ndef valleak(executable):\n    \"\"\"Returns (error, stdout, stderr).\n    error == 0 if successful, an integer > 0 if there are memory leaks or errors.\"\"\"\n    valgrind_output = tempfile.NamedTemporaryFile()\n    valgrind_command = (\n            VALGRIND,\n            \"--leak-check=full\",\n            \"--log-file-exactly=\" + valgrind_output.name,\n            \"--error-exitcode=1\",",
        "detail": "github.com.voltdb.voltdb.tests.scripts.valleak",
        "documentation": {}
    },
    {
        "label": "TempDir",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "peekOfCode": "class TempDir(object):\n    def __init__(self):\n        self.name = tempfile.mkdtemp()\n    def __del__(self):\n        shutil.rmtree(self.name)\ndef compile(attach_object, text):\n    attach_object.tempdir = TempDir()\n    exe_name = attach_object.tempdir.name + \"/test\"\n    source_name = exe_name + \".c\"\n    out = open(source_name, \"w\")",
        "detail": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "documentation": {}
    },
    {
        "label": "ValLeakTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "peekOfCode": "class ValLeakTest(unittest.TestCase):\n    def valleak(self):\n        return valleak.valleak(self.tempdir.name + \"/test\")\n    def testNoError(self):\n        compile(self, \"\"\"\n#include <stdio.h>\nint main() {\n  printf(\"hello world\\\\n\");\n  fprintf(stderr, \"hello stderr\\\\n\");\n  return 0;",
        "detail": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "description": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "peekOfCode": "def compile(attach_object, text):\n    attach_object.tempdir = TempDir()\n    exe_name = attach_object.tempdir.name + \"/test\"\n    source_name = exe_name + \".c\"\n    out = open(source_name, \"w\")\n    out.write(text)\n    out.close()\n    gcc = subprocess.Popen(\n            (\"gcc\", \"-Wall\", \"-Werror\", \"-o\", exe_name, source_name),\n            stdout = subprocess.PIPE)",
        "detail": "github.com.voltdb.voltdb.tests.scripts.valleak_test",
        "documentation": {}
    },
    {
        "label": "mkdir_p",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def mkdir_p(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc: # Python >2.5\n        if exc.errno == errno.EEXIST and os.path.isdir(path):\n            pass\n        else: raise\n# kill the VoltDB server process, if any, running on the local machine.\n# The process is identified by its command line text via the ps command.\ndef kill_voltdb():",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "kill_voltdb",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def kill_voltdb():\n    # Works for Linux and Mac.\n    # ps - find all running java commands.\n    # awk - finds commands ending in \"/java\" that refer to the org.voltdb.VoltDB class and outputs the PID(s)\n    # xargs - execute a kill command on each PID (hoping there's only the 1 launched from this script).\n    return subprocess.call('''\\\nps -fww | awk '\n$8 ~ \"/java$\" {\n    for (i = 9; i <= NF; i++) {\n        if ($i == \"org.voltdb.VoltDB\") {",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "replace_parent_dir_prefix",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def replace_parent_dir_prefix(script_subdir, script_dir, baseline_dir):\n    if script_subdir[0: len(script_dir)] == script_dir:\n        return baseline_dir + script_subdir[len(script_dir):]\n    # If the subdir relationship between script_subdir and script_dir is\n    # non-obvious, do some guesswork.\n    # If this becomes a problem, we may want to try to funnel more cases\n    # into the above conditional by first canonicalizing script_subdir and\n    # script_dir. Failing that, there may be ways to improve this \"guessing\"\n    # algorithm.\n    # If script_subdir starts with an alphanumeric,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "launch_and_wait_on_voltdb",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def launch_and_wait_on_voltdb(reportout):\n    # Launch a single local voltdb server to serve all scripted sqlcmd runs.\n    # The scripts are expected to clean up after themselves  -- and/or defensively\n    # drop and create all of their tables up front.\n    voltenv=os.environ.copy()\n    sqlcmdenv=os.environ.copy()\n    sqlcmdopts=[]\n    if os.environ.has_key(\"ENABLE_SSL\") and os.environ[\"ENABLE_SSL\"].lower() == \"true\":\n        prop_pfx=\"-Djavax.net.ssl.\"\n        keystore=os.path.realpath(\"../../tests/frontend/org/voltdb/keystore\")",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "purgeonly",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def purgeonly(script_dir):\n    global purge_only_count\n    for parent, dirs, files in os.walk(script_dir):\n        for inpath in files:\n            # Exempt the expected \".in\" files up front as a common case,\n            # but DO NOT ASSUME that other files are non-persistent or expendable.\n            if inpath.endswith(\".in\"):\n                continue\n            # Rely on explicit positive pattern matching of generated fie extensions to identify garbage.\n            if (inpath.endswith(\".err\") or",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "clean_output",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def clean_output(parent, path):\n    # fuzz the sqlcmd output for reliable comparison\n    outbackin = open(os.path.join(parent, path), 'r')\n    cleanedpath = os.path.join(parent, path + 'clean')\n    cleanedout = open(cleanedpath, 'w+')\n    # Currently, the following cases of fuzzing are required:\n    # 1. Allow consistent baselines across different builds with java memcheck enabled\n    # or disabled by filtering out the warning that gets issued when it is enabled.\n    memory_check_matcher = re.compile(r\"\"\"\n            ^(WARN:\\s)?Strict\\sjava\\smemory\\schecking.*$  # Match the start.",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "compare_cleaned_to_baseline",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def compare_cleaned_to_baseline(parent, baseparent, path, inpath, do_refresh, reportout):\n    cleanedpath = os.path.join(parent, path + 'clean')\n    baselinepath = os.path.join(baseparent, path + 'baseline')\n    gotdiffs = True  # default in case baseline does not exist.\n    if os.path.isfile(baselinepath):\n        outdiffspath = os.path.join(parent, path + 'diffs')\n        diffout = open(outdiffspath, 'w+')\n        gotdiffs = subprocess.call(['diff', baselinepath, cleanedpath],\n                stdout=diffout)\n        if gotdiffs:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "delete_proc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def delete_proc(pfile):\n    # drop any procedures left in between any tests\n    defaultstoredprocedures = {\".insert\",\".update\",\".select\",\".delete\",\".upsert\"}\n    procset = set()\n    for line in pfile.splitlines():\n        columns = line.split(',')\n        # column[2] gives the procedure name. using set to discard duplicates among partition.\n        try:\n            if columns[2] != ' ' :\n                procname = columns[2].replace('\\\"','')",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "delete_table_and_view",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def delete_table_and_view(pfile):\n    # drop table (unique) and all its views left in between any tests\n    tableset = set()\n    for line in pfile.splitlines():\n        columns = line.split(',')\n        # column[5] gives the table and views. using set to discard duplicates among partition.\n        try:\n            if columns[5] != ' ' :\n                tablename = columns[5].replace('\\\"','')\n                tableset.add(tablename)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "do_main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "def do_main():\n    parser = OptionParser()\n    parser.add_option(\"-s\", \"--scripts\", dest=\"script_dir\", default=\"./scripts\",\n                      help=\"top level test case script directory\")\n    parser.add_option(\"-b\", \"--baselines\", dest=\"baseline_dir\", default=\"./baselines\",\n                      help=\"top level test output baseline directory\")\n    parser.add_option(\"-o\", \"--report_file\", dest=\"report_file\",\n                      default=\"./sqlcmdtest.report\",\n                      help=\"report output file\")\n    parser.add_option(\"-r\", \"--refresh\", dest=\"refresh\",",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "purge_only_count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "description": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "peekOfCode": "purge_only_count = 0\n# The purgeonly utility mode was enabled. Purge anything that matches the pattern of a generated file,\ndef purgeonly(script_dir):\n    global purge_only_count\n    for parent, dirs, files in os.walk(script_dir):\n        for inpath in files:\n            # Exempt the expected \".in\" files up front as a common case,\n            # but DO NOT ASSUME that other files are non-persistent or expendable.\n            if inpath.endswith(\".in\"):\n                continue",
        "detail": "github.com.voltdb.voltdb.tests.sqlcmd.sqlcmdtest",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "peekOfCode": "def normalize(table, sql, num_digits=12, sort_nulls=SortNulls.never):\n    \"\"\"Normalizes the result tuples of ORDER BY statements in the default\n       manner, without sorting SQL NULL (Python None) values at all; in some\n       cases, this could lead to mismatches between HSqlDB, which always sorts\n       NULL values first, and VoltDB, which sorts NULL values as if they were\n       the lowest value (first with ORDER BY ASC, last with ORDER BY DESC), in\n       which case you could use a different normalizer, such as\n       nulls-lowest-normalizer.py. Also rounds numbers, including those found\n       in a string (VARCHAR) column representing a GEOGRAPHY_POINT or GEOGRAPHY\n       (point or polygon) to the specified number of significant digits; the",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "documentation": {}
    },
    {
        "label": "safecmp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "peekOfCode": "def safecmp(x, y):\n    \"\"\"Calls the 'standard' safecmp function, which performs a comparison\n       similar to cmp, including iterating over lists, but two None values\n       are considered equal, and a TypeError is avoided when a None value\n       and a datetime are corresponding members of a list.\n    \"\"\"\n    return StandardNormalizer.safecmp(x,y)\ndef compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "documentation": {}
    },
    {
        "label": "compare_results",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "peekOfCode": "def compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,\n                    max_mismatches=0, max_detail_files=-1, within_minutes=0,\n                    reproducer=0, ddl_file=None):\n    \"\"\"Just calls SQLCoverageReport.generate_html_reports(...).\n    \"\"\"\n    return generate_html_reports(suite, seed, statements_path, hsql_path, jni_path,\n                                 output_dir, report_invalid, report_all, extra_stats,\n                                 comparison_database, modified_sql_path,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.normalizer",
        "documentation": {}
    },
    {
        "label": "safecmp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "peekOfCode": "def safecmp(x, y):\n    \"\"\"Calls the 'standard' safecmp function, which performs a comparison\n       similar to cmp, including iterating over lists, but two None values\n       are considered equal, and a TypeError is avoided when a None value\n       and a datetime are corresponding members of a list.\n    \"\"\"\n    return NotANormalizer.safecmp(x,y)\ndef normalize(table, sql):\n    \"\"\"Do nothing other than returning the table.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "peekOfCode": "def normalize(table, sql):\n    \"\"\"Do nothing other than returning the table.\n    \"\"\"\n    return NotANormalizer.normalize(table, sql)\ndef compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,\n                    max_mismatches=0, max_detail_files=-1, within_minutes=0,\n                    reproducer=0, ddl_file=None):\n    \"\"\"Just calls SQLCoverageReport.generate_html_reports(...).",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "documentation": {}
    },
    {
        "label": "compare_results",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "peekOfCode": "def compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,\n                    max_mismatches=0, max_detail_files=-1, within_minutes=0,\n                    reproducer=0, ddl_file=None):\n    \"\"\"Just calls SQLCoverageReport.generate_html_reports(...).\n    \"\"\"\n    return generate_html_reports(suite, seed, statements_path, hsql_path, jni_path,\n                                 output_dir, report_invalid, report_all, extra_stats,\n                                 comparison_database, modified_sql_path,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.not-a-normalizer",
        "documentation": {}
    },
    {
        "label": "NotANormalizer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.NotANormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.NotANormalizer",
        "peekOfCode": "class NotANormalizer:\n    \"\"\"The simplest possible Normalizer, whose normalize function merely\n    returns the original table without making any changes; also offers a\n    safecmp function that can compare two lists that may contain None, and\n    avoid a TypeError when using datetime.\n    \"\"\"\n    @staticmethod\n    def safecmp(x, y):\n        \"\"\"A safe comparison (static) method, which performs a comparison\n           similar to cmp, including iterating over lists, but two None values",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.NotANormalizer",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "peekOfCode": "def normalize(table, sql, num_digits=12):\n    \"\"\"Normalizes the result tuples of ORDER BY statements, sorting SQL NULL\n       (Python None) values as if they were the lowest values, i.e., first\n       when using ORDER BY col1 ASC, but last when using ORDER BY col1 DESC.\n    \"\"\"\n    return StandardNormalizer.normalize(table, sql, num_digits, SortNulls.lowest)\ndef safecmp(x, y):\n    \"\"\"Calls the 'standard' safecmp function, which performs a comparison\n       similar to cmp, including iterating over lists, but two None values\n       are considered equal, and a TypeError is avoided when a None value",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "documentation": {}
    },
    {
        "label": "safecmp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "peekOfCode": "def safecmp(x, y):\n    \"\"\"Calls the 'standard' safecmp function, which performs a comparison\n       similar to cmp, including iterating over lists, but two None values\n       are considered equal, and a TypeError is avoided when a None value\n       and a datetime are corresponding members of a list.\n    \"\"\"\n    return StandardNormalizer.safecmp(x,y)\ndef compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "documentation": {}
    },
    {
        "label": "compare_results",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "peekOfCode": "def compare_results(suite, seed, statements_path, hsql_path, jni_path,\n                    output_dir, report_invalid, report_all, extra_stats,\n                    comparison_database, modified_sql_path,\n                    max_mismatches=0, max_detail_files=-1, within_minutes=0,\n                    reproducer=0, ddl_file=None):\n    \"\"\"Just calls SQLCoverageReport.generate_html_reports(...).\n    \"\"\"\n    return generate_html_reports(suite, seed, statements_path, hsql_path, jni_path,\n                                 output_dir, report_invalid, report_all, extra_stats,\n                                 comparison_database, modified_sql_path,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.nulls-lowest-normalizer",
        "documentation": {}
    },
    {
        "label": "SortNulls",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.SortNulls",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.SortNulls",
        "peekOfCode": "class SortNulls:\n    \"\"\"Simple class to enumerate the options for when and how to sort SQL NULL\n       (Python None) values, found in the ORDER BY columns: never, first, last,\n       lowest or highest.\n    \"\"\"\n    never = 0  # do not re-sort SQL NULL (Python None) values\n    first = 1  # always sort SQL NULL (Python None) values first\n    last  = 2  # always sort SQL NULL (Python None) values last\n    lowest  = 3  # sort SQL NULL (Python None) values first with ORDER BY ASC, last with ORDER BY DESC\n    highest = 4  # sort SQL NULL (Python None) values last with ORDER BY ASC, first with ORDER BY DESC",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.SortNulls",
        "documentation": {}
    },
    {
        "label": "StandardNormalizer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "class StandardNormalizer(NotANormalizer):\n    \"\"\"This class contains a standard normalizer ('normalize' static method)\n       that normalizes the result tuples of ORDER BY statements, sorting SQL\n       NULL (Python None) values in the ORDER BY columns in the specified\n       manner; and a standard comparison ('safecmp' static method) that\n       compares values (including lists, None values and datetimes), to see\n       if they are equal. By making this a class, it can be easily called\n       from other modules; it could also serve as the base class for other\n       normalizers.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "round_to_num_digits",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def round_to_num_digits(v, num_digits):\n    # round to the specified total number of significant digits,\n    # regardless of where the decimal point occurs\n    f = float(v)\n    if f == 0.0:\n        return f\n    decimal_places = num_digits - int(math.floor(math.log10(abs(f)))) - 1\n    return round(f, decimal_places)\ndef normalize_value(v, vtype, num_digits):\n    global __NULL",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "normalize_value",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def normalize_value(v, vtype, num_digits):\n    global __NULL\n    if v is None:\n        return None\n    if vtype in __NULL and v == __NULL[vtype]:\n        return None\n    elif vtype == FastSerializer.VOLTTYPE_FLOAT:\n        # round to the desired number of decimal places -- accounting for significant digits before the decimal\n        return round_to_num_digits(v, num_digits)\n    elif vtype == FastSerializer.VOLTTYPE_DECIMAL:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "normalize_values",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def normalize_values(tuples, columns, num_digits):\n    # 'c' here is a voltdbclient.VoltColumn and\n    # I assume t is a voltdbclient.VoltTable.\n    if hasattr(tuples, \"__iter__\"):\n        for i in xrange(len(tuples)):\n            # varbinary is array.array type and has __iter__ defined, but should be considered\n            # as a single value to be compared.\n            if hasattr(tuples[i], \"__iter__\") and type(tuples[i]) is not array.array:\n                normalize_values(tuples[i], columns, num_digits)\n            else:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "project_sorted",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def project_sorted(row, sorted_cols):\n    \"\"\"Extract the values in the ORDER BY columns from a row.\n    \"\"\"\n    return [ row[col] for col in sorted_cols ]\ndef project_unsorted(row, sorted_cols):\n    \"\"\"Extract the values in the non-ORDERBY columns from a row.\n    \"\"\"\n    return [ row[col] for col in xrange(len(row)) if col not in sorted_cols ]\ndef move_rows(rows, start, end, moveto):\n    \"\"\"Given a list of rows, moves the rows beginning with index 'start'",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "project_unsorted",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def project_unsorted(row, sorted_cols):\n    \"\"\"Extract the values in the non-ORDERBY columns from a row.\n    \"\"\"\n    return [ row[col] for col in xrange(len(row)) if col not in sorted_cols ]\ndef move_rows(rows, start, end, moveto):\n    \"\"\"Given a list of rows, moves the rows beginning with index 'start'\n       (inclusive) and ending with index 'end' (exclusive) to a position\n       just before index 'moveto', and modifies the rows arg accordingly.\n    \"\"\"\n    newrows = []",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "move_rows",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def move_rows(rows, start, end, moveto):\n    \"\"\"Given a list of rows, moves the rows beginning with index 'start'\n       (inclusive) and ending with index 'end' (exclusive) to a position\n       just before index 'moveto', and modifies the rows arg accordingly.\n    \"\"\"\n    newrows = []\n    if start < 0 or end < 0 or start > len(rows) or end > len(rows) or start > end:\n        raise ValueError('Illegal value of start (%d) or end (%d): negative, greater than len(rows) (%d), or start > end' % (start, end, len(rows)))\n    elif moveto < 0 or moveto > len(rows) or (moveto > start and moveto < end):\n        raise ValueError('Illegal value of moveto (%d): negative, greater than len(rows) (%d), or between start (%d) and end (%d)' % (moveto, len(rows), start, end))",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "sort",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def sort(rows, sorted_cols, desc, sort_nulls=SortNulls.never):\n    \"\"\"Three steps:\n        1. Find the subset of rows which have the same values in the ORDER BY\n        columns.\n        2. Sort them on the rest of the columns.\n        3. Optionally, re-sort SQL NULL (Python None) values in the ORDER BY\n        columns to be first or last (or first when ASC, last when DESC, or\n        vice versa), as specified.\n    \"\"\"\n    if not sorted_cols:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "parse_sql",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def parse_sql(x):\n    \"\"\"Finds if the SQL statement contains an ORDER BY command, and returns\n       the names of the ORDER BY columns.\n    \"\"\"\n    global __EXPR\n    result = __EXPR.search(x)\n    if result:\n        # returns the ORDER BY column names, in the order used in that clause\n        getcol = lambda i: result.groupdict()['column_' + str(i)]\n        return map(lambda i: getcol(i), filter(lambda i: getcol(i), range(1, 7)))",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "parse_for_order_by_desc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "def parse_for_order_by_desc(sql, col_name):\n    \"\"\"Checks whether the SQL statement contains an ORDER BY clause for the\n       specified column name, followed by DESC (meaning descending order);\n       returns True if so, otherwise False.\n    \"\"\"\n    desc_expr = re.compile(r\"ORDER BY([\\s\\w.]*,)*\\s+(\\w+\\.)?\" + col_name.upper() + \"\\s+DESC\")\n    result = desc_expr.search(sql)\n    if result:\n        return True\n    else:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__EXPR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__EXPR = re.compile(r\"ORDER BY\\s+((\\w+\\.)?(?P<column_1>\\w+)(\\s+\\w+)?)\"\n                    r\"((\\s+)?,\\s+(\\w+\\.)?(?P<column_2>\\w+)(\\s+\\w+)?)?\"\n                    r\"((\\s+)?,\\s+(\\w+\\.)?(?P<column_3>\\w+)(\\s+\\w+)?)?\"\n                    r\"((\\s+)?,\\s+(\\w+\\.)?(?P<column_4>\\w+)(\\s+\\w+)?)?\"\n                    r\"((\\s+)?,\\s+(\\w+\\.)?(?P<column_5>\\w+)(\\s+\\w+)?)?\"\n                    r\"((\\s+)?,\\s+(\\w+\\.)?(?P<column_6>\\w+)(\\s+\\w+)?)?\")\n# matches a string (VARCHAR) column representing a GEOGRAPHY_POINT (point),\n# of roughly this form: 'POINT (-12.3456 -65.4321)', but the initial space\n# between 'POINT' and '(', the minus signs, and the decimal points are optional\n__NUMBER = '-?\\d+\\.?\\d*'",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__NUMBER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__NUMBER = '-?\\d+\\.?\\d*'\n__LONG_LAT_NUMS   =     __NUMBER+ '\\s+' +__NUMBER\n__LONG_LAT_GROUPS = '('+__NUMBER+')\\s+('+__NUMBER+')'\n__POINT = re.compile(r\"^POINT\\s?\\(\"+__LONG_LAT_GROUPS+\"\\)$\")\n# matches a string (VARCHAR) column representing a GEOGRAPHY (polygon), of roughly this form:\n# 'POLYGON ((-1.1 -1.1, -4.4 -1.1, -4.4 -4.4, -1.1 -4.4, -1.1 -1.1), (-2.2 -2.2, -3.3 -2.2, -2.2 -3.3, -2.2 -2.2))',\n# but the initial space between 'POINT' and '(', the spaces following the commas, the minus\n# signs, and the decimal points are all optional; and of course the number of loops (2 in this\n# example), the number of vertices within each loop, the number of digits before or after the\n# decimal point, and the actual numbers, can all vary.",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__LONG_LAT_GROUPS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__LONG_LAT_GROUPS = '('+__NUMBER+')\\s+('+__NUMBER+')'\n__POINT = re.compile(r\"^POINT\\s?\\(\"+__LONG_LAT_GROUPS+\"\\)$\")\n# matches a string (VARCHAR) column representing a GEOGRAPHY (polygon), of roughly this form:\n# 'POLYGON ((-1.1 -1.1, -4.4 -1.1, -4.4 -4.4, -1.1 -4.4, -1.1 -1.1), (-2.2 -2.2, -3.3 -2.2, -2.2 -3.3, -2.2 -2.2))',\n# but the initial space between 'POINT' and '(', the spaces following the commas, the minus\n# signs, and the decimal points are all optional; and of course the number of loops (2 in this\n# example), the number of vertices within each loop, the number of digits before or after the\n# decimal point, and the actual numbers, can all vary.\n__LOOP_GROUP = '(\\('+__LONG_LAT_NUMS+'(?:,\\s?'+__LONG_LAT_NUMS+')+\\))'\n__POLYGON = re.compile(r\"^POLYGON\\s?\\(\"+__LOOP_GROUP+\"(?:,\\s?\"+__LOOP_GROUP+\")*\\)$\")",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__POINT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__POINT = re.compile(r\"^POINT\\s?\\(\"+__LONG_LAT_GROUPS+\"\\)$\")\n# matches a string (VARCHAR) column representing a GEOGRAPHY (polygon), of roughly this form:\n# 'POLYGON ((-1.1 -1.1, -4.4 -1.1, -4.4 -4.4, -1.1 -4.4, -1.1 -1.1), (-2.2 -2.2, -3.3 -2.2, -2.2 -3.3, -2.2 -2.2))',\n# but the initial space between 'POINT' and '(', the spaces following the commas, the minus\n# signs, and the decimal points are all optional; and of course the number of loops (2 in this\n# example), the number of vertices within each loop, the number of digits before or after the\n# decimal point, and the actual numbers, can all vary.\n__LOOP_GROUP = '(\\('+__LONG_LAT_NUMS+'(?:,\\s?'+__LONG_LAT_NUMS+')+\\))'\n__POLYGON = re.compile(r\"^POLYGON\\s?\\(\"+__LOOP_GROUP+\"(?:,\\s?\"+__LOOP_GROUP+\")*\\)$\")\n# used to match individual loops within a in a GEOGRAPHY (polygon), and vertices (longitude",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__LOOP_GROUP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__LOOP_GROUP = '(\\('+__LONG_LAT_NUMS+'(?:,\\s?'+__LONG_LAT_NUMS+')+\\))'\n__POLYGON = re.compile(r\"^POLYGON\\s?\\(\"+__LOOP_GROUP+\"(?:,\\s?\"+__LOOP_GROUP+\")*\\)$\")\n# used to match individual loops within a in a GEOGRAPHY (polygon), and vertices (longitude\n# & latitude) within a loop\n__LOOP = re.compile(r\"\\(\"+__LONG_LAT_NUMS+\"(?:,\\s?\"+__LONG_LAT_NUMS+\")+\\)\")\n__LONG_LAT = re.compile(r\"^\\s?\"+__LONG_LAT_GROUPS+\"$\")\n# This appears to be a weak knock-off of FastSerializer.NullCheck\n# TODO: There's probably a way to use the actual FastSerializer.NullCheck\n__NULL = {FastSerializer.VOLTTYPE_TINYINT: FastSerializer.NULL_TINYINT_INDICATOR,\n          FastSerializer.VOLTTYPE_SMALLINT: FastSerializer.NULL_SMALLINT_INDICATOR,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__POLYGON",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__POLYGON = re.compile(r\"^POLYGON\\s?\\(\"+__LOOP_GROUP+\"(?:,\\s?\"+__LOOP_GROUP+\")*\\)$\")\n# used to match individual loops within a in a GEOGRAPHY (polygon), and vertices (longitude\n# & latitude) within a loop\n__LOOP = re.compile(r\"\\(\"+__LONG_LAT_NUMS+\"(?:,\\s?\"+__LONG_LAT_NUMS+\")+\\)\")\n__LONG_LAT = re.compile(r\"^\\s?\"+__LONG_LAT_GROUPS+\"$\")\n# This appears to be a weak knock-off of FastSerializer.NullCheck\n# TODO: There's probably a way to use the actual FastSerializer.NullCheck\n__NULL = {FastSerializer.VOLTTYPE_TINYINT: FastSerializer.NULL_TINYINT_INDICATOR,\n          FastSerializer.VOLTTYPE_SMALLINT: FastSerializer.NULL_SMALLINT_INDICATOR,\n          FastSerializer.VOLTTYPE_INTEGER: FastSerializer.NULL_INTEGER_INDICATOR,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__LOOP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__LOOP = re.compile(r\"\\(\"+__LONG_LAT_NUMS+\"(?:,\\s?\"+__LONG_LAT_NUMS+\")+\\)\")\n__LONG_LAT = re.compile(r\"^\\s?\"+__LONG_LAT_GROUPS+\"$\")\n# This appears to be a weak knock-off of FastSerializer.NullCheck\n# TODO: There's probably a way to use the actual FastSerializer.NullCheck\n__NULL = {FastSerializer.VOLTTYPE_TINYINT: FastSerializer.NULL_TINYINT_INDICATOR,\n          FastSerializer.VOLTTYPE_SMALLINT: FastSerializer.NULL_SMALLINT_INDICATOR,\n          FastSerializer.VOLTTYPE_INTEGER: FastSerializer.NULL_INTEGER_INDICATOR,\n          FastSerializer.VOLTTYPE_BIGINT: FastSerializer.NULL_BIGINT_INDICATOR,\n          FastSerializer.VOLTTYPE_FLOAT: FastSerializer.NULL_FLOAT_INDICATOR,\n          FastSerializer.VOLTTYPE_STRING: FastSerializer.NULL_STRING_INDICATOR}",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__LONG_LAT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__LONG_LAT = re.compile(r\"^\\s?\"+__LONG_LAT_GROUPS+\"$\")\n# This appears to be a weak knock-off of FastSerializer.NullCheck\n# TODO: There's probably a way to use the actual FastSerializer.NullCheck\n__NULL = {FastSerializer.VOLTTYPE_TINYINT: FastSerializer.NULL_TINYINT_INDICATOR,\n          FastSerializer.VOLTTYPE_SMALLINT: FastSerializer.NULL_SMALLINT_INDICATOR,\n          FastSerializer.VOLTTYPE_INTEGER: FastSerializer.NULL_INTEGER_INDICATOR,\n          FastSerializer.VOLTTYPE_BIGINT: FastSerializer.NULL_BIGINT_INDICATOR,\n          FastSerializer.VOLTTYPE_FLOAT: FastSerializer.NULL_FLOAT_INDICATOR,\n          FastSerializer.VOLTTYPE_STRING: FastSerializer.NULL_STRING_INDICATOR}\ndef round_to_num_digits(v, num_digits):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "__NULL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "peekOfCode": "__NULL = {FastSerializer.VOLTTYPE_TINYINT: FastSerializer.NULL_TINYINT_INDICATOR,\n          FastSerializer.VOLTTYPE_SMALLINT: FastSerializer.NULL_SMALLINT_INDICATOR,\n          FastSerializer.VOLTTYPE_INTEGER: FastSerializer.NULL_INTEGER_INDICATOR,\n          FastSerializer.VOLTTYPE_BIGINT: FastSerializer.NULL_BIGINT_INDICATOR,\n          FastSerializer.VOLTTYPE_FLOAT: FastSerializer.NULL_FLOAT_INDICATOR,\n          FastSerializer.VOLTTYPE_STRING: FastSerializer.NULL_STRING_INDICATOR}\ndef round_to_num_digits(v, num_digits):\n    # round to the specified total number of significant digits,\n    # regardless of where the decimal point occurs\n    f = float(v)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.normalizer.StandardNormalizer",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\n# Options for which SQL statement types to include when generating Steps to\n# Reproduce a failure (or crash, exception, etc.)\nReproduce = enum('NONE', 'DDL', 'DML', 'CTE', 'ALL')\n# Define which SQL statement types are included in each of the above options\nReproduceStatementTypes = {}",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "highlight",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def highlight(s, flag):\n    if not isinstance(s, basestring):\n        s = str(s)\n    return flag and '<span style=\"color:red\">%s**</span>' % (s) or s\ndef as_html_unicode_string(s):\n    if isinstance(s, list):\n        return '[' + \", \".join(as_html_unicode_string(x) for x in s) + ']'\n    elif isinstance(s, basestring):\n        return \"'\" + s.encode('ascii', 'xmlcharrefreplace') + \"'\"\n    else:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "as_html_unicode_string",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def as_html_unicode_string(s):\n    if isinstance(s, list):\n        return '[' + \", \".join(as_html_unicode_string(x) for x in s) + ']'\n    elif isinstance(s, basestring):\n        return \"'\" + s.encode('ascii', 'xmlcharrefreplace') + \"'\"\n    else:\n        return str(s)\ndef generate_table_str(res, key):\n    source = res[key].get(\"Result\")\n    if not source:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_table_str",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_table_str(res, key):\n    source = res[key].get(\"Result\")\n    if not source:\n        return \"\"\n    highlights = res.get(\"highlight\")\n    if isinstance(highlights, list):\n        key_highlights = highlights\n    else:\n        key_highlights = res.get(\"highlight_\" + key)\n    result = []",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_ddl",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_ddl(output_dir, ddl_path):\n    filename = basename(ddl_path) + '.html'\n    local_ddl_path = output_dir + '/' + filename\n    if not isfile(local_ddl_path):\n        ### print 'DEBUG: copying %s to %s' % (ddl_path, local_ddl_path)\n        read_ddl_file = open(ddl_path, 'rb')\n        copy_ddl_file = open(local_ddl_path, 'w')\n        copy_ddl_file.write('<html>\\n<head>\\n<title>DDL File</title>\\n</head>\\n<body>\\n<pre>\\n')\n        while True:\n            line = read_ddl_file.readline()",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_reproducer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_reproducer(item, output_dir, reproducer, ddl_file):\n    result = ''\n    if item.get(\"reproducer\"):\n        reproducer_html = \"\"\"\n<html>\n<head>\n<title>Reproduce Query #%s</title>\n<style>\ntd {width: 50%%}\n</style>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_modified_query",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_modified_query(cmpdb, sql, modified_sql):\n    result = ''\n    mod_sql = modified_sql.get(sql.rstrip(';'), None)\n    if mod_sql:\n        result = '<p>Modified SQL query, as sent to ' + str(cmpdb) + ':</p><h2>' + str(mod_sql) + '</h2>'\n    return result\ndef generate_detail(name, item, output_dir, cmpdb, modified_sql,\n                    reproducer, ddl_file, create_detail_files=True):\n    if output_dir == None:\n        return",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_detail",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_detail(name, item, output_dir, cmpdb, modified_sql,\n                    reproducer, ddl_file, create_detail_files=True):\n    if output_dir == None:\n        return\n    filename = \"%s.html\" % (item[\"id\"])\n    if not create_detail_files:\n        return filename\n    details = \"\"\"\n<html>\n<head>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "safe_print",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def safe_print(s):\n    if not __quiet:\n        print s\ndef print_section(name, mismatches, output_dir, cmpdb, modified_sql,\n                  reproducer, ddl_file, max_num_detail_files=-1):\n    result = \"\"\"\n<h2>%s: %d</h2>\n<table cellpadding=3 cellspacing=1 border=1>\n<tr>\n<th>ID</th>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "print_section",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def print_section(name, mismatches, output_dir, cmpdb, modified_sql,\n                  reproducer, ddl_file, max_num_detail_files=-1):\n    result = \"\"\"\n<h2>%s: %d</h2>\n<table cellpadding=3 cellspacing=1 border=1>\n<tr>\n<th>ID</th>\n<th>SQL Statement</th>\n<th>VoltDB Status</th>\n<th>%s Status</th>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "time_diff_close_enough",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def time_diff_close_enough(time1, time2, within_minutes):\n    \"\"\"Test whether two datetimes (TIMESTAMP's) are:\n    1. within a specified number of minutes of each other; and\n    2. within a specified number (the same number) of minutes of right now.\n    If both are true, then they are deemed to be \"close enough\", on the\n    assumption that they were each set to NOW() or CURRENT_TIMESTAMP(), and\n    the difference is because VoltDB and its comparison database (HSQL or\n    PostgreSQL) called that function at slightly different times.\n    \"\"\"\n    time_diff_in_minutes = (time1 - time2).total_seconds() / 60",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "is_different",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def is_different(x, cntonly, within_minutes):\n    \"\"\"Notes the attributes that are different. Since the whole table will be\n    printed out as a single string.\n    the first line is column count,\n    the second line is row count,\n    the third line is column names and types,\n    followed by rows.\n    \"\"\"\n    jni = x[\"jni\"]\n    cmp = x[\"cmp\"]",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def usage(prog_name):\n    print \"\"\"\nUsage:\n\\t%s report [-o output_dir] [-f true/false] [-a]\nGenerates HTML reports based on the given report files. The generated reports\ncontain the SQL statements which caused different responses on both backends.\n\"\"\" % (prog_name)\ndef get_reproducer(reproduce_results, sql):\n    result = \";<br>\\n\".join(reproduce_results)\n    if reproduce_results:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "get_reproducer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def get_reproducer(reproduce_results, sql):\n    result = \";<br>\\n\".join(reproduce_results)\n    if reproduce_results:\n        result += \";<br>\\n\"\n    if not reproduce_results or sql != reproduce_results[len(reproduce_results)-1]:\n        result += sql + \";\\n\"\n    return result\ndef generate_html_reports(suite, seed, statements_path, cmpdb_path, jni_path,\n                          output_dir, report_invalid, report_all, extra_stats='',\n                          cmpdb='HSqlDB', modified_sql_path=None,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_html_reports",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_html_reports(suite, seed, statements_path, cmpdb_path, jni_path,\n                          output_dir, report_invalid, report_all, extra_stats='',\n                          cmpdb='HSqlDB', modified_sql_path=None,\n                          max_expected_mismatches=0, max_detail_pages=-1,\n                          within_minutes=0, reproducer=Reproduce.NONE, ddl_file=None,\n                          cntonly=False):\n    if output_dir != None and not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    statements_file = open(statements_path, \"rb\")\n    cmpdb_file = open(cmpdb_path, \"rb\")",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "getTopSummaryLines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def getTopSummaryLines(cmpdb, includeAll=True):\n    topLines = \"<tr>\"\n    if includeAll:\n        topLines += \"<td rowspan=2 align=center>Test Suite</td>\"\n    topLines += \"\"\"\n<td colspan=5 align=center>SQL Statements</td>\n<td colspan=2 align=center>Test Failures</td>\n<td colspan=3 align=center>Exceptions</td>\n<td colspan=3 align=center>Crashes</td>\n<td colspan=5 align=center>SQL Statements per Pattern</td>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "createSummaryInHTML",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def createSummaryInHTML(count, failures, misses, volt_fatal_excep, volt_nonfatal_excep,\n                        cmpdb_excep, extra_stats, seed, max_misses=0):\n    passed = count - (failures + misses)\n    passed_ps = fail_ps = cell4misPct = cell4misCnt = color = None\n    count_color = fail_color = \"\"\n    if (count < 1):\n        count_color = \" bgcolor=#FFA500\" # orange\n    if (failures == 0):\n        fail_ps = \"0.00%\"\n    else:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "generate_summary",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "def generate_summary(output_dir, statistics, cmpdb='HSqlDB'):\n    fd = open(os.path.join(output_dir, \"index.html\"), \"w\")\n    topLines = getTopSummaryLines(cmpdb)\n    content = \"\"\"\n<html>\n<head>\n<title>SQL Coverage Test Summary</title>\n<style>\nh2 {text-transform: uppercase}\n</style>",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "__quiet",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "__quiet = True\n# One way of representing Enums in earlier versions of Python,\n# per Stack Overflow\ndef enum(*sequential, **named):\n    enums = dict(zip(sequential, range(len(sequential))), **named)\n    reverse = dict((value, key) for key, value in enums.iteritems())\n    enums['reverse_mapping'] = reverse\n    return type('Enum', (), enums)\n# Options for which SQL statement types to include when generating Steps to\n# Reproduce a failure (or crash, exception, etc.)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "Reproduce",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "Reproduce = enum('NONE', 'DDL', 'DML', 'CTE', 'ALL')\n# Define which SQL statement types are included in each of the above options\nReproduceStatementTypes = {}\nReproduceStatementTypes[Reproduce.NONE] = []\nReproduceStatementTypes[Reproduce.DDL]  = ['CREATE', 'DROP', 'ALTER', 'PARTITION', 'DR ']\nReproduceStatementTypes[Reproduce.DML]  = ['INSERT', 'UPSERT', 'UPDATE', 'DELETE', 'TRUNCATE']\nReproduceStatementTypes[Reproduce.DML].extend(ReproduceStatementTypes[Reproduce.DDL])\nReproduceStatementTypes[Reproduce.CTE]  = ['WITH']\nReproduceStatementTypes[Reproduce.CTE].extend(ReproduceStatementTypes[Reproduce.DML])\nReproduceStatementTypes[Reproduce.ALL]  = ['']    # any statement, including SELECT",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "ReproduceStatementTypes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "ReproduceStatementTypes = {}\nReproduceStatementTypes[Reproduce.NONE] = []\nReproduceStatementTypes[Reproduce.DDL]  = ['CREATE', 'DROP', 'ALTER', 'PARTITION', 'DR ']\nReproduceStatementTypes[Reproduce.DML]  = ['INSERT', 'UPSERT', 'UPDATE', 'DELETE', 'TRUNCATE']\nReproduceStatementTypes[Reproduce.DML].extend(ReproduceStatementTypes[Reproduce.DDL])\nReproduceStatementTypes[Reproduce.CTE]  = ['WITH']\nReproduceStatementTypes[Reproduce.CTE].extend(ReproduceStatementTypes[Reproduce.DML])\nReproduceStatementTypes[Reproduce.ALL]  = ['']    # any statement, including SELECT\n### print \"DEBUG: ReproduceStatementTypes:\", str(ReproduceStatementTypes)\n# Define which Exceptions (or other error messages) should be flagged as 'fatal'",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "ReproduceStatementTypes[Reproduce.NONE]",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "ReproduceStatementTypes[Reproduce.NONE] = []\nReproduceStatementTypes[Reproduce.DDL]  = ['CREATE', 'DROP', 'ALTER', 'PARTITION', 'DR ']\nReproduceStatementTypes[Reproduce.DML]  = ['INSERT', 'UPSERT', 'UPDATE', 'DELETE', 'TRUNCATE']\nReproduceStatementTypes[Reproduce.DML].extend(ReproduceStatementTypes[Reproduce.DDL])\nReproduceStatementTypes[Reproduce.CTE]  = ['WITH']\nReproduceStatementTypes[Reproduce.CTE].extend(ReproduceStatementTypes[Reproduce.DML])\nReproduceStatementTypes[Reproduce.ALL]  = ['']    # any statement, including SELECT\n### print \"DEBUG: ReproduceStatementTypes:\", str(ReproduceStatementTypes)\n# Define which Exceptions (or other error messages) should be flagged as 'fatal'\n# errors (meaning that SqlCoverage should fail); and which as 'non-fatal' errors",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "FatalExceptionTypes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "FatalExceptionTypes = ['NullPointerException',\n                       'IndexOutOfBoundsException',\n                       'AssertionError',\n                       'unexpected internal error occurred',\n                       'Please contact VoltDB at support'\n                       ]\n# The first 4 of these are experimental; we have yet to see any of them:\nNonfatalExceptionTypes = ['ClassCastException',\n                          'SAXParseException',\n                          'VoltTypeException',",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "NonfatalExceptionTypes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "NonfatalExceptionTypes = ['ClassCastException',\n                          'SAXParseException',\n                          'VoltTypeException',\n                          'ERROR: IN: NodeSchema',\n                          # This is sometimes returned by PostgreSQL:\n                          'timeout: procedure call took longer than 5 seconds',\n                          # This is sometimes returned by HSqlDB:\n                          'unsupported internal operation'\n                          ]\n# Rejected idea (happens frequently in advanced-scalar-set-subquery):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "AllExceptionTypes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "peekOfCode": "AllExceptionTypes = []\nAllExceptionTypes.extend(FatalExceptionTypes)\nAllExceptionTypes.extend(NonfatalExceptionTypes)\ndef highlight(s, flag):\n    if not isinstance(s, basestring):\n        s = str(s)\n    return flag and '<span style=\"color:red\">%s**</span>' % (s) or s\ndef as_html_unicode_string(s):\n    if isinstance(s, list):\n        return '[' + \", \".join(as_html_unicode_string(x) for x in s) + ']'",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLCoverageReport",
        "documentation": {}
    },
    {
        "label": "IntValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class IntValueGenerator:\n    \"\"\"This is the base generator for integers.\n       Typically, integer values would be specified as, e.g., _value[int:0,10],\n       which would yield a small number of random values (two, by default)\n       between 0 and 10 (inclusive). However, it is also possible to specify a\n       count, e.g., _value[int:0,10;5] would yield five random values between\n       0 and 10; or you can specify a step, e.g., _value[int:0,10,2] (note the\n       comma, rather than semi-colon) would yield the (non-random) values\n       0, 2, 4, 6, 8, 10; or, you may specify both, e.g., _value[int:6,12,3;9]\n       would yield the 9 (non-random) values 6, 9, 12, 8, 11, 7, 10, 6, 9;",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "ByteValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class ByteValueGenerator(IntValueGenerator):\n    \"\"\"This generates bytes.\n    \"\"\"\n    def __init__(self):\n        IntValueGenerator.__init__(self)\n        self.set_min_max(-127, 127)\nclass Int16ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 16-bit integers.\n    \"\"\"\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Int16ValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class Int16ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 16-bit integers.\n    \"\"\"\n    def __init__(self):\n        IntValueGenerator.__init__(self)\n        self.set_min_max(-32767, 32767)\nclass Int32ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 32-bit integers.\n    \"\"\"\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Int32ValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class Int32ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 32-bit integers.\n    \"\"\"\n    def __init__(self):\n        IntValueGenerator.__init__(self)\n        self.set_min_max(-2147483647, 2147483647)\nclass Int64ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 64-bit integers.\n    \"\"\"\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Int64ValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class Int64ValueGenerator(IntValueGenerator):\n    \"\"\"This generates 64-bit integers.\n    \"\"\"\n    def __init__(self):\n        IntValueGenerator.__init__(self)\n        self.set_min_max(-9223372036854775807, 9223372036854775807)\nclass FloatValueGenerator:\n    \"\"\"This generates 64-bit float.\n    \"\"\"\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "FloatValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class FloatValueGenerator:\n    \"\"\"This generates 64-bit float.\n    \"\"\"\n    def __init__(self):\n        self.__nullpct = 0\n    def set_nullpct(self, nullpct):\n        self.__nullpct = nullpct\n    def generate_values(self, count):\n        for i in xrange(count):\n            if self.__nullpct and (random.randint(0, 100) < self.__nullpct):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "DecimalValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class DecimalValueGenerator:\n    \"\"\"This generates Decimal values.\n    \"\"\"\n    def __init__(self):\n        # currently VoltDB values support 12 digits of precision.\n        # generate constant values to 3 digits of precision to give HSQL room\n        # to do exact math (multiplications) within 12 bits of precision.\n        # Otherwise, it complains rather than rounding.\n        decimal.getcontext().prec = 3\n        self.__nullpct = 0",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "PointValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class PointValueGenerator:\n    \"\"\"This generates (random) point (GEOGRAPHY_POINT) values.\n    \"\"\"\n    # It's annoying to have random numbers with 12 digits, so we limit it to\n    # a small number beyond the decimal point\n    DIGITS_BEYOND_DECIMAL_POINT = 2\n    def __init__(self):\n        decimal.getcontext().prec = PointValueGenerator.DIGITS_BEYOND_DECIMAL_POINT\n        self.__nullpct = 0\n        # By default, random points can be anywhere on Earth",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "PolygonValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class PolygonValueGenerator:\n    \"\"\"This generates (random) polygon (GEOGRAPHY) values.\n    \"\"\"\n    # It's annoying to have random numbers with 12 digits, so we limit it to\n    # a reasonable number beyond the decimal point, but not too small since\n    # too much rounding can cause invalid polygons\n    DIGITS_BEYOND_DECIMAL_POINT = 6\n    def __init__(self):\n        decimal.getcontext().prec = PolygonValueGenerator.DIGITS_BEYOND_DECIMAL_POINT\n        self.__nullpct = 0",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "StringValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class StringValueGenerator:\n    \"\"\"This generates strings.\n    \"\"\"\n    # Define the ASCII-only alphabet, to be used to generate strings\n    ALPHABET = u\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n    # For the extended, non-ASCII alphabet, add the letter e with various accents\n    EXTENDED_ALPHABET = ALPHABET + u'\\u00e9\\u00e8\\u00ea\\u00eb'\n    # Add some (upper & lower case) Greek characters (that do not resemble Latin letters)\n    EXTENDED_ALPHABET += u'\\u0393\\u0394\\u03b1\\u03b2'\n    # Add some (upper & lower case) Cyrillic (e.g. Russian) characters (that do not resemble Latin letters)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "VarbinaryValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class VarbinaryValueGenerator:\n    \"\"\"This generates byte strings expressed as pairs of hex digits.\n    \"\"\"\n    HEXDIGIT = u\"0123456789ABCDEF\"\n    def __init__(self):\n        self.__nullpct = 0\n    def set_nullpct(self, nullpct):\n        self.__nullpct = nullpct\n    def generate_values(self, count, length = 17):\n        for i in xrange(count):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "TimestampValueGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class TimestampValueGenerator:\n    \"\"\"This generates timestamps in a reasonable range.\n    \"\"\"\n    #The MIN_MILLIS_SINCE_EPOCH is the lower bound of the generator, and its timestamp is\n    #1843-03-31 11:57:18.000000. The MAX_MILLIS_SINCE_EPOCH is the upper bound of the generator,\n    #and its timestamp is 2027-01-15 03:00:00.000000. Negative number is to generate timestamp\n    #prior to the unix epoch.\n    MIN_MILLIS_SINCE_EPOCH = -3000000000\n    MAX_MILLIS_SINCE_EPOCH = 1800000000\n    def __init__(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "BaseGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class BaseGenerator:\n    \"\"\"This is the base class for all non-value generators (operator generator, column generator, etc.).\n    \"\"\"\n    def __init__(self, token):\n        global fn_generator\n        self.__token = token\n        self.fn_gen = fn_generator\n        self.__fn = None\n        self.__label = None\n        self.values = []",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "TableGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class TableGenerator(BaseGenerator):\n    \"\"\"This replaces occurrences of token \"_table\" with a schema table name.\n       For each statement, each of the tables from the current schema are bound to one of\n       these _table generators in sequence to purposely avoid accidental repeats (self-joins).\n       Occurrences of the same table name within a statement should be worked around via SQL aliases.\n    \"\"\"\n    def __init__(self):\n        BaseGenerator.__init__(self, \"_table\")\n    def configure_from_schema(self, schema, prior_generators):\n        self.values = schema.get_tables()",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "ColumnGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class ColumnGenerator(BaseGenerator):\n    \"\"\"This replaces occurrences of token _variable with a column name.\n       Within a statement, intended occurrences of the same column name must use the same '#label'.\n       Attributes only matter on the first occurence of \"_variable\" for a given label.\n       As a convenience, forward references can use the __[#label] syntax instead of _variable[#label]\n       to defer locking in attribute settings until a later _variable occurrence.\n       The column name is selected from the schema columns of any/all tables in the schema.\n       As a result, inclusion of tables that define different column names in a single schema can\n       result in test runs that mostly test error cases that reference undefined columns on\n       particular tables.",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "SymbolGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class SymbolGenerator(BaseGenerator):\n    \"\"\"This replaces occurrences of token _symbol with a piece of text, such as a function name\n       or a comparison operator.\n       Within a statement, intended occurrences of the same symbol must use the same '#label'.\n       Attributes only matter on the first occurrence of \"_symbol\" for a given label.\n       As a convenience, forward references can use the __[#label] syntax instead of _symbol[#label]\n       to defer locking in attribute settings until a later _symbol occurrence.\n    \"\"\"\n    def __init__(self):\n        BaseGenerator.__init__(self, \"_symbol\")",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "ConstantGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class ConstantGenerator(BaseGenerator):\n    \"\"\"This replaces a variable with an actual constant value.\n    \"\"\"\n    TYPES = {\"int\": IntValueGenerator,\n             \"byte\": ByteValueGenerator,\n             \"int16\": Int16ValueGenerator,\n             \"int32\": Int32ValueGenerator,\n             \"int64\": Int64ValueGenerator,\n             \"float\": FloatValueGenerator,\n             \"string\": StringValueGenerator,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "IdGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class IdGenerator(BaseGenerator):\n    \"\"\"This replaces _id with a counter value unique to the entire run\n       (at least unless/until reset with the 'initialize' class method).\n    \"\"\"\n    counter = 1\n    def __init__(self):\n        BaseGenerator.__init__(self, \"_id\")\n    def prepare_params(self, attribute_groups):\n        pass\n    def next_param(self):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "LiteralGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class LiteralGenerator:\n    \"\"\"This generates a piece of literal query text,\n       usually as one of multiple choices for a MacroGenerator\n    \"\"\"\n    def __init__(self, literal):\n        self.__literal = literal\n    def generate_text(self):\n        yield self.__literal\nclass MacroGenerator:\n    \"\"\"This generates pieces of literal text chosen non-randomly in turn from a list of",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "MacroGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class MacroGenerator:\n    \"\"\"This generates pieces of literal text chosen non-randomly in turn from a list of\n       LiteralGenerator snippets that were added to the macro generator using the generator\n       macro building syntax:\n       {@name |= \"one option\"}\n       {@name |= \"another option\"}\n    \"\"\"\n    def __init__(self):\n        self.__choices = []\n    def add_choice(self, generator_list):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Schema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class Schema:\n    SUPERTYPES = {\n        \"byte\":      (\"byte\",  \"int\", \"numeric\", \"\"),\n        \"int16\":     (\"int16\", \"int\", \"numeric\", \"\"),\n        \"int32\":     (\"int32\", \"int\", \"numeric\", \"\"),\n        \"int64\":     (\"int64\", \"int\", \"numeric\", \"\"),\n        \"float\":     (\"float\",        \"numeric\", \"\"),\n        \"decimal\":   (\"decimal\",      \"numeric\", \"\"),\n        \"string\":    (\"string\",    \"nonnumeric\", \"\"),\n        \"varbinary\": (\"varbinary\", \"nonnumeric\", \"\"),",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class Template:\n    def __init__(self, **kwargs):\n        self.__lines = []\n        self.__dml = None\n        self.__query = None\n        if 'filename' in kwargs:\n            self.__lines = self.__init_from_file(kwargs['filename'])\n        elif 'lines' in kwargs:\n            self.__lines = kwargs['lines']\n        else:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "SQLGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "class SQLGenerator:\n    def __init__(self, catalog, template, subversion_generation, ascii_only):\n        StringValueGenerator.set_ascii_only(ascii_only)\n        self.__subversion_generation = subversion_generation\n        # Reset the counters\n        IdGenerator.initialize(0)\n        if isinstance(catalog, Schema):\n            self.__schema = catalog\n        else:\n            self.__schema = Schema(filename=catalog)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "field_name_generator",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "def field_name_generator():\n    i = 0\n    while True:\n        yield \"{field_%d}\" % (i)\n        i += 1\nfn_generator = field_name_generator()\nclass IntValueGenerator:\n    \"\"\"This is the base generator for integers.\n       Typically, integer values would be specified as, e.g., _value[int:0,10],\n       which would yield a small number of random values (two, by default)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "UTF8Writer",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "UTF8Writer = codecs.getwriter('utf8')\nsys.stdout = UTF8Writer(sys.stdout)\nCOUNT = 2                       # number of random values to generate by default\nALLOW_SELF_JOIN = True\ndef field_name_generator():\n    i = 0\n    while True:\n        yield \"{field_%d}\" % (i)\n        i += 1\nfn_generator = field_name_generator()",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "sys.stdout = UTF8Writer(sys.stdout)\nCOUNT = 2                       # number of random values to generate by default\nALLOW_SELF_JOIN = True\ndef field_name_generator():\n    i = 0\n    while True:\n        yield \"{field_%d}\" % (i)\n        i += 1\nfn_generator = field_name_generator()\nclass IntValueGenerator:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "COUNT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "COUNT = 2                       # number of random values to generate by default\nALLOW_SELF_JOIN = True\ndef field_name_generator():\n    i = 0\n    while True:\n        yield \"{field_%d}\" % (i)\n        i += 1\nfn_generator = field_name_generator()\nclass IntValueGenerator:\n    \"\"\"This is the base generator for integers.",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "ALLOW_SELF_JOIN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "ALLOW_SELF_JOIN = True\ndef field_name_generator():\n    i = 0\n    while True:\n        yield \"{field_%d}\" % (i)\n        i += 1\nfn_generator = field_name_generator()\nclass IntValueGenerator:\n    \"\"\"This is the base generator for integers.\n       Typically, integer values would be specified as, e.g., _value[int:0,10],",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "fn_generator",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "peekOfCode": "fn_generator = field_name_generator()\nclass IntValueGenerator:\n    \"\"\"This is the base generator for integers.\n       Typically, integer values would be specified as, e.g., _value[int:0,10],\n       which would yield a small number of random values (two, by default)\n       between 0 and 10 (inclusive). However, it is also possible to specify a\n       count, e.g., _value[int:0,10;5] would yield five random values between\n       0 and 10; or you can specify a step, e.g., _value[int:0,10,2] (note the\n       comma, rather than semi-colon) would yield the (non-random) values\n       0, 2, 4, 6, 8, 10; or, you may specify both, e.g., _value[int:6,12,3;9]",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.SQLGenerator",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "class Config:\n    def __init__(self, filename):\n        fd = open(filename, \"r\")\n        self.__content = fd.read()\n        fd.close()\n        self.__config = eval(self.__content.strip())\n    def get_configs(self):\n        return self.__config.keys()\n    def get_config(self, config_name):\n        return self.__config[config_name]",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "minutes_colon_seconds",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def minutes_colon_seconds(seconds):\n    return re.sub(\"^0:\", \"\", str(datetime.timedelta(0, round(seconds))), 1)\ndef print_seconds(seconds=0, message_end=\"\", message_begin=\"Total   time: \",\n                  include_current_time=False):\n    \"\"\" Prints, and returns, a message containing the specified number of\n    seconds, first in a minutes:seconds format (e.g. \"01:02\", or \"1:43:48\"),\n    then just the exact number of seconds in parentheses, e.g.,\n    \"1:02 (61.9 seconds)\", preceded by the 'message_begin' and followed by\n    'message_end'. Optionally, if 'include_current_time' is True, the current\n    time (in seconds since January 1, 1970) is also printed, in brackets, e.g.,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "print_seconds",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def print_seconds(seconds=0, message_end=\"\", message_begin=\"Total   time: \",\n                  include_current_time=False):\n    \"\"\" Prints, and returns, a message containing the specified number of\n    seconds, first in a minutes:seconds format (e.g. \"01:02\", or \"1:43:48\"),\n    then just the exact number of seconds in parentheses, e.g.,\n    \"1:02 (61.9 seconds)\", preceded by the 'message_begin' and followed by\n    'message_end'. Optionally, if 'include_current_time' is True, the current\n    time (in seconds since January 1, 1970) is also printed, in brackets, e.g.,\n    \"1:02 (61.9 seconds) [at 1408645826.68], \", which is useful for debugging\n    purposes.",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "print_elapsed_seconds",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def print_elapsed_seconds(message_end=\"\", prev_time=-1,\n                          message_begin=\"Elapsed time: \"):\n    \"\"\"Computes, returns and prints the difference (in seconds) between the\n    current system time and a previous time, which is either the specified\n    'prev_time' or, if that is negative (or unspecified), the previous time\n    at which this function was called. The printed message is preceded by\n    'message_begin' and followed by 'message_end'; the elapsed time is printed\n    in a minutes:seconds format, with the exact number of seconds in parentheses,\n    e.g., 61.9 seconds would be printed as \"01:02 (61.9 seconds), \".\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "run_once",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def run_once(name, command, statements_path, results_path,\n             submit_verbosely, testConfigKit, precision):\n    print \"Running \\\"run_once\\\":\"\n    print \"  name: %s\" % (name)\n    print \"  command: %s\" % (command)\n    print \"  statements_path: %s\" % (statements_path)\n    print \"  results_path: %s\" % (results_path)\n    if precision:\n        print \"  precision: %s\" % (precision)\n    sys.stdout.flush()",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_max_mismatches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_max_mismatches(comparison_database, suite_name):\n    \"\"\"Returns the maximum number of acceptable mismatches, i.e., the number of\n    'known' failures for VoltDB to match the results of the comparison database\n    (HSQL or PostgreSQL), which is normally zero; however, there are sometimes\n    a few exceptions, e.g., for queries that are not supported by PostgreSQL.\n    \"\"\"\n    max_mismatches = 0\n    # Kludge to not fail for known issues, when running against PostgreSQL\n    # (or the PostGIS extension of PostgreSQL)\n    if comparison_database.startswith('Post'):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_config_path",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_config_path(basedir, config_key, config_value):\n    \"\"\"Returns the correct path to a specific (ddl, normalizer, schema, or\n    template) file, given its config 'key' and 'value'. The 'key' will be one\n    of 'ddl', 'normalizer', 'schema', or 'template', the last of which is the\n    more complicated case, requiring us to check the various subdirectories.\n    \"\"\"\n    for subdir in os.walk(os.path.join(basedir, config_key)):\n        filename = os.path.join(subdir[0], config_value)\n        if os.path.isfile(filename):\n            return os.path.abspath(filename)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "run_config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def run_config(suite_name, config, basedir, output_dir, random_seed,\n               report_invalid, report_all, max_detail_files, reproducer,\n               generate_only, subversion_generation, submit_verbosely,\n               ascii_only, args, testConfigKit):\n    # Store the current, initial system time (in seconds since January 1, 1970)\n    time0 = time.time()\n    precision = 0\n    within_minutes = 0\n    for key in config.iterkeys():\n        if key == \"precision\":",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_html_table_element_color",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_html_table_element_color(value, error_below, strong_warn_below, warn_below,\n                                 error_above, strong_warn_above, warn_above, use_gray):\n    color = ''\n    if (use_gray):\n        color = ' bgcolor=#D3D3D3'  # gray\n    elif (value < error_below or value > error_above):\n        color = ' bgcolor=#FF0000'  # red\n    elif (value < strong_warn_below or value > strong_warn_above):\n        color = ' bgcolor=#FFA500'  # orange\n    elif (value < warn_below or value > warn_above):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_numerical_html_table_element",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_numerical_html_table_element(value, error_below=-1, strong_warn_below=0, warn_below=0,\n                                     error_above=1000000000, strong_warn_above=1000000, warn_above=100000,  # 1 billion, 1 million, 100,000\n                                     use_gray=False):\n    return ('<td align=right%s>%d</td>' %\n            (get_html_table_element_color(value, error_below, strong_warn_below, warn_below,\n                                          error_above, strong_warn_above, warn_above, use_gray),\n             value) )\ndef get_time_html_table_element(seconds, error_below=0, strong_warn_below=0, warn_below=0,\n                                error_above=28800, strong_warn_above=3600, warn_above=600,  # 8 hours, 1 hour, 10 minutes\n                                use_gray=False):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_time_html_table_element",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_time_html_table_element(seconds, error_below=0, strong_warn_below=0, warn_below=0,\n                                error_above=28800, strong_warn_above=3600, warn_above=600,  # 8 hours, 1 hour, 10 minutes\n                                use_gray=False):\n    return ('<td align=right%s>%s</td>' %\n            (get_html_table_element_color(seconds, error_below, strong_warn_below, warn_below,\n                                          error_above, strong_warn_above, warn_above, use_gray),\n             minutes_colon_seconds(seconds)) )\ndef get_voltcompiler(basedir):\n    key = \"voltdb\"\n    (head, tail) = basedir.split(key)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_voltcompiler",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_voltcompiler(basedir):\n    key = \"voltdb\"\n    (head, tail) = basedir.split(key)\n    voltcompiler = head + key + \"/bin/voltcompiler\"\n    if(os.access(voltcompiler, os.X_OK)):\n        return voltcompiler\n    else:\n        return None\ndef get_hostinfo(options):\n    if options.hostname == None:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "get_hostinfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def get_hostinfo(options):\n    if options.hostname == None:\n        hostname = defaultHost\n    else:\n        hostname = options.hostname\n    if options.hostport == None:\n        hostport = defaultPort\n    else:\n        if(options.hostport.isdigit()):\n            hostport = int(options.hostport)",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "create_catalogFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def create_catalogFile(voltcompiler, projectFile, catalogFilename):\n    catalogFile = \"/tmp/\" + catalogFilename + \".jar\"\n    cmd = voltcompiler + \" /tmp \" + projectFile + \" \" + catalogFile\n    call(cmd, shell=True)\n    if not os.path.exists(catalogFile):\n        catalogFile = None\n    return catalogFile\ndef create_projectFile(ddl, projFilename):\n    proj = Element('project')\n    db = SubElement(proj, 'database')",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "create_projectFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def create_projectFile(ddl, projFilename):\n    proj = Element('project')\n    db = SubElement(proj, 'database')\n    schemas = SubElement(db, 'schemas')\n    schema = SubElement(schemas, 'schema', {'path':ddl})\n    thisProjectFile = \"/tmp/\" + projFilename + \"4projectFile.xml\"\n    fo = open(thisProjectFile, \"wb\")\n    fo.write(prettify(proj))\n    fo.close()\n    if not os.path.exists(thisProjectFile):",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "create_deploymentFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def create_deploymentFile(options):\n    kfactor = options.kfactor\n    sitesperhost = options.sitescount\n    hostcount = options.hostcount\n    deployment = Element('deployment')\n    cluster = SubElement(deployment, 'cluster',\n            {'kfactor':kfactor, 'sitesperhost':sitesperhost, 'hostcount':hostcount})\n    httpd = SubElement(deployment, 'httpd', {'port':\"8080\"})\n    jsonapi = SubElement(httpd, 'jsonapi', {'enabled':\"true\"})\n    deploymentFile = \"/tmp/deploymentFile.xml\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "create_testConfigKits",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def create_testConfigKits(options, basedir):\n    testConfigKits = {}\n    voltcompiler = get_voltcompiler(basedir)\n    if voltcompiler == None:\n        print >> sys.stderr, \"Cannot find the executable voltcompiler!\"\n        sys.exit(3)\n    else:\n        testConfigKits[\"voltcompiler\"] = voltcompiler\n    deploymentFile = create_deploymentFile(options)\n    if deploymentFile == None:",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "description": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "peekOfCode": "def usage():\n    print sys.argv[0], \"config output_dir command\"\n    print \"\"\"\nconfig\\t\\tThe configuration file containing the filenames of the schema,\n\\t\\tthe template, and the normalizer.\noutput_dir\\tThe output directory for the HTML reports.\ncommand\\t\\tThe command to launch the server.\nThe schema is merely a Python dictionary which describes the name of the tables\nand the column names and types in those tables. The following is an example of a\nschema description,",
        "detail": "github.com.voltdb.voltdb.tests.sqlcoverage.sql_coverage_test",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "class TimeoutException(Exception):\n    \"\"\"A custom exception class used for timeout when reading from\n    the sqlcmd process.\n    \"\"\"\n    pass\ndef timeout_handler(signum, frame):\n    \"\"\"A custom signal handler function, used for timeout when reading from\n    the sqlcmd process.\n    \"\"\"\n    raise TimeoutException",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "get_grammar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def get_grammar(grammar={}, grammar_filename='sql-grammar.txt', grammar_dir='.'):\n    \"\"\"Reads the SQL grammar from the specified file, in the specified directory.\n    \"\"\"\n    global debug\n    grammar_path = os.path.abspath(os.path.join(grammar_dir, grammar_filename))\n    grammar_file = open(grammar_path, 'r')\n    while True:\n        grammar_rule = grammar_file.readline()\n        # No more grammar rules found, we're done\n        if not grammar_rule:",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "get_one_sql_statement",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def get_one_sql_statement(grammar, sql_statement_type='sql-statement', max_depth=5,\n                          optional_percent=50, symbol_reuse={}, final_statement=True):\n    \"\"\"Randomly generates one SQL statement of the specified type, using the\n       specified maximum depth (meaning that recursive definitions are limited\n       to that depth) and optional percent (meaning that option clauses, in\n       brackets, have that percentage chance of being used).\n    \"\"\"\n    global symbol_depth, symbol_order, options, debug\n    sql = '{' + sql_statement_type + '}'\n    max_count = 10000",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "add_suffix_to_file_name",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def add_suffix_to_file_name(file_name, suffix=None):\n    \"\"\"Adds the specified suffix, if any, either to the end of the specified\n    file_name; or, if the file_name has an \"extension\" starting with a dot ('.'),\n    then just in front of the dot.\n    \"\"\"\n    result = file_name\n    if suffix:\n        ext_index = str(file_name).rfind('.')\n        if ext_index > -1:\n            file_name = file_name[:ext_index] + suffix + file_name[ext_index:]",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "print_file_tail_and_errors",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def print_file_tail_and_errors(from_file, to_file, number_of_lines=50):\n    \"\"\"Print a 'tail' of the last 'number_of_lines' of the 'from_file', to the\n    'to_file' (typically the summary file); and a 'grep' of the number of\n    various types of error messages. Also, if (Java) Exceptions or other ERRORs\n    are found in the file, print 2 files, containing a list of all the distinct\n    errors (1 file for Java Exceptions, 1 for ERROR messages), and how many\n    times they appeared.\n    \"\"\"\n    command = 'tail -n ' + str(number_of_lines) + ' ' + from_file\n    if debug > 4:",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "get_last_n_sql_statements",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def get_last_n_sql_statements(last_n_sql_stmnts, include_responses=True,\n                              include_times=True, include_current_time=False):\n    \"\"\"Returns a (string) message, containing the last n SQL statements sent to\n    sqlcmd; and, optionally, the last n responses received from sqlcmd; based on\n    the current contents of last_n_sql_stmnts, where n is its size.\n    \"\"\"\n    result = '\\n'.join(sql['sql'] for sql in last_n_sql_stmnts) + '\\n'\n    if include_responses:\n        result = '\\n    sql statements (or other commands):\\n' + result \\\n               + '\\n    corresponding sqlcmd output:' \\",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "print_summary",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def print_summary(error_message=''):\n    \"\"\"Prints various summary messages, to STDOUT, and to the sqlcmd summary\n    file (if specified and not STDOUT); also, closes those output files, as\n    well as the SQL statement output file (i.e., sqlcmd input file), and the\n    sqlcmd output file (if specified and not STDOUT). The summary messages may\n    include: tails of the VoltDB server log file and/or of the VoltDB server's\n    console (i.e., its STDOUT and STDERR); the total amount of execution time;\n    the number and percent of valid and invalid SQL statements of various types,\n    and their totals; and an error message, if one was specified, which usually\n    means that execution was halted prematurely, due a VoltDB server crash. Any",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "increment_sql_statement_indexes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def increment_sql_statement_indexes(index1, index2):\n    \"\"\"Increment the value of 'count_sql_statements' (a 2D dictionary, i.e.,\n    a dict of dict) for the specified indexes; if there is no such value,\n    initialize it to 1.\n    \"\"\"\n    global count_sql_statements\n    if not count_sql_statements.get(index1):\n        count_sql_statements[index1] = {}\n    if count_sql_statements[index1].get(index2):\n        count_sql_statements[index1][index2] += 1",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "increment_sql_statement_type",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def increment_sql_statement_type(sql=None, num_chars_in_sql_type=6, validity=None,\n                                 incrementTotal=True, num_chars_in_sub_type=None,\n                                 sql_types_to_use_sub_type='CREATE,DROP,WITH'):\n    \"\"\"Increment the value of 'count_sql_statements' (a 2D dictionary, i.e.,\n    a dict of dict), both for the 'total', 'total' element and for the 'type',\n    if specified (i.e., for the type, 'total' element); also, if the 'validity'\n    is specified (normally equal to 'valid' or 'invalid'), increment those\n    values as well (i.e., the 'total', validity and type, validity elements).\n    Also, certain statement types (e.g. CREATE) have various sub-types (e.g.\n    CREATE TABLE, CREATE VIEW, CREATE INDEX, CREATE PROCEDURE); in those cases,",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "increment_sql_statement_types",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def increment_sql_statement_types(type=None, num_chars_in_sql_type=6, validity=None,\n                                  sql_contains_echo_substring=False, incrementTotal=True,\n                                  echo_type=' [echo'):\n    \"\"\"Increment the value of 'count_sql_statements' (a 2D dictionary, i.e.,\n    a dict of dict), both for the 'total', 'total' element and for the 'type',\n    if specified (i.e., for the type, 'total' element); also, if the 'validity'\n    is specified (normally equal to 'valid' or 'invalid'), increment those\n    values as well (i.e., the 'total', validity and type, validity elements).\n    TODO\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "timeout_handler",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def timeout_handler(signum, frame):\n    \"\"\"A custom signal handler function, used for timeout when reading from\n    the sqlcmd process.\n    \"\"\"\n    raise TimeoutException\ndef formatted_time(seconds_since_epoch):\n    \"\"\"Takes a time representing the number of seconds since the beginning of\n    the epoch and returns that time as a nicely formatted string.\n    \"\"\"\n    return strftime('%Y-%m-%d %H:%M:%S', localtime(seconds_since_epoch)) + ' (' + str(seconds_since_epoch) + ')'",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "formatted_time",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def formatted_time(seconds_since_epoch):\n    \"\"\"Takes a time representing the number of seconds since the beginning of\n    the epoch and returns that time as a nicely formatted string.\n    \"\"\"\n    return strftime('%Y-%m-%d %H:%M:%S', localtime(seconds_since_epoch)) + ' (' + str(seconds_since_epoch) + ')'\ndef odd_num_quote_characters(sql, chars=\"'\"):\n    \"\"\"Check whether the specified string contains an odd number of any of the\n    specified characters; by default, only the single-quote character (') is\n    checked; returns True or False.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "odd_num_quote_characters",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def odd_num_quote_characters(sql, chars=\"'\"):\n    \"\"\"Check whether the specified string contains an odd number of any of the\n    specified characters; by default, only the single-quote character (') is\n    checked; returns True or False.\n    \"\"\"\n    for ch in chars:\n        if sql.count(ch) % 2:\n            if debug > 2:\n                print \"\\nDEBUG: in odd_num_quote_characters, found odd number \"+str(sql.count(ch))+\" for char '\"+str(ch)+\"'.\"\n            return True",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "print_sql_statement",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def print_sql_statement(sql, num_chars_in_sql_type=6):\n    \"\"\"Print the specified SQL statement (sql), to the SQL output file (which may\n    be STDOUT); and, if the sqlcmd option was specified, pass that SQL statement\n    to sqlcmd, and print its output in the sqlcmd output file (which may be\n    STDOUT).\n    \"\"\"\n    global sql_output_file, sqlcmd_output_file, echo_output_file, sqlcmd_proc, \\\n        last_n_sql_statements, options, echo_substrings, symbol_depth, symbol_order, \\\n        known_error_messages, known_valid_show_responses, hanging_sql_commands, \\\n        find_in_log_output_files, debug",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "generate_sql_statements",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "def generate_sql_statements(sql_statement_type, num_sql_statements=0,\n                            max_save_sql_statements=1000, max_save_sqlcmd_outputs=1000,\n                            delete_statement_type='truncate-statement', delete_statement_number=10):\n    \"\"\"Generate and print the specified number of SQL statements (num_sql_statements),\n    of the specified type (sql_statement_type); the (sql and sqlcmd) output files\n    should each contain a maximum of the specified number of SQL statements\n    (max_save_sql_statements and max_save_sqlcmd_outputs, respectively), meaning\n    that each time we reach one of those numbers, the respective output file is\n    deleted and begun again (with 0 meaning no limit).\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "__SYMBOL_REF_REUSE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "__SYMBOL_REF_REUSE = re.compile(r\"{(?P<symbolname>[\\w-]*):(?P<reusenames>[\\w,-]+)(:(?P<repeatpercent>[\\d-]+))?}\")\n__SYMBOL_REF_EXIST = re.compile(r\"{(?P<symbolname>[\\w-]*);(?P<existingnames>[\\w,-]+)(;'(?P<separator>.*)')?}\")\n__OPTIONAL         = re.compile(r\"(?<!\\\\)\\[(?P<optionaltext>[^\\[\\]]*[^\\[\\]\\\\]?)\\]\")\n__WEIGHTED_XOR     = re.compile(r\"\\s+(?P<weight>\\d*)(?P<xor>\\|)\\s+\")\n__XOR              = ' | '\n__DATE_TIME        = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}\")\ndef get_grammar(grammar={}, grammar_filename='sql-grammar.txt', grammar_dir='.'):\n    \"\"\"Reads the SQL grammar from the specified file, in the specified directory.\n    \"\"\"\n    global debug",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "__SYMBOL_REF_EXIST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "description": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "peekOfCode": "__SYMBOL_REF_EXIST = re.compile(r\"{(?P<symbolname>[\\w-]*);(?P<existingnames>[\\w,-]+)(;'(?P<separator>.*)')?}\")\n__OPTIONAL         = re.compile(r\"(?<!\\\\)\\[(?P<optionaltext>[^\\[\\]]*[^\\[\\]\\\\]?)\\]\")\n__WEIGHTED_XOR     = re.compile(r\"\\s+(?P<weight>\\d*)(?P<xor>\\|)\\s+\")\n__XOR              = ' | '\n__DATE_TIME        = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3}\")\ndef get_grammar(grammar={}, grammar_filename='sql-grammar.txt', grammar_dir='.'):\n    \"\"\"Reads the SQL grammar from the specified file, in the specified directory.\n    \"\"\"\n    global debug\n    grammar_path = os.path.abspath(os.path.join(grammar_dir, grammar_filename))",
        "detail": "github.com.voltdb.voltdb.tests.sqlgrammar.sql_grammar_generator",
        "documentation": {}
    },
    {
        "label": "do_parse",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def do_parse(host_string, default_port, expected_host, expected_port):\n    global count\n    count = count + 1\n    report(\"** Test case #%d: '%s' (default port %s)\" % (count, host_string, default_port))\n    result = parse_hosts(host_string=host_string, default_port=default_port)\n    result_host = result[0].host\n    result_port = result[0].port\n    report(\"Host='%s', expected='%s', %s\" % (result_host, expected_host, comparison(result_host, expected_host)))\n    report(\"Port='%s', expected='%s', %s\" % (result_port, expected_port, comparison(result_port, expected_port)))\n    return result_host == expected_host and result_port == expected_port",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "comparison",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def comparison(a, b):\n    return 'same' if a == b else 'not same'\ndef test_parse(host_string, default_port, expected_host, expected_port):\n    try:\n        if do_parse(host_string, default_port, expected_host, expected_port):\n            succeed()\n        else:\n            fail(\"Result does not match expectation\")\n    except SystemExit:\n        fail(\"Unexpected test abort\")",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "test_parse",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def test_parse(host_string, default_port, expected_host, expected_port):\n    try:\n        if do_parse(host_string, default_port, expected_host, expected_port):\n            succeed()\n        else:\n            fail(\"Result does not match expectation\")\n    except SystemExit:\n        fail(\"Unexpected test abort\")\n    except Exception as ex:\n        fail(\"Exception: %s\" % ex)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "test_abort",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def test_abort(host_string, default_port, expected_host, expected_port):\n    try:\n        do_parse(host_string, default_port, expected_host, expected_port)\n        fail(\"Test did not abort as expected\")\n    except SystemExit:\n        report('Test aborted as expected')\n        succeed()\n    except Exception as ex:\n        fail(\"Exception: %s\" % ex)\ndef succeed():",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "succeed",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def succeed():\n    global succeeded\n    succeeded = succeeded + 1\n    report('** Test #%d succeeded\\n' % count)\ndef fail(msg):\n    global failed\n    failed = failed + 1\n    report(msg)\n    report('** Test #%d failed\\n' % count)\ndef report(msg):",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "fail",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def fail(msg):\n    global failed\n    failed = failed + 1\n    report(msg)\n    report('** Test #%d failed\\n' % count)\ndef report(msg):\n    print(msg);\ndef main():\n    print((sys.argv))\n    # These are all legitimate address expressions",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "report",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def report(msg):\n    print(msg);\ndef main():\n    print((sys.argv))\n    # These are all legitimate address expressions\n    test_parse('127.0.0.1:21212', None, '127.0.0.1', 21212)\n    test_parse('127.0.0.1', 21212, '127.0.0.1', 21212)\n    test_parse('[::1]:21212', None, '::1', 21212)\n    test_parse('[::1]', 21212, '::1', 21212)\n    test_parse('[::ffff:127.0.0.1]:21212', None, '::ffff:127.0.0.1', 21212)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "def main():\n    print((sys.argv))\n    # These are all legitimate address expressions\n    test_parse('127.0.0.1:21212', None, '127.0.0.1', 21212)\n    test_parse('127.0.0.1', 21212, '127.0.0.1', 21212)\n    test_parse('[::1]:21212', None, '::1', 21212)\n    test_parse('[::1]', 21212, '::1', 21212)\n    test_parse('[::ffff:127.0.0.1]:21212', None, '::ffff:127.0.0.1', 21212)\n    test_parse('[::ffff:127.0.0.1]', 21212, '::ffff:127.0.0.1', 21212)\n    # These all fail with unexpected syntax errors (which",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "count = 0\nsucceeded = 0\nfailed = 0\ndef do_parse(host_string, default_port, expected_host, expected_port):\n    global count\n    count = count + 1\n    report(\"** Test case #%d: '%s' (default port %s)\" % (count, host_string, default_port))\n    result = parse_hosts(host_string=host_string, default_port=default_port)\n    result_host = result[0].host\n    result_port = result[0].port",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "succeeded",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "succeeded = 0\nfailed = 0\ndef do_parse(host_string, default_port, expected_host, expected_port):\n    global count\n    count = count + 1\n    report(\"** Test case #%d: '%s' (default port %s)\" % (count, host_string, default_port))\n    result = parse_hosts(host_string=host_string, default_port=default_port)\n    result_host = result[0].host\n    result_port = result[0].port\n    report(\"Host='%s', expected='%s', %s\" % (result_host, expected_host, comparison(result_host, expected_host)))",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "failed",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "peekOfCode": "failed = 0\ndef do_parse(host_string, default_port, expected_host, expected_port):\n    global count\n    count = count + 1\n    report(\"** Test case #%d: '%s' (default port %s)\" % (count, host_string, default_port))\n    result = parse_hosts(host_string=host_string, default_port=default_port)\n    result_host = result[0].host\n    result_port = result[0].port\n    report(\"Host='%s', expected='%s', %s\" % (result_host, expected_host, comparison(result_host, expected_host)))\n    report(\"Port='%s', expected='%s', %s\" % (result_port, expected_port, comparison(result_port, expected_port)))",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.addrtest",
        "documentation": {}
    },
    {
        "label": "Opt",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "class Opt:\n    def __init__(self, pyname, javaname, datatype, ver):\n        self.pyname = pyname\n        self.javaname = javaname\n        self.datatype = datatype\n        self.ver = ver\n# alphabetical order please\nadd = Opt('add', 'enableadd', None, 2)\nadmin = Opt('admin', 'adminport', str, 2)\nclasses = Opt('classes', 'classes', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "TestsContainer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "class TestsContainer(unittest.TestCase):\n    longMessage = True\ndef make_test_function(haddiffs, description):\n    def test(self):\n        self.assertFalse(haddiffs, description)\n    return test\ndef run_unit_test(verb, opts, expected_opts, reportout, expectedOut=None, expectedErr=None):\n    stdout, stderr = run_voltcli(verb, opts, reportout)\n    haddiffs, description = compare_result(stdout, stderr, volt_verbs_mapping[verb], expected_opts, reportout,\n                                          expectedOut, expectedErr)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "make_test_function",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def make_test_function(haddiffs, description):\n    def test(self):\n        self.assertFalse(haddiffs, description)\n    return test\ndef run_unit_test(verb, opts, expected_opts, reportout, expectedOut=None, expectedErr=None):\n    stdout, stderr = run_voltcli(verb, opts, reportout)\n    haddiffs, description = compare_result(stdout, stderr, volt_verbs_mapping[verb], expected_opts, reportout,\n                                          expectedOut, expectedErr)\n    setattr(TestsContainer, 'test: {0}'.format(verb + \" \" + \" \".join(opts)), make_test_function(haddiffs, description))\n    return haddiffs",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "run_unit_test",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def run_unit_test(verb, opts, expected_opts, reportout, expectedOut=None, expectedErr=None):\n    stdout, stderr = run_voltcli(verb, opts, reportout)\n    haddiffs, description = compare_result(stdout, stderr, volt_verbs_mapping[verb], expected_opts, reportout,\n                                          expectedOut, expectedErr)\n    setattr(TestsContainer, 'test: {0}'.format(verb + \" \" + \" \".join(opts)), make_test_function(haddiffs, description))\n    return haddiffs\n# Execute the command.\ndef run_voltcli(verb, opts, reportout=None, cmd=['voltdb'], mode=['--dry-run'], environ=None, cwd=None):\n    command = cmd + [verb] + mode + opts\n    if reportout:",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "run_voltcli",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def run_voltcli(verb, opts, reportout=None, cmd=['voltdb'], mode=['--dry-run'], environ=None, cwd=None):\n    command = cmd + [verb] + mode + opts\n    if reportout:\n        reportout.write(\"Test python cli:\\n\\t\" + \" \".join([verb] + opts) + \"\\n\")\n    proc = subprocess.Popen(command,\n                            stdin=subprocess.PIPE,\n                            stdout=subprocess.PIPE,\n                            stderr=subprocess.STDOUT,\n                            cwd=cwd,\n                            env=environ)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "compare_result",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def compare_result(stdout, stderr, verb, opts, reportout, expectedOut=None, expectedErr=None):\n    output_str = sanitize(stdout).strip()\n    description = \"Generated java command line:\\n\\t\" + output_str + \"\\nTest Passed!\\n\\n\"\n    if expectedOut:\n        haddiffs = False\n        if expectedOut != stdout:\n            description = \"Generated stdout:\\n\" + stdout + \"\\n\" + \"does not match expected:\\n\" + expectedOut + \"\\nTest Failed!\\n\\n\"\n            haddiffs = True\n        else:\n            description = \"Generated expected stdout:\\n\" + stdout + \"Test Passed!\\n\\n\"",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "sanitize_replace",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def sanitize_replace(match):\n    # If `ignore` pattern does not contain subgroups, remove\n    # the whole match.\n    if not match.re.groups:\n        return \"\"\n    # Otherwise, remove subgroups.\n    spans = []\n    group_start = match.start()\n    for idx in range(match.re.groups):\n        start, end = match.span(idx + 1)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "sanitize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def sanitize(text):\n    # Remove portion of output matching ignore pattern\n    if ignore is True:\n        return \"\"\n    if not ignore:\n        return text\n    text = ignore_re.sub(sanitize_replace, text)\n    return text\ndef gen_config(mandatory_opts, all_ops, count, expected_opts={}):\n    opts = []",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "gen_config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def gen_config(mandatory_opts, all_ops, count, expected_opts={}):\n    opts = []\n    i = 1  # pseudo optional value\n    for opt in mandatory_opts + random.sample(all_ops, count):\n        if not opt.datatype:\n            o = '--' + opt.pyname\n            expected_opts[opt.javaname] = None\n        else:\n            o = '--' + opt.pyname + '=' + str(i)\n            expected_opts[opt.javaname] = str(i)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "test_java_opts_override",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def test_java_opts_override(verb = 'start', reportout = None):\n    haddiffs = False\n    override_env = dict(os.environ.copy(), **volt_override)\n    stdout, _ = run_voltcli(verb, [], environ=override_env)\n    m = ignore_re.match(stdout)\n    if m is None:\n        raise RuntimeError(\"No matches found in: '%s'\" % stdout)\n    matched_java_opts = m.group('java_opts')\n    reportout.write(\"Given: \" + \" \".join([k + '=' + v for k, v in list(volt_override.items())]) + \"\\n\" +\n                    \"Got JVM Options: \" + matched_java_opts + \"\\n\")",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "test_irregular_verbs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def test_irregular_verbs(reportout = None):\n    haddiffs = False\n    for v in volt_irregular_verbs:\n        for obj in objects:\n            for pos in options:\n                if pos == \"none\":\n                    clean_args = [obj.pyname]\n                    expected_opts = [volt_verbs_mapping[v], obj.javaname,]\n                else:\n                    expected_opts = [volt_verbs_mapping[v], obj.javaname, pos.javaname]",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "compare_irregular",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def compare_irregular(actual, expected, reportout):\n    \"\"\"\n        Follows the model already in place:\n        False means \"no differences\", aka match\n        True means \"differences\", aka doesn't match\n    \"\"\"\n    description = \"Generated java command line:\\n\\t\" + actual\n    if actual.strip() == \" \".join(expected).strip():\n        description += \"\\nTest Passed!\\n\\n\"\n        haddiffs = False",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "do_main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "def do_main():\n    parser = OptionParser()\n    parser.add_option(\"-o\", \"--report_file\", dest=\"report_file\",\n                      default=\"./voltverbstest.report\",\n                      help=\"report output file\")\n    (options, args) = parser.parse_args()\n    # generate output report: plain text\n    reportout = open(options.report_file, 'w+')\n    # test override of environment\n    haddiffs = test_java_opts_override(reportout=reportout)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_support_version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_support_version = [2]\n# regular verbs only here. more-or-less, if the python\n# 'voltdb' commands does not run the actual voltdb server,\n# it won't work in this list. see volt_irregular_verbs.\nvolt_verbs = {'init': 2,\n              'start': 2}\nvolt_verbs_mapping = {'check': 'check',\n                      'collect': 'collect',\n                      'get': 'get',\n                      'init': 'initialize',",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_verbs",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_verbs = {'init': 2,\n              'start': 2}\nvolt_verbs_mapping = {'check': 'check',\n                      'collect': 'collect',\n                      'get': 'get',\n                      'init': 'initialize',\n                      'mask': 'mask',\n                      'start': 'probe' }\n# create all the options\nclass Opt:",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_verbs_mapping",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_verbs_mapping = {'check': 'check',\n                      'collect': 'collect',\n                      'get': 'get',\n                      'init': 'initialize',\n                      'mask': 'mask',\n                      'start': 'probe' }\n# create all the options\nclass Opt:\n    def __init__(self, pyname, javaname, datatype, ver):\n        self.pyname = pyname",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "add = Opt('add', 'enableadd', None, 2)\nadmin = Opt('admin', 'adminport', str, 2)\nclasses = Opt('classes', 'classes', str, 2)\nclient = Opt('client', 'port', str, 2)\nconfig = Opt('config', 'deployment', str, 2)\ndays = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "admin",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "admin = Opt('admin', 'adminport', str, 2)\nclasses = Opt('classes', 'classes', str, 2)\nclient = Opt('client', 'port', str, 2)\nconfig = Opt('config', 'deployment', str, 2)\ndays = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "classes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "classes = Opt('classes', 'classes', str, 2)\nclient = Opt('client', 'port', str, 2)\nconfig = Opt('config', 'deployment', str, 2)\ndays = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "client = Opt('client', 'port', str, 2)\nconfig = Opt('config', 'deployment', str, 2)\ndays = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "config = Opt('config', 'deployment', str, 2)\ndays = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "days = Opt('days', 'days', int, 2)\ndrpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "drpublic",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "drpublic = Opt('drpublic', 'drpublic', str, 2)\ndryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "dryrun",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "dryrun = Opt('dry-run', 'dry-run', None, 2)\nexternalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "externalinterface",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "externalinterface = Opt('externalinterface', 'externalinterface', str, 2)\nforce = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "force",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "force = Opt('force', 'force', None, 2)\nhostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "hostcount",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "hostcount = Opt('count', 'hostcount', int, 2)\nhttp = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "http",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "http = Opt('http', 'httpport', str, 2)\ninternalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "internalinterface",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "internalinterface = Opt('internalinterface', 'internalinterface', str, 2)\ninternal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "internal",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "internal = Opt('internal', 'internalport', str, 2)\nlicensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "licensefile",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "licensefile = Opt('license', 'license', str, 2)\nmesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "mesh",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "mesh = Opt('host', 'mesh', str, 2)\nmissing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "missing",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "missing = Opt('missing', 'missing', str, 2)\noutput = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "output = Opt('output', 'file', str, 2)\npause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "pause",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "pause = Opt('pause', 'paused', None, 2)\nplacementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "placementgroup",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "placementgroup = Opt('placement-group', 'placementgroup', str, 2)\nprefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "prefix",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "prefix = Opt('prefix', 'prefix', str, 2)\npublicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "publicinterface",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "publicinterface = Opt('publicinterface', 'publicinterface', str, 2)\nreplication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "replication",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "replication = Opt('replication', 'replicationport', str, 2)\nschema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "schema",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "schema = Opt('schema', 'schema', str, 2)\nskipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "skipheapdump",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "skipheapdump = Opt('skip-heap-dump', 'skip-heap-dump', None, 2)\ntopicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "topicsport",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "topicsport = Opt('topicsport', 'topicsHostPort', str, 2)\ntopicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "topicspublic",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "topicspublic = Opt('topicspublic', 'topicspublic', str, 2)\nverbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "verbose = Opt('verbose', 'verbose', None, 2)\nvoltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,\n                         skipheapdump,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "voltdbroot",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "voltdbroot = Opt('dir', 'voltdbroot', str, 2)\nzookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,\n                         skipheapdump,\n                         days,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "zookeeper",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "zookeeper = Opt('zookeeper', 'zkport', str, 2)\n# negative opt\nunknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,\n                         skipheapdump,\n                         days,\n                         voltdbroot,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "unknown",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "unknown = Opt('unknown', None, None, 0)\nvolt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,\n                         skipheapdump,\n                         days,\n                         voltdbroot,\n                         force],\n             'get': [voltdbroot,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_opts",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_opts = {'check': [],\n             'collect': [prefix,\n                         output,\n                         dryrun,\n                         skipheapdump,\n                         days,\n                         voltdbroot,\n                         force],\n             'get': [voltdbroot,\n                     force,",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_opts_mandatory",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_opts_mandatory = {'check': [],\n                       'collect': [],\n                       'get': [],\n                       'init': [],\n                       'mask': [],\n                       'start': []}\nvolt_opts_negative = [unknown]\n# additional output cli\nvolt_verbs_output = {'check': '',\n                     'collect': ' VOLTDBROOT',",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_opts_negative",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_opts_negative = [unknown]\n# additional output cli\nvolt_verbs_output = {'check': '',\n                     'collect': ' VOLTDBROOT',\n                     'get': ' RESOURCE',\n                     'init': '',\n                     'mask': ' DEPLOYMENTFILE ...',\n                     'start': ''}\n# some verbs will generate default opts to java command line\nvolt_opts_default = {'check': {},",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_verbs_output",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_verbs_output = {'check': '',\n                     'collect': ' VOLTDBROOT',\n                     'get': ' RESOURCE',\n                     'init': '',\n                     'mask': ' DEPLOYMENTFILE ...',\n                     'start': ''}\n# some verbs will generate default opts to java command line\nvolt_opts_default = {'check': {},\n                     'collect': {},\n                     'get': {},",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_opts_default",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_opts_default = {'check': {},\n                     'collect': {},\n                     'get': {},\n                     'init': {},\n                     'mask': {},\n                     'start': {placementgroup.javaname: '0', mesh.javaname: \"\\\"\\\"\"}}\n# regular expression for pre-process the actual output before comparison\nignore = \"^(Exec:|Run:) (?P<java_path>.+?)(java) (?P<java_opts>.+?) (-classpath) (?P<classpath>.+?) (org.voltdb.VoltDB)\";\nignore_re = re.compile(ignore, re.X | re.M)\n# override of environments",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "ignore",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "ignore = \"^(Exec:|Run:) (?P<java_path>.+?)(java) (?P<java_opts>.+?) (-classpath) (?P<classpath>.+?) (org.voltdb.VoltDB)\";\nignore_re = re.compile(ignore, re.X | re.M)\n# override of environments\nvolt_override = {'VOLTDB_HEAPMAX': '3072',\n                 'VOLTDB_OPTS': '-XX:disableGCHeuristics'}\n# regular expression option naming convention\noption_name = \"--([\\-a-z]+)\"\noption_name_re = re.compile(option_name)\n# ignore python only option\n# also skip 'blocking'",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "ignore_re",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "ignore_re = re.compile(ignore, re.X | re.M)\n# override of environments\nvolt_override = {'VOLTDB_HEAPMAX': '3072',\n                 'VOLTDB_OPTS': '-XX:disableGCHeuristics'}\n# regular expression option naming convention\noption_name = \"--([\\-a-z]+)\"\noption_name_re = re.compile(option_name)\n# ignore python only option\n# also skip 'blocking'\noption_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_override",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_override = {'VOLTDB_HEAPMAX': '3072',\n                 'VOLTDB_OPTS': '-XX:disableGCHeuristics'}\n# regular expression option naming convention\noption_name = \"--([\\-a-z]+)\"\noption_name_re = re.compile(option_name)\n# ignore python only option\n# also skip 'blocking'\noption_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']\n# voltdb get and others use positional arguments so their\n# tests can't use the same pattern as \"voltdb start|init|...\"",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "option_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "option_name = \"--([\\-a-z]+)\"\noption_name_re = re.compile(option_name)\n# ignore python only option\n# also skip 'blocking'\noption_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']\n# voltdb get and others use positional arguments so their\n# tests can't use the same pattern as \"voltdb start|init|...\"\n# model data for the irregular (voltdb get) family\nvolt_irregular_verbs = { \"get\": 2, }\nget = Opt(\"get\", \"get\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "option_name_re",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "option_name_re = re.compile(option_name)\n# ignore python only option\n# also skip 'blocking'\noption_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']\n# voltdb get and others use positional arguments so their\n# tests can't use the same pattern as \"voltdb start|init|...\"\n# model data for the irregular (voltdb get) family\nvolt_irregular_verbs = { \"get\": 2, }\nget = Opt(\"get\", \"get\", str, 2)\nmask = Opt(\"mask\", \"mask\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "option_ignore",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "option_ignore = ['version', 'help', 'verbose', 'background', 'ignore', 'blocking']\n# voltdb get and others use positional arguments so their\n# tests can't use the same pattern as \"voltdb start|init|...\"\n# model data for the irregular (voltdb get) family\nvolt_irregular_verbs = { \"get\": 2, }\nget = Opt(\"get\", \"get\", str, 2)\nmask = Opt(\"mask\", \"mask\", str, 2)\nirr_deployment = Opt('deployment', 'deployment', str, 2)\nirr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "volt_irregular_verbs",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "volt_irregular_verbs = { \"get\": 2, }\nget = Opt(\"get\", \"get\", str, 2)\nmask = Opt(\"mask\", \"mask\", str, 2)\nirr_deployment = Opt('deployment', 'deployment', str, 2)\nirr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "get = Opt(\"get\", \"get\", str, 2)\nmask = Opt(\"mask\", \"mask\", str, 2)\nirr_deployment = Opt('deployment', 'deployment', str, 2)\nirr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "mask",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "mask = Opt(\"mask\", \"mask\", str, 2)\nirr_deployment = Opt('deployment', 'deployment', str, 2)\nirr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "irr_deployment",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "irr_deployment = Opt('deployment', 'deployment', str, 2)\nirr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "irr_schema",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "irr_schema = Opt(\"schema\", \"schema\", str, 2)\nirr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "irr_classes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "irr_classes = Opt(\"classes\", \"classes\", str, 2)\nirr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)\nsomefile = \"somefile\"",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "irr_license",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "irr_license = Opt(\"license\", \"license\", str, 2)\nvoltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)\nsomefile = \"somefile\"\nout = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "voltdbrootdir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "voltdbrootdir = Opt(\"--dir somedir\", \"getvoltdbroot somedir\", str, 2)\notheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)\nsomefile = \"somefile\"\nout = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)\nverbs = [ get, ]",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "otheroot",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "otheroot = Opt(\"otheroot\", \"getvoltdbroot otheroot\", str, 2)\ndefaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)\nsomefile = \"somefile\"\nout = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)\nverbs = [ get, ]\nobjects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "defaultroot",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "defaultroot = Opt(\"\", \"getvoltdbroot voltdbroot\",  str, 2)\n# noverb = Opt(\"\", \"no verb: put some help text here\", str, 2)\n# noobj = Opt(\"\", \"no obj: put some help text here\", str, 2)\n# noparms = Opt(\"\", \"no parms\", str, 2)\n# noout = Opt(\"\", \"file \\\"\\\"\", str, 2)\nsomefile = \"somefile\"\nout = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)\nverbs = [ get, ]\nobjects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required\noptions = [ voltdbrootdir, out, \"none\", ]",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "somefile",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "somefile = \"somefile\"\nout = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)\nverbs = [ get, ]\nobjects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required\noptions = [ voltdbrootdir, out, \"none\", ]\n# TODO: add other irregular verbs\n# check, collect, mask\n# above structures do not seem sufficiently general\nclass TestsContainer(unittest.TestCase):\n    longMessage = True",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "out",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "out = Opt(\"--output \"+somefile, \"file\"+\" \"+somefile, str, 2)\nverbs = [ get, ]\nobjects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required\noptions = [ voltdbrootdir, out, \"none\", ]\n# TODO: add other irregular verbs\n# check, collect, mask\n# above structures do not seem sufficiently general\nclass TestsContainer(unittest.TestCase):\n    longMessage = True\ndef make_test_function(haddiffs, description):",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "verbs",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "verbs = [ get, ]\nobjects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required\noptions = [ voltdbrootdir, out, \"none\", ]\n# TODO: add other irregular verbs\n# check, collect, mask\n# above structures do not seem sufficiently general\nclass TestsContainer(unittest.TestCase):\n    longMessage = True\ndef make_test_function(haddiffs, description):\n    def test(self):",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "objects",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "objects = [ irr_deployment, irr_schema, irr_classes, irr_license ]  # required\noptions = [ voltdbrootdir, out, \"none\", ]\n# TODO: add other irregular verbs\n# check, collect, mask\n# above structures do not seem sufficiently general\nclass TestsContainer(unittest.TestCase):\n    longMessage = True\ndef make_test_function(haddiffs, description):\n    def test(self):\n        self.assertFalse(haddiffs, description)",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "description": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "peekOfCode": "options = [ voltdbrootdir, out, \"none\", ]\n# TODO: add other irregular verbs\n# check, collect, mask\n# above structures do not seem sufficiently general\nclass TestsContainer(unittest.TestCase):\n    longMessage = True\ndef make_test_function(haddiffs, description):\n    def test(self):\n        self.assertFalse(haddiffs, description)\n    return test",
        "detail": "github.com.voltdb.voltdb.tests.testverbs.voltverbstest",
        "documentation": {}
    },
    {
        "label": "Fatal",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "class Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):\n    for msg in msgs:\n        if tag:\n            sys.stderr.write('%s: ' % tag)\n            sys.stderr.write(str(msg))\n            sys.stderr.write('\\n')",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "Column",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "class Column(object):\n    def __init__(self, name, type, modifiers):\n        self.name = name\n        self.type = type\n        self.modifiers = modifiers\nclass Table(object):\n    def __init__(self, name, nvariations, columns, ipartcol, ipkcol):\n        self.name = name\n        self.nvariations = nvariations\n        self.columns = columns",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "Table",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "class Table(object):\n    def __init__(self, name, nvariations, columns, ipartcol, ipkcol):\n        self.name = name\n        self.nvariations = nvariations\n        self.columns = columns\n        self.partcol = ipartcol\n        self.pkcol = ipkcol\ndef create_table(name, prefix, nvariations, ncolumns, ipartcol, ipkcol):\n    # Add a possible primary / possible partition key and a foreign/non-partition key.\n    columns = [Column('id', 'bigint', 'NOT NULL'), Column('parent_id', 'bigint', None)]",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "display",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def display(tag, *msgs):\n    for msg in msgs:\n        if tag:\n            sys.stderr.write('%s: ' % tag)\n            sys.stderr.write(str(msg))\n            sys.stderr.write('\\n')\ndef announce(*msgs):\n    print(announcement_separator)\n    for msg in msgs:\n        print(msg)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "announce",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def announce(*msgs):\n    print(announcement_separator)\n    for msg in msgs:\n        print(msg)\n    print(announcement_separator)\nclass Column(object):\n    def __init__(self, name, type, modifiers):\n        self.name = name\n        self.type = type\n        self.modifiers = modifiers",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "create_table",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def create_table(name, prefix, nvariations, ncolumns, ipartcol, ipkcol):\n    # Add a possible primary / possible partition key and a foreign/non-partition key.\n    columns = [Column('id', 'bigint', 'NOT NULL'), Column('parent_id', 'bigint', None)]\n    for i in range(ncolumns):\n        columns.append(Column('%s_%d' % (prefix, i+1), 'varchar(32)', None))\n    return Table(name, nvariations, columns, ipartcol, ipkcol)\ndef get_tables():\n    print 'Reading %s...' % config_path\n    tables = []\n    et = ElementTree()",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "get_tables",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def get_tables():\n    print 'Reading %s...' % config_path\n    tables = []\n    et = ElementTree()\n    try:\n        xmlschema = et.parse(config_path).find('schema')\n        if xmlschema is None:\n            raise Fatal('Missing <schema> element')\n        xmltables = xmlschema.findall('table')\n        if xmltables is None or len(xmltables) == 0:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "generate_comma_separated_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def generate_comma_separated_list(generator, indent, comment):\n    first = True\n    for line in generator:\n        if first:\n            preamble = indent\n            first = False\n        elif comment is not None and line.startswith(comment):\n            preamble = indent\n        else:\n            preamble = ',%s' % indent[1:]",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "generate_table_ddl_lines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def generate_table_ddl_lines(table, name):\n    for column in table.columns:\n        if column.modifiers:\n            modifiers = ' %s' % column.modifiers\n        else:\n            modifiers = ''\n        yield '%s %s%s' % (column.name, column.type, modifiers)\n    if table.pkcol is not None:\n        yield ddl_pk % (name, table.columns[table.pkcol].name)\ndef generate_ddl(tables):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "generate_ddl",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def generate_ddl(tables):\n    yield ddl_start\n    for table in tables:\n        for variation in range(table.nvariations):\n            name = '%s_%d' % (table.name, variation + 1)\n            yield table_start % name\n            generator = generate_table_ddl_lines(table, name)\n            for line in generate_comma_separated_list(generator, '  ', '--'):\n                yield line\n            yield table_end",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "generate_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def generate_file(path, generator):\n    print 'Generating %s...' % path\n    try:\n        try:\n            f = open(path, 'w')\n        except (OSError, IOError), e:\n            raise Fatal('Failed to open %s' % path, e)\n        for text_block in generator:\n            if text_block is not None:\n                try:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "def main():\n    tables = get_tables()\n    generate_file(ddl_path, generate_ddl(tables))\nif __name__ == '__main__':\n    try:\n        main()\n        announce('Schema/project generation succeeded.')\n    except Fatal, e:\n        display('FATAL', *e.msgs)\n        announce('Schema/project generation failed.')",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "root_dir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "root_dir = os.path.dirname(os.path.dirname(__file__))\nconfig_path = os.path.join(root_dir, 'config.xml')\nddl_path = os.path.join(root_dir, 'ddl.sql')\nddl_start = \"\"\"-- DDL generated for ad hoc benchmark - this will be overwritten\nfile -inlinebatch END_OF_BATCH\n\"\"\"\nddl_end = 'END_OF_BATCH'\nddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "config_path",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "config_path = os.path.join(root_dir, 'config.xml')\nddl_path = os.path.join(root_dir, 'ddl.sql')\nddl_start = \"\"\"-- DDL generated for ad hoc benchmark - this will be overwritten\nfile -inlinebatch END_OF_BATCH\n\"\"\"\nddl_end = 'END_OF_BATCH'\nddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "ddl_path",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "ddl_path = os.path.join(root_dir, 'ddl.sql')\nddl_start = \"\"\"-- DDL generated for ad hoc benchmark - this will be overwritten\nfile -inlinebatch END_OF_BATCH\n\"\"\"\nddl_end = 'END_OF_BATCH'\nddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "ddl_start",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "ddl_start = \"\"\"-- DDL generated for ad hoc benchmark - this will be overwritten\nfile -inlinebatch END_OF_BATCH\n\"\"\"\nddl_end = 'END_OF_BATCH'\nddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "ddl_end",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "ddl_end = 'END_OF_BATCH'\nddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "ddl_pk",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "ddl_pk = 'CONSTRAINT PK_%s PRIMARY KEY (%s)'\nddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "ddl_partition",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "ddl_partition = 'PARTITION TABLE %s ON COLUMN %s;'\ntable_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):\n    for msg in msgs:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "table_start",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "table_start = '\\nCREATE TABLE %s\\n('\ntable_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):\n    for msg in msgs:\n        if tag:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "table_end",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "table_end = ');'\nannouncement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):\n    for msg in msgs:\n        if tag:\n            sys.stderr.write('%s: ' % tag)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "announcement_separator",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "description": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "peekOfCode": "announcement_separator = '-' * 42\nclass Fatal(Exception):\n    def __init__(self, *msgs):\n        self.msgs = msgs\n        Exception.__init__(self)\ndef display(tag, *msgs):\n    for msg in msgs:\n        if tag:\n            sys.stderr.write('%s: ' % tag)\n            sys.stderr.write(str(msg))",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.adhocbenchmark.scripts.generate",
        "documentation": {}
    },
    {
        "label": "list_cases",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def list_cases():\n    print \"List of implemented csvloader cases:\\n\"\n    for k in sorted(CASES.keys()):\n        print \"\\t%s\" % k\n# build the reference character set\n# user all possible unicode-16 codes (first code page 0000-ffff)\nUNICODE_CHARSET = \"\"\n#for c in range(32,64*1024):\nfor c in range(32,127):\n    # 0-31 control chars",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "gentext",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def gentext(size):\n    r = ''.join(random.sample(UNICODE_CHARSET, len(UNICODE_CHARSET)))\n    s = r * int(size/len(r)) + r[:size%len(r)]\n    m = re.match(r'(.*)([ \\t\\n]+)$', s)\n    if m:\n        s = m.group(1) + ''.join(random.sample(UNICODE_CHARSET_MINUS_WHITESPACE_CHARS, len(m.group(2))))\n    s = s.replace(QUOTE_CHAR, QUOTE_CHAR+QUOTE_CHAR)[:size]\n    if (len(s) == 1 and s[0] == QUOTE_CHAR) or (len(s) > 1 and s[-1] == QUOTE_CHAR and s[-2] != QUOTE_CHAR):\n        s = s[:-1] + random.choice(UNICODE_CHARSET_MINUS_QUOTE_CHAR)\n    assert len(s) == size",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "genfixeddecimalstr",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def genfixeddecimalstr(size=38, precision=12, signed=True):\n    # voltdb decimal is 16-byte with fixed scale of 12 and precision of 38\n    p = -1*precision\n    r = ''.join(random.sample(NUMERIC_CHARSET, len(NUMERIC_CHARSET)))\n    r = r * int(size/len(r)) + r[:size%len(r)]\n    if (p>0):\n        r = r[:p] + '.' + r[p:]\n    if signed:\n        r = random.choose([\"-\",\"+\",\"\"]) + r\n    return r",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "gencurrency",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def gencurrency(size=16, precision=4):\n    c = genfixeddecimalstr(size, precision)\n    curr = re.match(r'^0*(\\d+\\.*\\d+)0*$', c)\n    print curr.group(1)\n    return curr.group(1)\ndef genint(size):\n    if size == 1:\n        return randint(-2**7+1, 2**7-1)\n    elif size == 2:\n        return randint(-2**15+1, 2**15-1)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "genint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def genint(size):\n    if size == 1:\n        return randint(-2**7+1, 2**7-1)\n    elif size == 2:\n        return randint(-2**15+1, 2**15-1)\n    elif size == 4:\n        return randint(-2**31+1, 2**31-1)\n    elif size == 8:\n        return randint(-2**63+1, 2**63-1)\n    else:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "gennumsequence",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def gennumsequence(__seq):\n    # pass in a list of on one number\n    assert (isinstance(__seq, list) and len(__seq) == 1)\n    __seq[0] += 1\n    return __seq[0]\ndef gentimestamp():\n    return datetime.datetime.today().strftime('\"%Y-%m-%d %H:%M:%S\"')\ndef gendouble():\n    return random.random() * genint(4)\ndef run_readlines(cmd):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "gentimestamp",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def gentimestamp():\n    return datetime.datetime.today().strftime('\"%Y-%m-%d %H:%M:%S\"')\ndef gendouble():\n    return random.random() * genint(4)\ndef run_readlines(cmd):\n    fd = os.popen(cmd)\n    result = fd.read()\n    #print result\n    fd.close()\n    return result",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "gendouble",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def gendouble():\n    return random.random() * genint(4)\ndef run_readlines(cmd):\n    fd = os.popen(cmd)\n    result = fd.read()\n    #print result\n    fd.close()\n    return result\ndef run_csvloader(schema, data_file):\n    rowcount = options.ROW_COUNT",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "run_readlines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def run_readlines(cmd):\n    fd = os.popen(cmd)\n    result = fd.read()\n    #print result\n    fd.close()\n    return result\ndef run_csvloader(schema, data_file):\n    rowcount = options.ROW_COUNT\n    elapsed_results = []\n    parsing_results = []",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "run_csvloader",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def run_csvloader(schema, data_file):\n    rowcount = options.ROW_COUNT\n    elapsed_results = []\n    parsing_results = []\n    loading_results = []\n    for I in range(0, options.TRIES):\n        home = os.getenv(\"VOLTDB_HOME\")\n        before_row_count = get_table_row_count(schema)\n        cmd = \"%s --servers=%s\" % (os.path.join(home, CSVLOADER), ','.join(options.servers))\n        if options.csvoptions:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "get_table_row_count",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def get_table_row_count(table_name):\n    host = random.choice(options.servers)\n    pyclient = FastSerializer(host=host, port=21212)\n    count = VoltProcedure(pyclient, '@AdHoc', [FastSerializer.VOLTTYPE_STRING])\n    resp = count.call(['select count(*) from %s' % table_name], timeout=360)\n    if resp.status != 1 or len(resp.tables[0].tuples) != 1:\n        print \"Unexpected response to count query from host %s: %s\" % (host, resp)\n        raise RuntimeError()\n    __tuples = resp.tables[0].tuples[0]\n    result = __tuples[0]",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "get_datafile_path",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def get_datafile_path(case):\n    return os.path.join(DATA_DIR, \"csvbench_%s_%d.dat\" % (case, options.ROW_COUNT))\ndef get_filesize(file):\n    return int(run_readlines(\"wc -l %s\" % file).split(' ')[0])\ndef list_callback (option, opt, value, parser):\n    \"\"\"split the list of strings and store it in the parser options \"\"\"\n    setattr(parser.values, option.dest, value.split(','))\ndef parse_cmdline():\n    global options, args, DATA_DIR\n    usage = \"usage: %prog [options] path-to-loadfiles\"",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "get_filesize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def get_filesize(file):\n    return int(run_readlines(\"wc -l %s\" % file).split(' ')[0])\ndef list_callback (option, opt, value, parser):\n    \"\"\"split the list of strings and store it in the parser options \"\"\"\n    setattr(parser.values, option.dest, value.split(','))\ndef parse_cmdline():\n    global options, args, DATA_DIR\n    usage = \"usage: %prog [options] path-to-loadfiles\"\n    parser = OptionParser()\n    parser.add_option (\"-s\", \"--servers\",",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "list_callbac",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def list_callback (option, opt, value, parser):\n    \"\"\"split the list of strings and store it in the parser options \"\"\"\n    setattr(parser.values, option.dest, value.split(','))\ndef parse_cmdline():\n    global options, args, DATA_DIR\n    usage = \"usage: %prog [options] path-to-loadfiles\"\n    parser = OptionParser()\n    parser.add_option (\"-s\", \"--servers\",\n                            type = \"string\",\n                            action = \"callback\", callback = list_callback,",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "parse_cmdline",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def parse_cmdline():\n    global options, args, DATA_DIR\n    usage = \"usage: %prog [options] path-to-loadfiles\"\n    parser = OptionParser()\n    parser.add_option (\"-s\", \"--servers\",\n                            type = \"string\",\n                            action = \"callback\", callback = list_callback,\n                            default=[\"localhost\"],\n                            help =\"list of servers\")\n    # WNG Don't run more than one case at a time in apprunner if collecting stats",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "data_narrow_short",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def data_narrow_short(rebuild=False):\n    data_file = get_datafile_path(\"narrow_short\")\n    if rebuild or not os.path.exists(data_file):\n        with open(data_file, \"w\") as f:\n            for I in range(0, options.ROW_COUNT):\n                print >>f, \"%d,%d,%d,%d,%s\" % (I, genint(2), genint(1), genint(8), gentext(60))\n        print \"data file %s was written\" % data_file\n    return data_file\ndef data_narrow_long(rebuild=False):\n    data_file = get_datafile_path(\"narrow_long\")",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "data_narrow_long",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def data_narrow_long(rebuild=False):\n    data_file = get_datafile_path(\"narrow_long\")\n    if rebuild or not os.path.exists(data_file):\n        with open(data_file, \"w\") as f:\n            for I in range(0, options.ROW_COUNT):\n                print >>f, \"%d,%d,%d,%d,%s\" % (I, randint(-32766,32767),randint(-127,127),randint(-2**63,2**63),gentext(512))\n        print \"data file %s was written\" % data_file\n    return data_file\ndef data_generic(rebuild=False):\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "data_generic",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def data_generic(rebuild=False):\n    \"\"\"\n    a integer NOT NULL\n        , b tinyint\n        , c smallint\n        , d varchar(1)\n        , e timestamp\n        , f timestamp\n        , h varchar(60)\n        , i varchar(60)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "case_generic_noix",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def case_generic_noix():\n    schema = \"generic_noix\"\n    data_file = data_generic(False)\n    run_csvloader(schema, data_file)\ndef data_replicated_pk(rebuild=False):\n    data_file = get_datafile_path(\"replicated_pk\")\n    if rebuild or not os.path.exists(data_file) or get_filesize(data_file) != options.ROW_COUNT:\n        myseq = [0]\n        with open(data_file, \"w\") as f:\n            for I in range(0, options.ROW_COUNT):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "data_replicated_pk",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "def data_replicated_pk(rebuild=False):\n    data_file = get_datafile_path(\"replicated_pk\")\n    if rebuild or not os.path.exists(data_file) or get_filesize(data_file) != options.ROW_COUNT:\n        myseq = [0]\n        with open(data_file, \"w\") as f:\n            for I in range(0, options.ROW_COUNT):\n                print >>f, \"%d,%s,%s,%s,%s,%s\" % (gennumsequence(myseq),\n                                                    gentext(60),\n                                                    gentext(1024),\n                                                    gentimestamp(),",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "CSVLOADER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "CSVLOADER = \"bin/csvloader\"\n#SQLCMD = \"$VOLTDB_HOME/bin/sqlcmd --servers=%s\" % servers\n# declare cases impmeneted and the data generator code\nCASES = {\n    \"narrow_short_noix\"          : \"data_narrow_short\",\n    \"narrow_short_ix\"            : \"data_narrow_short\",\n    \"narrow_short_cmpix\"         : \"data_narrow_short\",\n    \"narrow_short_hasview\"       : \"data_narrow_short\",\n    \"narrow_long_noix\"           : \"data_narrow_long\",\n    \"narrow_long_ix\"             : \"data_narrow_long\",",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "#SQLCMD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "#SQLCMD = \"$VOLTDB_HOME/bin/sqlcmd --servers=%s\" % servers\n# declare cases impmeneted and the data generator code\nCASES = {\n    \"narrow_short_noix\"          : \"data_narrow_short\",\n    \"narrow_short_ix\"            : \"data_narrow_short\",\n    \"narrow_short_cmpix\"         : \"data_narrow_short\",\n    \"narrow_short_hasview\"       : \"data_narrow_short\",\n    \"narrow_long_noix\"           : \"data_narrow_long\",\n    \"narrow_long_ix\"             : \"data_narrow_long\",\n    \"narrow_long_cmpix\"          : \"data_narrow_long\",",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "CASES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "CASES = {\n    \"narrow_short_noix\"          : \"data_narrow_short\",\n    \"narrow_short_ix\"            : \"data_narrow_short\",\n    \"narrow_short_cmpix\"         : \"data_narrow_short\",\n    \"narrow_short_hasview\"       : \"data_narrow_short\",\n    \"narrow_long_noix\"           : \"data_narrow_long\",\n    \"narrow_long_ix\"             : \"data_narrow_long\",\n    \"narrow_long_cmpix\"          : \"data_narrow_long\",\n    \"narrow_long_hasview\"        : \"data_narrow_long\",\n    \"generic_noix\"               : \"data_generic\",",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "UNICODE_CHARSET",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "UNICODE_CHARSET = \"\"\n#for c in range(32,64*1024):\nfor c in range(32,127):\n    # 0-31 control chars\n    # 34 \"\n    # 36 $\n    # 37 %\n    # 38 &\n    # 39 '\n    # 44 , reserved as field separator",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "UNICODE_CHARSET_MINUS_QUOTE_CHAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "UNICODE_CHARSET_MINUS_QUOTE_CHAR = UNICODE_CHARSET.replace(QUOTE_CHAR, \"\")\nUNICODE_CHARSET_MINUS_WHITESPACE_CHARS = UNICODE_CHARSET.replace(\" \\t\\n\",\"\")\nNUMERIC_CHARSET=\"0123456789\"\n# XXX not yet handling leading/trailing zeroes and many other\n# cases which are useful in testing, but this is not a test it is a benchmark.\ndef gentext(size):\n    r = ''.join(random.sample(UNICODE_CHARSET, len(UNICODE_CHARSET)))\n    s = r * int(size/len(r)) + r[:size%len(r)]\n    m = re.match(r'(.*)([ \\t\\n]+)$', s)\n    if m:",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "UNICODE_CHARSET_MINUS_WHITESPACE_CHARS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "UNICODE_CHARSET_MINUS_WHITESPACE_CHARS = UNICODE_CHARSET.replace(\" \\t\\n\",\"\")\nNUMERIC_CHARSET=\"0123456789\"\n# XXX not yet handling leading/trailing zeroes and many other\n# cases which are useful in testing, but this is not a test it is a benchmark.\ndef gentext(size):\n    r = ''.join(random.sample(UNICODE_CHARSET, len(UNICODE_CHARSET)))\n    s = r * int(size/len(r)) + r[:size%len(r)]\n    m = re.match(r'(.*)([ \\t\\n]+)$', s)\n    if m:\n        s = m.group(1) + ''.join(random.sample(UNICODE_CHARSET_MINUS_WHITESPACE_CHARS, len(m.group(2))))",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "cases",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "description": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "peekOfCode": "cases = options.case or CASES.keys()\nfor schema in cases:\n    if schema not in CASES:\n        print \"ERROR unknown case: %s\" % c\n        print list_cases()\n        sys.exit(1)\n    data_file = globals()[CASES[schema]](options.REGENERATE)\n    run_csvloader(schema, data_file)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.csvbenchmark.csvbenchmark",
        "documentation": {}
    },
    {
        "label": "generate_ddl",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'\n    )\n    ddl = \"file -inlinebatch END_OF_BATCH\\n\";\n    for i in range(tables):\n        ddl += tb.format(i, i, i, i, i, i) + \"\\n\"\n    ddl += \"END_OF_BATCH\\n\"",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "procedure_stmts",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def procedure_stmts(pattern, pfrom, pto, filename):\n    stmts = \"\"\n    for i in range(pfrom, pto):\n        stmts += pattern.format(i) + \"\\n\"\n    if len(stmts.strip(' \\t\\n\\r')) == 0:\n        sys.exit(\"stmts not generated from \" + str(pfrom) + \" to \" + str(pto) + \" for file: \" + filename)\n    with open(filename, \"w\") as stmts_file:\n        stmts_file.write(stmts)\n    return\ndef generate_classes(ithProc, filename):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "generate_classes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def generate_classes(ithProc, filename):\n    random.seed(777)\n    with open('classtemplate.txt', 'r') as template_file:\n        template = Template(template_file.read())\n    stmt_template = Template('    static final SQLStmt stmt$stmtnum = new SQLStmt(\"SELECT * FROM T$t0, T$t1, T$t2\");\\n')\n    static_data_template = Template('    public static String data$n = \"$str\";\\n')\n    some_static_data = ''\n    for j in range(0, 30):\n        the_str = ''\n        for k in range(0, 100):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "generate_base_jar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def generate_base_jar(tablecount, procedurecount):\n    for i in range(0, procedurecount):\n        filename = \"%s/Proc%d.java\" % (DEFAULT_CLASSES_DIR, i)\n        generate_classes(i, filename)\n    # invoke shell script to compile jars\n    # TODO: xin\n    subprocess.call(shlex.split('./run.sh uacjars uac_base.jar'))\n    # generate procedure stmts\n    filename = \"%s/stmts_base.txt\" % (DEFAULT_JARS_DIR)\n    procedure_stmts(PAT_CREATE_PROC_STMT, 0, procedurecount, filename)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "add_jars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def add_jars(procedurecount, invocations):\n    # add a procedure\n    for i in range(0, invocations):\n        j = procedurecount + i\n        filename = \"%s/Proc%d.java\" % (DEFAULT_CLASSES_DIR, j)\n        generate_classes(j, filename)\n        # invoke shell script to compile jars\n        cmd = \"%s uac_add_%s.jar\" % (JARS_CMD_PRFIX, j)\n        subprocess.call(shlex.split(cmd))\n        # generate procedure stmts",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "add_batch_jars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def add_batch_jars(procedurecount, invocations, batchsize):\n    # add procedures\n    for i in range(0, invocations):\n        base = procedurecount + i * batchsize\n        for j in range(0, batchsize):\n            j = base + j\n            filename = \"%s/Proc%d.java\" % (DEFAULT_CLASSES_DIR, j)\n            generate_classes(j, filename)\n        # invoke shell script to compile jars\n        cmd = \"%s uac_add_batch_%s.jar\" % (JARS_CMD_PRFIX, base)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "del_jars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def del_jars(procedurecount, invocations):\n    # drop a procedure\n    for i in range(0, invocations):\n        j = procedurecount - i - 1\n        # generate procedure stmts\n        filename = \"%s/stmts_del_%d.txt\" % (DEFAULT_JARS_DIR, j)\n        procedure_stmts(PAT_DROP_PROC_STMT, j, j + 1, filename)\n        filename = \"%s/pat_del_%d.txt\" % (DEFAULT_JARS_DIR, j)\n        procedure_stmts(PAT_CLS_DEL_STMT, j, j + 1, filename)\ndef del_batch_jars(procedurecount, invocations, batchsize):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "del_batch_jars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def del_batch_jars(procedurecount, invocations, batchsize):\n    # drop procedures\n    for i in range(0, invocations):\n        base = procedurecount - (i + 1) * batchsize\n        # generate procedure stmts\n        filename = \"%s/stmts_del_batch_%d.txt\" % (DEFAULT_JARS_DIR, base)\n        procedure_stmts(PAT_DROP_PROC_STMT, base, base + batchsize, filename)\n        filename = \"%s/pat_del_batch_%d.txt\" % (DEFAULT_JARS_DIR, base)\n        procedure_stmts(PAT_CLS_DEL_STMT, base, base + batchsize, filename)\ndef upd_jars(procedurecount, invocations):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "upd_jars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def upd_jars(procedurecount, invocations):\n    # drop a procedure\n    del_jars(procedurecount, invocations);\n    add_jars(procedurecount, invocations);\n# cleaning the input dir\ndef clean_dirpath(dirpath):\n    #if os.path.exists(dirpath):\n    #    shutil.rmtree(dirpath)\n    #os.makedirs(dirpath, 0755)\n    return",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "clean_dirpath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def clean_dirpath(dirpath):\n    #if os.path.exists(dirpath):\n    #    shutil.rmtree(dirpath)\n    #os.makedirs(dirpath, 0755)\n    return\ndef clean():\n    clean_dirpath(DEFAULT_JARS_DIR)\n    clean_dirpath(DEFAULT_CLASSES_DIR)\n    clean_dirpath(DEFAULT_CLASSES_DIR)\n    return",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "def clean():\n    clean_dirpath(DEFAULT_JARS_DIR)\n    clean_dirpath(DEFAULT_CLASSES_DIR)\n    clean_dirpath(DEFAULT_CLASSES_DIR)\n    return\nif __name__ == \"__main__\":\n    parser = OptionParser()\n    parser.add_option(\"-n\", \"--name\", default=\"None\",\n                      type='choice', # it is string type\n                      choices= ['ADD', 'DEL','UPD', 'ADD_BATCH', 'DEL_BATCH', 'UPD_BATCH', 'None'],",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CLASSES_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "DEFAULT_CLASSES_DIR = \"procedures/uac\"\nDEFAULT_JARS_DIR = \"jars\"\nJARS_CMD_PRFIX = \"./run.sh uacjars \"\nPAT_CREATE_PROC_STMT = \"CREATE PROCEDURE FROM CLASS uac.Proc{0};\"\nPAT_DROP_PROC_STMT = \"DROP PROCEDURE uac.Proc{0};\"\nPAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "DEFAULT_JARS_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "DEFAULT_JARS_DIR = \"jars\"\nJARS_CMD_PRFIX = \"./run.sh uacjars \"\nPAT_CREATE_PROC_STMT = \"CREATE PROCEDURE FROM CLASS uac.Proc{0};\"\nPAT_DROP_PROC_STMT = \"DROP PROCEDURE uac.Proc{0};\"\nPAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "JARS_CMD_PRFIX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "JARS_CMD_PRFIX = \"./run.sh uacjars \"\nPAT_CREATE_PROC_STMT = \"CREATE PROCEDURE FROM CLASS uac.Proc{0};\"\nPAT_DROP_PROC_STMT = \"DROP PROCEDURE uac.Proc{0};\"\nPAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'\n    )",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "PAT_CREATE_PROC_STMT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "PAT_CREATE_PROC_STMT = \"CREATE PROCEDURE FROM CLASS uac.Proc{0};\"\nPAT_DROP_PROC_STMT = \"DROP PROCEDURE uac.Proc{0};\"\nPAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'\n    )\n    ddl = \"file -inlinebatch END_OF_BATCH\\n\";",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "PAT_DROP_PROC_STMT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "PAT_DROP_PROC_STMT = \"DROP PROCEDURE uac.Proc{0};\"\nPAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'\n    )\n    ddl = \"file -inlinebatch END_OF_BATCH\\n\";\n    for i in range(tables):",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "PAT_CLS_DEL_STMT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "description": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "peekOfCode": "PAT_CLS_DEL_STMT = \"uac.Proc{0}\"\ndef generate_ddl(tables, ddlname):\n    tb = ('create table t{0} (a integer not null, b varchar(10), c integer,'\n            'd smallint, e integer, primary key(a, b));'\n          'create index t{1}_idx1 on t{2}(a,c);'\n          'create index t{3}_idx2 on t{4}(a,d);'\n    )\n    ddl = \"file -inlinebatch END_OF_BATCH\\n\";\n    for i in range(tables):\n        ddl += tb.format(i, i, i, i, i, i) + \"\\n\"",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.uacbench.uacbench",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.voter-tracing-benchmark.tracingBenchmarkPlot",
        "description": "github.com.voltdb.voltdb.tests.test_apps.voter-tracing-benchmark.tracingBenchmarkPlot",
        "peekOfCode": "def main():\n    throughput = [[], []]\n    avgLatency = [[], []]\n    _99Latency = [[], []]\n    maxLatency = [[], []]\n    num = [0, 1]\n    filenames = [\"resTracingOff.txt\", \"resTracingOn.txt\"]\n    for i, filename in zip(num, filenames):\n        if i == 0:\n            print(\"{}, tracing off\".format(filename))",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.voter-tracing-benchmark.tracingBenchmarkPlot",
        "documentation": {}
    },
    {
        "label": "process_args",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.ddlgen-tool",
        "description": "github.com.voltdb.voltdb.tests.test_apps.ddlgen-tool",
        "peekOfCode": "def process_args(line, lineno):\n    line = string.strip(line)\n    splitter = shlex.shlex(line, posix=True)\n    splitter.whitespace = \",\"\n    splitter.whitespace_split = True\n    map = {}\n    for param in list(splitter):\n        try:\n            k, v = param.split(\"=\", 1)\n            k = string.strip(k)",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.ddlgen-tool",
        "documentation": {}
    },
    {
        "label": "DDLGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "description": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "peekOfCode": "class DDLGenerator(object):\n    def __init__(self):\n        pass\n    DEFAULT_COLUMNS = [\n        {'cname': 'txnid',                     'ctype': 'BIGINT',        'cattribs': 'NOT NULL'},\n        {'cname': 'rowid',                     'ctype': 'BIGINT',        'cattribs': 'NOT NULL'},\n        {'cname': 'rowid_group',               'ctype': 'TINYINT',       'cattribs': 'NOT NULL'},\n        {'cname': 'type_null_tinyint',         'ctype': 'TINYINT',       'cattribs': ''},\n        {'cname': 'type_not_null_tinyint',     'ctype': 'TINYINT',       'cattribs': ' NOT NULL'},\n        {'cname': 'type_null_smallint',        'ctype': 'SMALLINT',      'cattribs': ''},",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "documentation": {}
    },
    {
        "label": "TestDDLGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "description": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "peekOfCode": "class TestDDLGenerator(unittest.TestCase):\n    @staticmethod\n    def normalize_whitespace(data):\n        \"\"\"\n        replace repeat whitespace characters with a single whitespace character\n        \"\"\"\n        return re.sub(r\"\\s\\s+\", \" \", data)\n    def test_table_basic_no_partitioning(self):\n        self.maxDiff = None\n        tg = DDLGenerator()",
        "detail": "github.com.voltdb.voltdb.tests.test_apps.ddlgenerator",
        "documentation": {}
    },
    {
        "label": "OutcomeBasicOutcomePrinter",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "description": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "peekOfCode": "class OutcomeBasicOutcomePrinter(object):\n    \"\"\"Print an outcome::basic_outcome<T>\"\"\"\n    def __init__(self, val):\n        self.val = val\n    def children(self):\n        if self.val['_state']['_status']['status_value'] & 1 == 1:\n            yield ('value', self.val['_state']['_value'])\n        if self.val['_state']['_status']['status_value'] & 2 == 2:\n            yield ('error', self.val['_state']['_error'])\n        if self.val['_state']['_status']['status_value'] & 4 == 4:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "documentation": {}
    },
    {
        "label": "build_pretty_printer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "description": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "peekOfCode": "def build_pretty_printer():\n    pp = gdb.printing.RegexpCollectionPrettyPrinter(\"outcome_v2\")\n    pp.add_printer('outcome_v2::basic_result', '^outcome_v2[_0-9a-f]*::basic_result<.*>$', OutcomeBasicOutcomePrinter)\n    pp.add_printer('outcome_v2::basic_outcome', '^outcome_v2[_0-9a-f]*::basic_outcome<.*>$', OutcomeBasicOutcomePrinter)\n    return pp\ndef register_printers(obj = None):\n    gdb.printing.register_pretty_printer(obj, build_pretty_printer(), replace = True)\nregister_printers(gdb.current_objfile())",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "documentation": {}
    },
    {
        "label": "register_printers",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "description": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "peekOfCode": "def register_printers(obj = None):\n    gdb.printing.register_pretty_printer(obj, build_pretty_printer(), replace = True)\nregister_printers(gdb.current_objfile())",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.boost.outcome.outcome.gdb",
        "documentation": {}
    },
    {
        "label": "SwigPyIterator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class SwigPyIterator(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)\n    def __init__(self, *args, **kwargs):\n        raise AttributeError(\"No constructor defined - class is abstract\")\n    __repr__ = _swig_repr\n    __swig_destroy__ = _s2.delete_SwigPyIterator\n    __del__ = lambda self: None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class R1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_R1Interval(*args)\n        try:\n            self.this.append(this)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)\n    __repr__ = _swig_repr\n    __swig_getmethods__[\"Radians\"] = lambda x: _s2.S1Angle_Radians\n    if _newclass:\n        Radians = staticmethod(_s2.S1Angle_Radians)\n    __swig_getmethods__[\"Degrees\"] = lambda x: _s2.S1Angle_Degrees",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_S1Interval(*args)\n        try:\n            self.this.append(this)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)\n    __repr__ = _swig_repr\n    kFaceBits = _s2.S2CellId_kFaceBits\n    kNumFaces = _s2.S2CellId_kNumFaces\n    kMaxLevel = _s2.S2CellId_kMaxLevel\n    kPosBits = _s2.S2CellId_kPosBits",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Region",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Region, name)\n    def __init__(self, *args, **kwargs):\n        raise AttributeError(\"No constructor defined - class is abstract\")\n    __repr__ = _swig_repr\n    __swig_destroy__ = _s2.delete_S2Region\n    __del__ = lambda self: None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2Cap(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cap, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Cap, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_S2LatLng(*args)\n        try:\n            self.this.append(this)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLngRect, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2RegionCoverer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)\n    __repr__ = _swig_repr\n    kDefaultMaxCells = _s2.S2RegionCoverer_kDefaultMaxCells\n    def __init__(self):\n        this = _s2.new_S2RegionCoverer()\n        try:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cell",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2Cell(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Cell, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellUnion",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "class S2CellUnion(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellUnion, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "FromS2CellId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def FromS2CellId(cell_id):\n    return _s2.FromS2CellId(cell_id)\nFromS2CellId = _s2.FromS2CellId\nclass R1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_Empty",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def R1Interval_Empty():\n    return _s2.R1Interval_Empty()\nR1Interval_Empty = _s2.R1Interval_Empty\ndef R1Interval_FromPoint(p):\n    return _s2.R1Interval_FromPoint(p)\nR1Interval_FromPoint = _s2.R1Interval_FromPoint\ndef R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)\nR1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_FromPoint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def R1Interval_FromPoint(p):\n    return _s2.R1Interval_FromPoint(p)\nR1Interval_FromPoint = _s2.R1Interval_FromPoint\ndef R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)\nR1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_FromPointPair",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)\nR1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)\n    __repr__ = _swig_repr\n    __swig_getmethods__[\"Radians\"] = lambda x: _s2.S1Angle_Radians",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_Radians",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_Radians(radians):\n    return _s2.S1Angle_Radians(radians)\nS1Angle_Radians = _s2.S1Angle_Radians\ndef S1Angle_Degrees(degrees):\n    return _s2.S1Angle_Degrees(degrees)\nS1Angle_Degrees = _s2.S1Angle_Degrees\ndef S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)\nS1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_Degrees",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_Degrees(degrees):\n    return _s2.S1Angle_Degrees(degrees)\nS1Angle_Degrees = _s2.S1Angle_Degrees\ndef S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)\nS1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E5",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)\nS1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E6",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E7",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_UnsignedE6",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_UnsignedE7",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_Empty",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Interval_Empty():\n    return _s2.S1Interval_Empty()\nS1Interval_Empty = _s2.S1Interval_Empty\ndef S1Interval_Full():\n    return _s2.S1Interval_Full()\nS1Interval_Full = _s2.S1Interval_Full\ndef S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)\nS1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_Full",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Interval_Full():\n    return _s2.S1Interval_Full()\nS1Interval_Full = _s2.S1Interval_Full\ndef S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)\nS1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_FromPoint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)\nS1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_FromPointPair",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)\n    __repr__ = _swig_repr\n    kFaceBits = _s2.S2CellId_kFaceBits",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_Sentinel",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_Sentinel():\n    return _s2.S2CellId_Sentinel()\nS2CellId_Sentinel = _s2.S2CellId_Sentinel\ndef S2CellId_FromFacePosLevel(face, pos, level):\n    return _s2.S2CellId_FromFacePosLevel(face, pos, level)\nS2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel\ndef S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)\nS2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromFacePosLevel",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_FromFacePosLevel(face, pos, level):\n    return _s2.S2CellId_FromFacePosLevel(face, pos, level)\nS2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel\ndef S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)\nS2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromPoint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)\nS2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromLatLng",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_GetSizeIJ",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_GetSizeST",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_Begin",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_End",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromFaceIJ",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_lsb_for_level",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Region, name)\n    def __init__(self, *args, **kwargs):\n        raise AttributeError(\"No constructor defined - class is abstract\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisHeight",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cap_FromAxisHeight(axis, height):\n    return _s2.S2Cap_FromAxisHeight(axis, height)\nS2Cap_FromAxisHeight = _s2.S2Cap_FromAxisHeight\ndef S2Cap_FromAxisAngle(axis, angle):\n    return _s2.S2Cap_FromAxisAngle(axis, angle)\nS2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle\ndef S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)\nS2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisAngle",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cap_FromAxisAngle(axis, angle):\n    return _s2.S2Cap_FromAxisAngle(axis, angle)\nS2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle\ndef S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)\nS2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisArea",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)\nS2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_Empty",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_Full",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Invalid",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_Invalid():\n    return _s2.S2LatLng_Invalid()\nS2LatLng_Invalid = _s2.S2LatLng_Invalid\ndef S2LatLng_FromRadians(lat_radians, lng_radians):\n    return _s2.S2LatLng_FromRadians(lat_radians, lng_radians)\nS2LatLng_FromRadians = _s2.S2LatLng_FromRadians\ndef S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)\nS2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromRadians",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromRadians(lat_radians, lng_radians):\n    return _s2.S2LatLng_FromRadians(lat_radians, lng_radians)\nS2LatLng_FromRadians = _s2.S2LatLng_FromRadians\ndef S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)\nS2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromDegrees",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)\nS2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE5",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE6",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE7",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromUnsignedE6",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromUnsignedE7",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Latitude",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Longitude",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromCenterSize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_FromCenterSize(center, size):\n    return _s2.S2LatLngRect_FromCenterSize(center, size)\nS2LatLngRect_FromCenterSize = _s2.S2LatLngRect_FromCenterSize\ndef S2LatLngRect_FromPoint(p):\n    return _s2.S2LatLngRect_FromPoint(p)\nS2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint\ndef S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)\nS2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromPoint",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_FromPoint(p):\n    return _s2.S2LatLngRect_FromPoint(p)\nS2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint\ndef S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)\nS2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromPointPair",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)\nS2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_Empty",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_Full",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FullLat",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FullLng",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)\n    __repr__ = _swig_repr\n    kDefaultMaxCells = _s2.S2RegionCoverer_kDefaultMaxCells",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2RegionCoverer_GetSimpleCovering",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2RegionCoverer_GetSimpleCovering(region, start, level):\n    return _s2.S2RegionCoverer_GetSimpleCovering(region, start, level)\nS2RegionCoverer_GetSimpleCovering = _s2.S2RegionCoverer_GetSimpleCovering\nclass S2Cell(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cell_FromFacePosLevel",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "def S2Cell_FromFacePosLevel(face, pos, level):\n    return _s2.S2Cell_FromFacePosLevel(face, pos, level)\nS2Cell_FromFacePosLevel = _s2.S2Cell_FromFacePosLevel\nclass S2CellUnion(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "SwigPyIterator_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "SwigPyIterator_swigregister = _s2.SwigPyIterator_swigregister\nSwigPyIterator_swigregister(SwigPyIterator)\ndef FromS2CellId(cell_id):\n    return _s2.FromS2CellId(cell_id)\nFromS2CellId = _s2.FromS2CellId\nclass R1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "FromS2CellId",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "FromS2CellId = _s2.FromS2CellId\nclass R1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, R1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, R1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_R1Interval(*args)\n        try:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "R1Interval_swigregister = _s2.R1Interval_swigregister\nR1Interval_swigregister(R1Interval)\ndef R1Interval_Empty():\n    return _s2.R1Interval_Empty()\nR1Interval_Empty = _s2.R1Interval_Empty\ndef R1Interval_FromPoint(p):\n    return _s2.R1Interval_FromPoint(p)\nR1Interval_FromPoint = _s2.R1Interval_FromPoint\ndef R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_Empty",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "R1Interval_Empty = _s2.R1Interval_Empty\ndef R1Interval_FromPoint(p):\n    return _s2.R1Interval_FromPoint(p)\nR1Interval_FromPoint = _s2.R1Interval_FromPoint\ndef R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)\nR1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_FromPoint",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "R1Interval_FromPoint = _s2.R1Interval_FromPoint\ndef R1Interval_FromPointPair(p1, p2):\n    return _s2.R1Interval_FromPointPair(p1, p2)\nR1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "R1Interval_FromPointPair",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "R1Interval_FromPointPair = _s2.R1Interval_FromPointPair\nclass S1Angle(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Angle, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Angle, name)\n    __repr__ = _swig_repr\n    __swig_getmethods__[\"Radians\"] = lambda x: _s2.S1Angle_Radians\n    if _newclass:\n        Radians = staticmethod(_s2.S1Angle_Radians)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_swigregister = _s2.S1Angle_swigregister\nS1Angle_swigregister(S1Angle)\ndef S1Angle_Radians(radians):\n    return _s2.S1Angle_Radians(radians)\nS1Angle_Radians = _s2.S1Angle_Radians\ndef S1Angle_Degrees(degrees):\n    return _s2.S1Angle_Degrees(degrees)\nS1Angle_Degrees = _s2.S1Angle_Degrees\ndef S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_Radians",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_Radians = _s2.S1Angle_Radians\ndef S1Angle_Degrees(degrees):\n    return _s2.S1Angle_Degrees(degrees)\nS1Angle_Degrees = _s2.S1Angle_Degrees\ndef S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)\nS1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_Degrees",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_Degrees = _s2.S1Angle_Degrees\ndef S1Angle_E5(e5):\n    return _s2.S1Angle_E5(e5)\nS1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E5",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_E5 = _s2.S1Angle_E5\ndef S1Angle_E6(e6):\n    return _s2.S1Angle_E6(e6)\nS1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E6",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_E6 = _s2.S1Angle_E6\ndef S1Angle_E7(e7):\n    return _s2.S1Angle_E7(e7)\nS1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_E7",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_E7 = _s2.S1Angle_E7\ndef S1Angle_UnsignedE6(e6):\n    return _s2.S1Angle_UnsignedE6(e6)\nS1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_UnsignedE6",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_UnsignedE6 = _s2.S1Angle_UnsignedE6\ndef S1Angle_UnsignedE7(e7):\n    return _s2.S1Angle_UnsignedE7(e7)\nS1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Angle_UnsignedE7",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Angle_UnsignedE7 = _s2.S1Angle_UnsignedE7\nclass S1Interval(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S1Interval, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S1Interval, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_S1Interval(*args)\n        try:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Interval_swigregister = _s2.S1Interval_swigregister\nS1Interval_swigregister(S1Interval)\ndef S1Interval_Empty():\n    return _s2.S1Interval_Empty()\nS1Interval_Empty = _s2.S1Interval_Empty\ndef S1Interval_Full():\n    return _s2.S1Interval_Full()\nS1Interval_Full = _s2.S1Interval_Full\ndef S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_Empty",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Interval_Empty = _s2.S1Interval_Empty\ndef S1Interval_Full():\n    return _s2.S1Interval_Full()\nS1Interval_Full = _s2.S1Interval_Full\ndef S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)\nS1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_Full",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Interval_Full = _s2.S1Interval_Full\ndef S1Interval_FromPoint(p):\n    return _s2.S1Interval_FromPoint(p)\nS1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_FromPoint",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Interval_FromPoint = _s2.S1Interval_FromPoint\ndef S1Interval_FromPointPair(p1, p2):\n    return _s2.S1Interval_FromPointPair(p1, p2)\nS1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S1Interval_FromPointPair",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S1Interval_FromPointPair = _s2.S1Interval_FromPointPair\nclass S2CellId(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellId, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellId, name)\n    __repr__ = _swig_repr\n    kFaceBits = _s2.S2CellId_kFaceBits\n    kNumFaces = _s2.S2CellId_kNumFaces\n    kMaxLevel = _s2.S2CellId_kMaxLevel",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_swigregister = _s2.S2CellId_swigregister\nS2CellId_swigregister(S2CellId)\ndef S2CellId_Sentinel():\n    return _s2.S2CellId_Sentinel()\nS2CellId_Sentinel = _s2.S2CellId_Sentinel\ndef S2CellId_FromFacePosLevel(face, pos, level):\n    return _s2.S2CellId_FromFacePosLevel(face, pos, level)\nS2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel\ndef S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_Sentinel",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_Sentinel = _s2.S2CellId_Sentinel\ndef S2CellId_FromFacePosLevel(face, pos, level):\n    return _s2.S2CellId_FromFacePosLevel(face, pos, level)\nS2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel\ndef S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)\nS2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromFacePosLevel",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_FromFacePosLevel = _s2.S2CellId_FromFacePosLevel\ndef S2CellId_FromPoint(p):\n    return _s2.S2CellId_FromPoint(p)\nS2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromPoint",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_FromPoint = _s2.S2CellId_FromPoint\ndef S2CellId_FromLatLng(ll):\n    return _s2.S2CellId_FromLatLng(ll)\nS2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromLatLng",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_FromLatLng = _s2.S2CellId_FromLatLng\ndef S2CellId_GetSizeIJ(*args):\n    return _s2.S2CellId_GetSizeIJ(*args)\nS2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_GetSizeIJ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_GetSizeIJ = _s2.S2CellId_GetSizeIJ\ndef S2CellId_GetSizeST(*args):\n    return _s2.S2CellId_GetSizeST(*args)\nS2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_GetSizeST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_GetSizeST = _s2.S2CellId_GetSizeST\ndef S2CellId_Begin(level):\n    return _s2.S2CellId_Begin(level)\nS2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_Begin",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_Begin = _s2.S2CellId_Begin\ndef S2CellId_End(level):\n    return _s2.S2CellId_End(level)\nS2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_End",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_End = _s2.S2CellId_End\ndef S2CellId_FromToken(token):\n    return _s2.S2CellId_FromToken(token)\nS2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromToken",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_FromToken = _s2.S2CellId_FromToken\ndef S2CellId_FromFaceIJ(face, i, j):\n    return _s2.S2CellId_FromFaceIJ(face, i, j)\nS2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_FromFaceIJ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_FromFaceIJ = _s2.S2CellId_FromFaceIJ\ndef S2CellId_lsb_for_level(level):\n    return _s2.S2CellId_lsb_for_level(level)\nS2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Region, name)\n    def __init__(self, *args, **kwargs):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellId_lsb_for_level",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellId_lsb_for_level = _s2.S2CellId_lsb_for_level\nclass S2Region(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Region, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Region, name)\n    def __init__(self, *args, **kwargs):\n        raise AttributeError(\"No constructor defined - class is abstract\")\n    __repr__ = _swig_repr\n    __swig_destroy__ = _s2.delete_S2Region",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Region_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Region_swigregister = _s2.S2Region_swigregister\nS2Region_swigregister(S2Region)\nclass S2Cap(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cap, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_swigregister = _s2.S2Cap_swigregister\nS2Cap_swigregister(S2Cap)\ndef S2Cap_FromAxisHeight(axis, height):\n    return _s2.S2Cap_FromAxisHeight(axis, height)\nS2Cap_FromAxisHeight = _s2.S2Cap_FromAxisHeight\ndef S2Cap_FromAxisAngle(axis, angle):\n    return _s2.S2Cap_FromAxisAngle(axis, angle)\nS2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle\ndef S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisHeight",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_FromAxisHeight = _s2.S2Cap_FromAxisHeight\ndef S2Cap_FromAxisAngle(axis, angle):\n    return _s2.S2Cap_FromAxisAngle(axis, angle)\nS2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle\ndef S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)\nS2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisAngle",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_FromAxisAngle = _s2.S2Cap_FromAxisAngle\ndef S2Cap_FromAxisArea(axis, area):\n    return _s2.S2Cap_FromAxisArea(axis, area)\nS2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_FromAxisArea",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_FromAxisArea = _s2.S2Cap_FromAxisArea\ndef S2Cap_Empty():\n    return _s2.S2Cap_Empty()\nS2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_Empty",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_Empty = _s2.S2Cap_Empty\ndef S2Cap_Full():\n    return _s2.S2Cap_Full()\nS2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cap_Full",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cap_Full = _s2.S2Cap_Full\nclass S2LatLng(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLng, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLng, name)\n    __repr__ = _swig_repr\n    def __init__(self, *args):\n        this = _s2.new_S2LatLng(*args)\n        try:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_swigregister = _s2.S2LatLng_swigregister\nS2LatLng_swigregister(S2LatLng)\ndef S2LatLng_Invalid():\n    return _s2.S2LatLng_Invalid()\nS2LatLng_Invalid = _s2.S2LatLng_Invalid\ndef S2LatLng_FromRadians(lat_radians, lng_radians):\n    return _s2.S2LatLng_FromRadians(lat_radians, lng_radians)\nS2LatLng_FromRadians = _s2.S2LatLng_FromRadians\ndef S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Invalid",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_Invalid = _s2.S2LatLng_Invalid\ndef S2LatLng_FromRadians(lat_radians, lng_radians):\n    return _s2.S2LatLng_FromRadians(lat_radians, lng_radians)\nS2LatLng_FromRadians = _s2.S2LatLng_FromRadians\ndef S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)\nS2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromRadians",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromRadians = _s2.S2LatLng_FromRadians\ndef S2LatLng_FromDegrees(lat_degrees, lng_degrees):\n    return _s2.S2LatLng_FromDegrees(lat_degrees, lng_degrees)\nS2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromDegrees",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromDegrees = _s2.S2LatLng_FromDegrees\ndef S2LatLng_FromE5(lat_e5, lng_e5):\n    return _s2.S2LatLng_FromE5(lat_e5, lng_e5)\nS2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE5",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromE5 = _s2.S2LatLng_FromE5\ndef S2LatLng_FromE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromE6(lat_e6, lng_e6)\nS2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE6",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromE6 = _s2.S2LatLng_FromE6\ndef S2LatLng_FromE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromE7(lat_e7, lng_e7)\nS2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromE7",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromE7 = _s2.S2LatLng_FromE7\ndef S2LatLng_FromUnsignedE6(lat_e6, lng_e6):\n    return _s2.S2LatLng_FromUnsignedE6(lat_e6, lng_e6)\nS2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromUnsignedE6",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromUnsignedE6 = _s2.S2LatLng_FromUnsignedE6\ndef S2LatLng_FromUnsignedE7(lat_e7, lng_e7):\n    return _s2.S2LatLng_FromUnsignedE7(lat_e7, lng_e7)\nS2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_FromUnsignedE7",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_FromUnsignedE7 = _s2.S2LatLng_FromUnsignedE7\ndef S2LatLng_Latitude(p):\n    return _s2.S2LatLng_Latitude(p)\nS2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Latitude",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_Latitude = _s2.S2LatLng_Latitude\ndef S2LatLng_Longitude(p):\n    return _s2.S2LatLng_Longitude(p)\nS2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)\n    __swig_getmethods__ = {}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLng_Longitude",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLng_Longitude = _s2.S2LatLng_Longitude\nclass S2LatLngRect(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2LatLngRect, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2LatLngRect, name)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_swigregister = _s2.S2LatLngRect_swigregister\nS2LatLngRect_swigregister(S2LatLngRect)\ndef S2LatLngRect_FromCenterSize(center, size):\n    return _s2.S2LatLngRect_FromCenterSize(center, size)\nS2LatLngRect_FromCenterSize = _s2.S2LatLngRect_FromCenterSize\ndef S2LatLngRect_FromPoint(p):\n    return _s2.S2LatLngRect_FromPoint(p)\nS2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint\ndef S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromCenterSize",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_FromCenterSize = _s2.S2LatLngRect_FromCenterSize\ndef S2LatLngRect_FromPoint(p):\n    return _s2.S2LatLngRect_FromPoint(p)\nS2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint\ndef S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)\nS2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromPoint",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_FromPoint = _s2.S2LatLngRect_FromPoint\ndef S2LatLngRect_FromPointPair(p1, p2):\n    return _s2.S2LatLngRect_FromPointPair(p1, p2)\nS2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FromPointPair",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_FromPointPair = _s2.S2LatLngRect_FromPointPair\ndef S2LatLngRect_Empty():\n    return _s2.S2LatLngRect_Empty()\nS2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_Empty",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_Empty = _s2.S2LatLngRect_Empty\ndef S2LatLngRect_Full():\n    return _s2.S2LatLngRect_Full()\nS2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_Full",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_Full = _s2.S2LatLngRect_Full\ndef S2LatLngRect_FullLat():\n    return _s2.S2LatLngRect_FullLat()\nS2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FullLat",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_FullLat = _s2.S2LatLngRect_FullLat\ndef S2LatLngRect_FullLng():\n    return _s2.S2LatLngRect_FullLng()\nS2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)\n    __repr__ = _swig_repr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2LatLngRect_FullLng",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2LatLngRect_FullLng = _s2.S2LatLngRect_FullLng\nclass S2RegionCoverer(_object):\n    __swig_setmethods__ = {}\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2RegionCoverer, name, value)\n    __swig_getmethods__ = {}\n    __getattr__ = lambda self, name: _swig_getattr(self, S2RegionCoverer, name)\n    __repr__ = _swig_repr\n    kDefaultMaxCells = _s2.S2RegionCoverer_kDefaultMaxCells\n    def __init__(self):\n        this = _s2.new_S2RegionCoverer()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2RegionCoverer_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2RegionCoverer_swigregister = _s2.S2RegionCoverer_swigregister\nS2RegionCoverer_swigregister(S2RegionCoverer)\ndef S2RegionCoverer_GetSimpleCovering(region, start, level):\n    return _s2.S2RegionCoverer_GetSimpleCovering(region, start, level)\nS2RegionCoverer_GetSimpleCovering = _s2.S2RegionCoverer_GetSimpleCovering\nclass S2Cell(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2RegionCoverer_GetSimpleCovering",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2RegionCoverer_GetSimpleCovering = _s2.S2RegionCoverer_GetSimpleCovering\nclass S2Cell(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2Cell, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2Cell, name)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cell_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cell_swigregister = _s2.S2Cell_swigregister\nS2Cell_swigregister(S2Cell)\ndef S2Cell_FromFacePosLevel(face, pos, level):\n    return _s2.S2Cell_FromFacePosLevel(face, pos, level)\nS2Cell_FromFacePosLevel = _s2.S2Cell_FromFacePosLevel\nclass S2CellUnion(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2Cell_FromFacePosLevel",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2Cell_FromFacePosLevel = _s2.S2Cell_FromFacePosLevel\nclass S2CellUnion(S2Region):\n    __swig_setmethods__ = {}\n    for _s in [S2Region]:\n        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))\n    __setattr__ = lambda self, name, value: _swig_setattr(self, S2CellUnion, name, value)\n    __swig_getmethods__ = {}\n    for _s in [S2Region]:\n        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))\n    __getattr__ = lambda self, name: _swig_getattr(self, S2CellUnion, name)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "S2CellUnion_swigregister",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "peekOfCode": "S2CellUnion_swigregister = _s2.S2CellUnion_swigregister\nS2CellUnion_swigregister(S2CellUnion)\n# This file is compatible with both classic and new-style classes.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.python.s2",
        "documentation": {}
    },
    {
        "label": "PyWrapS2TestCase",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "peekOfCode": "class PyWrapS2TestCase(googletest.TestCase):\n  def testContainsIsWrappedCorrectly(self):\n    london = S2LatLngRect(S2LatLng.FromDegrees(51.3368602, 0.4931979),\n                          S2LatLng.FromDegrees(51.7323965, 0.1495211))\n    e14lj = S2LatLngRect(S2LatLng.FromDegrees(51.5213527, -0.0476026),\n                         S2LatLng.FromDegrees(51.5213527, -0.0476026))\n    self.failUnless(london.Contains(e14lj))\n  def testS2CellIdEqualsIsWrappedCorrectly(self):\n    london = S2LatLng.FromDegrees(51.5001525, -0.1262355)\n    cell = S2CellId.FromLatLng(london)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "peekOfCode": "def main(argv):\n  googletest.main()\nif __name__ == \"__main__\":\n  app.run()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.geometry.pywraps2_test",
        "documentation": {}
    },
    {
        "label": "S2TestCase",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.test",
        "peekOfCode": "class S2TestCase(unittest.TestCase):\n  def testContainsIsWrappedCorrectly(self):\n    london = S2LatLngRect(S2LatLng.FromDegrees(51.3368602, 0.4931979),\n                          S2LatLng.FromDegrees(51.7323965, 0.1495211))\n    e14lj = S2LatLngRect(S2LatLng.FromDegrees(51.5213527, -0.0476026),\n                         S2LatLng.FromDegrees(51.5213527, -0.0476026))\n    self.failUnless(london.Contains(e14lj))\n  def testS2CellIdEqualsIsWrappedCorrectly(self):\n    london = S2LatLng.FromDegrees(51.5001525, -0.1262355)\n    cell = S2CellId.FromLatLng(london)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.google-s2-geometry.test",
        "documentation": {}
    },
    {
        "label": "_NullDict",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _NullDict(object):\n    __contains__ = lambda self: False\n    keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n    \"\"\"Base AST node.\"\"\"\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    def IsDeclaration(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Node(object):\n    \"\"\"Base AST node.\"\"\"\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    def IsDeclaration(self):\n        \"\"\"Returns bool if this node is a declaration.\"\"\"\n        return False\n    def IsDefinition(self):\n        \"\"\"Returns bool if this node is a definition.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Define",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Define(Node):\n    def __init__(self, start, end, name, definition):\n        Node.__init__(self, start, end)\n        self.name = name\n        self.definition = definition\n    def __str__(self):\n        value = '%s %s' % (self.name, self.definition)\n        return self._StringHelper(self.__class__.__name__, value)\nclass Include(Node):\n    def __init__(self, start, end, filename, system):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Include",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Include(Node):\n    def __init__(self, start, end, filename, system):\n        Node.__init__(self, start, end)\n        self.filename = filename\n        self.system = system\n    def __str__(self):\n        fmt = '\"%s\"'\n        if self.system:\n            fmt = '<%s>'\n        return self._StringHelper(self.__class__.__name__, fmt % self.filename)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Goto",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Goto(Node):\n    def __init__(self, start, end, label):\n        Node.__init__(self, start, end)\n        self.label = label\n    def __str__(self):\n        return self._StringHelper(self.__class__.__name__, str(self.label))\nclass Expr(Node):\n    def __init__(self, start, end, expr):\n        Node.__init__(self, start, end)\n        self.expr = expr",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Expr",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Expr(Node):\n    def __init__(self, start, end, expr):\n        Node.__init__(self, start, end)\n        self.expr = expr\n    def Requires(self, node):\n        # TODO(nnorwitz): impl.\n        return False\n    def __str__(self):\n        return self._StringHelper(self.__class__.__name__, str(self.expr))\nclass Return(Expr):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Return(Expr):\n    pass\nclass Delete(Expr):\n    pass\nclass Friend(Expr):\n    def __init__(self, start, end, expr, namespace):\n        Expr.__init__(self, start, end, expr)\n        self.namespace = namespace[:]\nclass Using(Node):\n    def __init__(self, start, end, names):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Delete",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Delete(Expr):\n    pass\nclass Friend(Expr):\n    def __init__(self, start, end, expr, namespace):\n        Expr.__init__(self, start, end, expr)\n        self.namespace = namespace[:]\nclass Using(Node):\n    def __init__(self, start, end, names):\n        Node.__init__(self, start, end)\n        self.names = names",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Friend",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Friend(Expr):\n    def __init__(self, start, end, expr, namespace):\n        Expr.__init__(self, start, end, expr)\n        self.namespace = namespace[:]\nclass Using(Node):\n    def __init__(self, start, end, names):\n        Node.__init__(self, start, end)\n        self.names = names\n    def __str__(self):\n        return self._StringHelper(self.__class__.__name__, str(self.names))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Using",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Using(Node):\n    def __init__(self, start, end, names):\n        Node.__init__(self, start, end)\n        self.names = names\n    def __str__(self):\n        return self._StringHelper(self.__class__.__name__, str(self.names))\nclass Parameter(Node):\n    def __init__(self, start, end, name, parameter_type, default):\n        Node.__init__(self, start, end)\n        self.name = name",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Parameter",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Parameter(Node):\n    def __init__(self, start, end, name, parameter_type, default):\n        Node.__init__(self, start, end)\n        self.name = name\n        self.type = parameter_type\n        self.default = default\n    def Requires(self, node):\n        # TODO(nnorwitz): handle namespaces, etc.\n        return self.type.name == node.name\n    def __str__(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_GenericDeclaration",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _GenericDeclaration(Node):\n    def __init__(self, start, end, name, namespace):\n        Node.__init__(self, start, end)\n        self.name = name\n        self.namespace = namespace[:]\n    def FullName(self):\n        prefix = ''\n        if self.namespace and self.namespace[-1]:\n            prefix = '::'.join(self.namespace) + '::'\n        return prefix + self.name",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "VariableDeclaration",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class VariableDeclaration(_GenericDeclaration):\n    def __init__(self, start, end, name, var_type, initial_value, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.type = var_type\n        self.initial_value = initial_value\n    def Requires(self, node):\n        # TODO(nnorwitz): handle namespaces, etc.\n        return self.type.name == node.name\n    def ToString(self):\n        \"\"\"Return a string that tries to reconstitute the variable decl.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Typedef",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Typedef(_GenericDeclaration):\n    def __init__(self, start, end, name, alias, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.alias = alias\n    def IsDefinition(self):\n        return True\n    def IsExportable(self):\n        return True\n    def Requires(self, node):\n        # TODO(nnorwitz): handle namespaces, etc.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_NestedType",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class _NestedType(_GenericDeclaration):\n    def __init__(self, start, end, name, fields, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.fields = fields\n    def IsDefinition(self):\n        return True\n    def IsExportable(self):\n        return True\n    def __str__(self):\n        suffix = '%s, {%s}' % (self.name, self.fields)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Union",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Union(_NestedType):\n    pass\nclass Enum(_NestedType):\n    pass\nclass Class(_GenericDeclaration):\n    def __init__(self, start, end, name, bases, templated_types, body, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.bases = bases\n        self.body = body\n        self.templated_types = templated_types",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Enum",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Enum(_NestedType):\n    pass\nclass Class(_GenericDeclaration):\n    def __init__(self, start, end, name, bases, templated_types, body, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.bases = bases\n        self.body = body\n        self.templated_types = templated_types\n    def IsDeclaration(self):\n        return self.bases is None and self.body is None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Class",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Class(_GenericDeclaration):\n    def __init__(self, start, end, name, bases, templated_types, body, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        self.bases = bases\n        self.body = body\n        self.templated_types = templated_types\n    def IsDeclaration(self):\n        return self.bases is None and self.body is None\n    def IsDefinition(self):\n        return not self.IsDeclaration()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Struct",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Struct(Class):\n    pass\nclass Function(_GenericDeclaration):\n    def __init__(self, start, end, name, return_type, parameters,\n                 modifiers, templated_types, body, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        converter = TypeConverter(namespace)\n        self.return_type = converter.CreateReturnType(return_type)\n        self.parameters = converter.ToParameters(parameters)\n        self.modifiers = modifiers",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Function",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Function(_GenericDeclaration):\n    def __init__(self, start, end, name, return_type, parameters,\n                 modifiers, templated_types, body, namespace):\n        _GenericDeclaration.__init__(self, start, end, name, namespace)\n        converter = TypeConverter(namespace)\n        self.return_type = converter.CreateReturnType(return_type)\n        self.parameters = converter.ToParameters(parameters)\n        self.modifiers = modifiers\n        self.body = body\n        self.templated_types = templated_types",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Method(Function):\n    def __init__(self, start, end, name, in_class, return_type, parameters,\n                 modifiers, templated_types, body, namespace):\n        Function.__init__(self, start, end, name, return_type, parameters,\n                          modifiers, templated_types, body, namespace)\n        # TODO(nnorwitz): in_class could also be a namespace which can\n        # mess up finding functions properly.\n        self.in_class = in_class\nclass Type(_GenericDeclaration):\n    \"\"\"Type used for any variable (eg class, primitive, struct, etc).\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "Type",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class Type(_GenericDeclaration):\n    \"\"\"Type used for any variable (eg class, primitive, struct, etc).\"\"\"\n    def __init__(self, start, end, name, templated_types, modifiers,\n                 reference, pointer, array):\n        \"\"\"\n        Args:\n          name: str name of main type\n          templated_types: [Class (Type?)] template type info between <>\n          modifiers: [str] type modifiers (keywords) eg, const, mutable, etc.\n          reference, pointer, array: bools",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TypeConverter",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class TypeConverter(object):\n    def __init__(self, namespace_stack):\n        self.namespace_stack = namespace_stack\n    def _GetTemplateEnd(self, tokens, start):\n        count = 1\n        end = start\n        while 1:\n            token = tokens[end]\n            end += 1\n            if token.name == '<':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "AstBuilder",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "class AstBuilder(object):\n    def __init__(self, token_stream, filename, in_class='', visibility=None,\n                 namespace_stack=[]):\n        self.tokens = token_stream\n        self.filename = filename\n        # TODO(nnorwitz): use a better data structure (deque) for the queue.\n        # Switching directions of the \"queue\" improved perf by about 25%.\n        # Using a deque should be even better since we access from both sides.\n        self.token_queue = []\n        self.namespace_stack = namespace_stack[:]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "BuilderFromSource",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def BuilderFromSource(source, filename):\n    \"\"\"Utility method that returns an AstBuilder from source code.\n    Args:\n      source: 'C++ source code'\n      filename: 'file1'\n    Returns:\n      AstBuilder\n    \"\"\"\n    return AstBuilder(tokenize.GetTokens(source), filename)\ndef PrintIndentifiers(filename, should_print):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "PrintIndentifiers",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def PrintIndentifiers(filename, should_print):\n    \"\"\"Prints all identifiers for a C++ source file.\n    Args:\n      filename: 'file1'\n      should_print: predicate with signature: bool Function(token)\n    \"\"\"\n    source = utils.ReadFile(filename, False)\n    if source is None:\n        sys.stderr.write('Unable to find: %s\\n' % filename)\n        return",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "PrintAllIndentifiers",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def PrintAllIndentifiers(filenames, should_print):\n    \"\"\"Prints all identifiers for each C++ source file in filenames.\n    Args:\n      filenames: ['file1', 'file2', ...]\n      should_print: predicate with signature: bool Function(token)\n    \"\"\"\n    for path in filenames:\n        PrintIndentifiers(path, should_print)\ndef main(argv):\n    for filename in argv[1:]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "def main(argv):\n    for filename in argv[1:]:\n        source = utils.ReadFile(filename)\n        if source is None:\n            continue\n        print('Processing %s' % filename)\n        builder = BuilderFromSource(source, filename)\n        try:\n            entire_ast = filter(None, builder.Generate())\n        except KeyboardInterrupt:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\n# TODO:\n#  * Tokens should never be exported, need to convert to Nodes\n#    (return types, parameters, etc.)\n#  * Handle static class data for templatized classes\n#  * Handle casts (both C++ and C-style)\n#  * Handle conditions and loops (if/else, switch, for, while/do)\n#\n# TODO much, much later:\n#  * Handle #define",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_NONE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_NONE = 0x00\nFUNCTION_CONST = 0x01\nFUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_CONST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_CONST = 0x01\nFUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_VIRTUAL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_VIRTUAL = 0x02\nFUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_PURE_VIRTUAL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_PURE_VIRTUAL = 0x04\nFUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_CTOR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_CTOR = 0x08\nFUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_DTOR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_DTOR = 0x10\nFUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_ATTRIBUTE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_ATTRIBUTE = 0x20\nFUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_UNKNOWN_ANNOTATION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_UNKNOWN_ANNOTATION = 0x40\nFUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_THROW",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_THROW = 0x80\nFUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "FUNCTION_OVERRIDE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "FUNCTION_OVERRIDE = 0x100\n\"\"\"\nThese are currently unused.  Should really handle these properly at some point.\nTYPE_MODIFIER_INLINE   = 0x010000\nTYPE_MODIFIER_EXTERN   = 0x020000\nTYPE_MODIFIER_STATIC   = 0x040000\nTYPE_MODIFIER_CONST    = 0x080000\nTYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_REGISTER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_REGISTER = 0x100000\nTYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000\nTYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_VOLATILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_VOLATILE = 0x200000\nTYPE_MODIFIER_MUTABLE  = 0x400000\nTYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,\n    'mutable': TYPE_MODIFIER_MUTABLE,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIER_MAP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "TYPE_MODIFIER_MAP = {\n    'inline': TYPE_MODIFIER_INLINE,\n    'extern': TYPE_MODIFIER_EXTERN,\n    'static': TYPE_MODIFIER_STATIC,\n    'const': TYPE_MODIFIER_CONST,\n    'register': TYPE_MODIFIER_REGISTER,\n    'volatile': TYPE_MODIFIER_VOLATILE,\n    'mutable': TYPE_MODIFIER_MUTABLE,\n    }\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_INTERNAL_TOKEN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "_INTERNAL_TOKEN = 'internal'\n_NAMESPACE_POP = 'ns-pop'\n# TODO(nnorwitz): use this as a singleton for templated_types, etc\n# where we don't want to create a new empty dict each time.  It is also const.\nclass _NullDict(object):\n    __contains__ = lambda self: False\n    keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n    \"\"\"Base AST node.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "_NAMESPACE_POP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "peekOfCode": "_NAMESPACE_POP = 'ns-pop'\n# TODO(nnorwitz): use this as a singleton for templated_types, etc\n# where we don't want to create a new empty dict each time.  It is also const.\nclass _NullDict(object):\n    __contains__ = lambda self: False\n    keys = values = items = iterkeys = itervalues = iteritems = lambda self: ()\n# TODO(nnorwitz): move AST nodes into a separate module.\nclass Node(object):\n    \"\"\"Base AST node.\"\"\"\n    def __init__(self, start, end):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.ast",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "def main(argv=sys.argv):\n  if len(argv) < 2:\n    sys.stderr.write('Google Mock Class Generator v%s\\n\\n' %\n                     '.'.join(map(str, _VERSION)))\n    sys.stderr.write(__doc__)\n    return 1\n  global _INDENT\n  try:\n    _INDENT = int(os.environ['INDENT'])\n  except KeyError:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\nimport os\nimport re\nimport sys\nfrom cpp import ast\nfrom cpp import utils\n# Preserve compatibility with Python 2.3.\ntry:\n  _dummy = set\nexcept NameError:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "_VERSION = (1, 0, 1)  # The version of this script.\n# How many spaces to indent.  Can set me with the INDENT environment variable.\n_INDENT = 2\ndef _GenerateMethods(output_lines, source, class_node):\n  function_type = (ast.FUNCTION_VIRTUAL | ast.FUNCTION_PURE_VIRTUAL |\n                   ast.FUNCTION_OVERRIDE)\n  ctor_or_dtor = ast.FUNCTION_CTOR | ast.FUNCTION_DTOR\n  indent = ' ' * _INDENT\n  for node in class_node.body:\n    # We only care about virtual functions.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "_INDENT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "peekOfCode": "_INDENT = 2\ndef _GenerateMethods(output_lines, source, class_node):\n  function_type = (ast.FUNCTION_VIRTUAL | ast.FUNCTION_PURE_VIRTUAL |\n                   ast.FUNCTION_OVERRIDE)\n  ctor_or_dtor = ast.FUNCTION_CTOR | ast.FUNCTION_DTOR\n  indent = ' ' * _INDENT\n  for node in class_node.body:\n    # We only care about virtual functions.\n    if (isinstance(node, ast.Function) and\n        node.modifiers & function_type and",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class TestCase(unittest.TestCase):\n  \"\"\"Helper class that adds assert methods.\"\"\"\n  def StripLeadingWhitespace(self, lines):\n    \"\"\"Strip leading whitespace in each line in 'lines'.\"\"\"\n    return '\\n'.join([s.lstrip() for s in lines.split('\\n')])\n  def assertEqualIgnoreLeadingWhitespace(self, expected_lines, lines):\n    \"\"\"Specialized assert that ignores the indent level.\"\"\"\n    self.assertEqual(expected_lines, self.StripLeadingWhitespace(lines))\nclass GenerateMethodsTest(TestCase):\n  def GenerateMethodSource(self, cpp_source):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "GenerateMethodsTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class GenerateMethodsTest(TestCase):\n  def GenerateMethodSource(self, cpp_source):\n    \"\"\"Convert C++ source to Google Mock output source lines.\"\"\"\n    method_source_lines = []\n    # <test> is a pseudo-filename, it is not read or written.\n    builder = ast.BuilderFromSource(cpp_source, '<test>')\n    ast_list = list(builder.Generate())\n    gmock_class._GenerateMethods(method_source_lines, cpp_source, ast_list[0])\n    return '\\n'.join(method_source_lines)\n  def testSimpleMethod(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar();\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD0(Bar,\\nint());',\n        self.GenerateMethodSource(source))\n  def testSimpleConstructorsAndDestructor(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo();\n  Foo(int x);\n  Foo(const Foo& f);\n  Foo(Foo&& f);\n  ~Foo();\n  virtual int Bar() = 0;\n};\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual ~Foo();\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The destructor should be ignored.\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD0(Bar,\\nint());',\n        self.GenerateMethodSource(source))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo() = default;\n  Foo(const Foo& f) = default;\n  Foo(Foo&& f) = default;\n  ~Foo() = default;\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The constructors and destructor should be ignored.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  Foo() = delete;\n  Foo(const Foo& f) = delete;\n  Foo(Foo&& f) = delete;\n  ~Foo() = delete;\n  virtual int Bar() = 0;\n};\n\"\"\"\n    # The constructors and destructor should be ignored.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  int Bar() override;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD0(Bar,\\nint());',\n        self.GenerateMethodSource(source))\n  def testSimpleConstMethod(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(bool flag) const;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_CONST_METHOD1(Bar,\\nvoid(bool flag));',\n        self.GenerateMethodSource(source))\n  def testExplicitVoid(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar(void);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD0(Bar,\\nint(void));',\n        self.GenerateMethodSource(source))\n  def testStrangeNewlineInParameter(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int\na) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nvoid(int a));',\n        self.GenerateMethodSource(source))\n  def testDefaultParameters(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a, char c = 'x') = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD2(Bar,\\nvoid(int, char));',\n        self.GenerateMethodSource(source))\n  def testMultipleDefaultParameters(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a = 42, char c = 'x') = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD2(Bar,\\nvoid(int, char));',\n        self.GenerateMethodSource(source))\n  def testRemovesCommentsWhenDefaultsArePresent(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a = 42 /* a comment */,\n                   char /* other comment */ c= 'x') = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD2(Bar,\\nvoid(int, char));',\n        self.GenerateMethodSource(source))\n  def testDoubleSlashCommentsInParameterListAreRemoved(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual void Bar(int a,  // inline comments should be elided.\n                   int b   // inline comments should be elided.\n                   ) const = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_CONST_METHOD2(Bar,\\nvoid(int a, int b));',\n        self.GenerateMethodSource(source))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual const string& Bar(int /* keeper */, int b);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD2(Bar,\\nconst string&(int /* keeper */, int b));',\n        self.GenerateMethodSource(source))\n  def testArgsOfTemplateTypes(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar(const vector<int>& v, map<int, string>* output);\n};\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD2(Bar,\\n'\n        'int(const vector<int>& v, map<int, string>* output));',\n        self.GenerateMethodSource(source))\n  def testReturnTypeWithOneTemplateArg(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual vector<int>* Bar(int n);\n};\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nvector<int>*(int n));',\n        self.GenerateMethodSource(source))\n  def testReturnTypeWithManyTemplateArgs(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual map<int, string> Bar();\n};\"\"\"\n    # Comparing the comment text is brittle - we'll think of something\n    # better in case this gets annoying, but for now let's keep it simple.\n    self.assertEqualIgnoreLeadingWhitespace(\n        '// The following line won\\'t really compile, as the return\\n'\n        '// type has multiple template arguments.  To fix it, use a\\n'\n        '// typedef for the return type.\\n'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n public:\n  virtual int Bar();\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD0_T(Bar,\\nint());',\n        self.GenerateMethodSource(source))\n  def testPointerArgWithoutNames(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C*);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nint(C*));',\n        self.GenerateMethodSource(source))\n  def testReferenceArgWithoutNames(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C&);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nint(C&));',\n        self.GenerateMethodSource(source))\n  def testArrayArgWithoutNames(self):\n    source = \"\"\"\nclass Foo {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Fo",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Foo {\n  virtual int Bar(C[]);\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nint(C[]));',\n        self.GenerateMethodSource(source))\nclass GenerateMocksTest(TestCase):\n  def GenerateMocks(self, cpp_source):\n    \"\"\"Convert C++ source to complete Google Mock output source.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "GenerateMocksTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class GenerateMocksTest(TestCase):\n  def GenerateMocks(self, cpp_source):\n    \"\"\"Convert C++ source to complete Google Mock output source.\"\"\"\n    # <test> is a pseudo-filename, it is not read or written.\n    filename = '<test>'\n    builder = ast.BuilderFromSource(cpp_source, filename)\n    ast_list = list(builder.Generate())\n    lines = gmock_class._GenerateMocks(filename, cpp_source, ast_list, None)\n    return '\\n'.join(lines)\n  def testNamespaces(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n}  // namespace Baz\n}  // namespace Foo\n\"\"\"\n    expected = \"\"\"\\\nnamespace Foo {\nnamespace Baz {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD0(Foo,\nvoid());\n};\n}  // namespace Baz\n}  // namespace Foo\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "STORAGE_SPECIFIE",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class STORAGE_SPECIFIER Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD0(Foo,\nvoid());",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD0(Foo,\nvoid());\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\n  def testTemplatedForwardDeclaration(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD0(Foo,\nvoid());",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD0(Foo,\nvoid());\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\n  def testTemplatedClass(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  virtual void Foo();\n};\n\"\"\"\n    expected = \"\"\"\\\ntemplate <typename T0, typename T1>\nclass MockTest : public Test<T0, T1> {\npublic:\nMOCK_METHOD0_T(Foo,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test<T0, T1> {\npublic:\nMOCK_METHOD0_T(Foo,\nvoid());\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\n  def testTemplateInATemplateTypedef(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  typedef std::vector<std::list<int>> FooType;\n  virtual void Bar(const FooType& test_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD1(Bar,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD1(Bar,\nvoid(const FooType& test_arg));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\n  def testTemplateInATemplateTypedefWithComma(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  typedef std::function<void(\n      const vector<std::list<int>>&, int> FooType;\n  virtual void Bar(const FooType& test_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD1(Bar,\nvoid(const FooType& test_arg));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\n  def testEnumClass(self):\n    source = \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "Tes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class Test {\n public:\n  enum class Baz { BAZINGA };\n  virtual void Bar(const FooType& test_arg);\n};\n\"\"\"\n    expected = \"\"\"\\\nclass MockTest : public Test {\npublic:\nMOCK_METHOD1(Bar,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "MockTes",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "class MockTest : public Test {\npublic:\nMOCK_METHOD1(Bar,\nvoid(const FooType& test_arg));\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        expected, self.GenerateMocks(source))\nif __name__ == '__main__':\n  unittest.main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\nimport os\nimport sys\nimport unittest\n# Allow the cpp imports below to work when run as a standalone script.\nsys.path.append(os.path.join(os.path.dirname(__file__), '..'))\nfrom cpp import ast\nfrom cpp import gmock_class\nclass TestCase(unittest.TestCase):\n  \"\"\"Helper class that adds assert methods.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "a)",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "peekOfCode": "a) = 0;\n};\n\"\"\"\n    self.assertEqualIgnoreLeadingWhitespace(\n        'MOCK_METHOD1(Bar,\\nvoid(int a));',\n        self.GenerateMethodSource(source))\n  def testDefaultParameters(self):\n    source = \"\"\"\nclass Foo {\n public:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.gmock_class_test",
        "documentation": {}
    },
    {
        "label": "IsKeyword",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "def IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "IsBuiltinType",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "def IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\ntry:\n    # Python 3.x\n    import builtins\nexcept ImportError:\n    # Python 2.x\n    import __builtin__ as builtins\nif not hasattr(builtins, 'set'):\n    # Nominal support for Python 2.3.\n    from sets import Set as set",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "TYPES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "TYPES = set('bool char int long short double float void wchar_t unsigned signed'.split())\nTYPE_MODIFIERS = set('auto register const inline extern static virtual volatile mutable'.split())\nACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "TYPE_MODIFIERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "TYPE_MODIFIERS = set('auto register const inline extern static virtual volatile mutable'.split())\nACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "ACCESS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "ACCESS = set('public protected private friend'.split())\nCASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "CASTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "CASTS = set('static_cast const_cast dynamic_cast reinterpret_cast'.split())\nOTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "OTHERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "OTHERS = set('true false asm class namespace using explicit this operator sizeof'.split())\nOTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "OTHER_TYPES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "OTHER_TYPES = set('new delete typedef struct union enum typeid typename template'.split())\nCONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "CONTROL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "CONTROL = set('case switch default if else return goto'.split())\nEXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "EXCEPTION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "EXCEPTION = set('try catch throw'.split())\nLOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "LOOP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "LOOP = set('while do for break continue'.split())\nALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "ALL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "peekOfCode": "ALL = TYPES | TYPE_MODIFIERS | ACCESS | CASTS | OTHERS | OTHER_TYPES | CONTROL | EXCEPTION | LOOP\ndef IsKeyword(token):\n    return token in ALL\ndef IsBuiltinType(token):\n    if token in ('virtual', 'inline'):\n        # These only apply to methods, they can't be types by themselves.\n        return False\n    return token in TYPES or token in TYPE_MODIFIERS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.keywords",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "class Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source\n    end contains the index of the last char of the token in the source\n    \"\"\"\n    def __init__(self, token_type, name, start, end):\n        self.token_type = token_type\n        self.name = name",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "GetTokens",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "def GetTokens(source):\n    \"\"\"Returns a sequence of Tokens.\n    Args:\n      source: string of C++ source code.\n    Yields:\n      Token that represents the next token in the source.\n    \"\"\"\n    # Cache various valid character sets for speed.\n    valid_identifier_chars = VALID_IDENTIFIER_CHARS\n    hex_digits = HEX_DIGITS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\ntry:\n    # Python 3.x\n    import builtins\nexcept ImportError:\n    # Python 2.x\n    import __builtin__ as builtins\nimport sys\nfrom cpp import utils\nif not hasattr(builtins, 'set'):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "_letters",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "_letters = 'abcdefghijklmnopqrstuvwxyz'\nVALID_IDENTIFIER_CHARS = set(_letters + _letters.upper() + '_0123456789$')\nHEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "VALID_IDENTIFIER_CHARS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "VALID_IDENTIFIER_CHARS = set(_letters + _letters.upper() + '_0123456789$')\nHEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "HEX_DIGITS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "HEX_DIGITS = set('0123456789abcdefABCDEF')\nINT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "INT_OR_FLOAT_DIGITS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "INT_OR_FLOAT_DIGITS = set('01234567890eE-+')\n# C++0x string preffixes.\n_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "_STR_PREFIXES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "_STR_PREFIXES = set(('R', 'u8', 'u8R', 'u', 'uR', 'U', 'UR', 'L', 'LR'))\n# Token types.\nUNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "UNKNOWN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "UNKNOWN = 'UNKNOWN'\nSYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "SYNTAX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "SYNTAX = 'SYNTAX'\nCONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "CONSTANT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "CONSTANT = 'CONSTANT'\nNAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "NAME = 'NAME'\nPREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "PREPROCESSOR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "peekOfCode": "PREPROCESSOR = 'PREPROCESSOR'\n# Where the token originated from.  This can be used for backtracking.\n# It is always set to WHENCE_STREAM in this code.\nWHENCE_STREAM, WHENCE_QUEUE = range(2)\nclass Token(object):\n    \"\"\"Data container to represent a C++ token.\n    Tokens can be identifiers, syntax char(s), constants, or\n    pre-processor directives.\n    start contains the index of the first char of the token in the source\n    end contains the index of the last char of the token in the source",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.tokenize",
        "documentation": {}
    },
    {
        "label": "ReadFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "peekOfCode": "def ReadFile(filename, print_error=True):\n    \"\"\"Returns the contents of a file.\"\"\"\n    try:\n        fp = open(filename)\n        try:\n            return fp.read()\n        finally:\n            fp.close()\n    except IOError:\n        if print_error:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\nimport sys\n# Set to True to see the start/end token indices.\nDEBUG = True\ndef ReadFile(filename, print_error=True):\n    \"\"\"Returns the contents of a file.\"\"\"\n    try:\n        fp = open(filename)\n        try:\n            return fp.read()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "peekOfCode": "DEBUG = True\ndef ReadFile(filename, print_error=True):\n    \"\"\"Returns the contents of a file.\"\"\"\n    try:\n        fp = open(filename)\n        try:\n            return fp.read()\n        finally:\n            fp.close()\n    except IOError:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.cpp.utils",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.gmock_gen",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.gmock_gen",
        "peekOfCode": "__author__ = 'nnorwitz@google.com (Neal Norwitz)'\nimport os\nimport sys\nif __name__ == '__main__':\n  # Add the directory of this script to the path so we can import gmock_class.\n  sys.path.append(os.path.dirname(__file__))\n  from cpp import gmock_class\n  # Fix the docstring in case they require the usage.\n  gmock_class.__doc__ = gmock_class.__doc__.replace('gmock_class.py', __file__)\n  gmock_class.main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.generator.gmock_gen",
        "documentation": {}
    },
    {
        "label": "GetGTestRootDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))\n  gtest.VerifyFileExists(gmock_root, GMOCK_H_SEED)\n  gtest.VerifyFileExists(gmock_root, GMOCK_ALL_CC_SEED)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "ValidateGMockRootDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))\n  gtest.VerifyFileExists(gmock_root, GMOCK_H_SEED)\n  gtest.VerifyFileExists(gmock_root, GMOCK_ALL_CC_SEED)\ndef ValidateOutputDir(output_dir):\n  \"\"\"Makes sure output_dir points to a valid output directory.\n  The function aborts the program on failure.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "ValidateOutputDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def ValidateOutputDir(output_dir):\n  \"\"\"Makes sure output_dir points to a valid output directory.\n  The function aborts the program on failure.\n  \"\"\"\n  gtest.VerifyOutputFile(output_dir, gtest.GTEST_H_OUTPUT)\n  gtest.VerifyOutputFile(output_dir, GMOCK_H_OUTPUT)\n  gtest.VerifyOutputFile(output_dir, GMOCK_GTEST_ALL_CC_OUTPUT)\ndef FuseGMockH(gmock_root, output_dir):\n  \"\"\"Scans folder gmock_root to generate gmock/gmock.h in output_dir.\"\"\"\n  output_file = file(os.path.join(output_dir, GMOCK_H_OUTPUT), 'w')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockH",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockH(gmock_root, output_dir):\n  \"\"\"Scans folder gmock_root to generate gmock/gmock.h in output_dir.\"\"\"\n  output_file = file(os.path.join(output_dir, GMOCK_H_OUTPUT), 'w')\n  processed_files = sets.Set()  # Holds all gmock headers we've processed.\n  def ProcessFile(gmock_header_path):\n    \"\"\"Processes the given gmock header file.\"\"\"\n    # We don't process the same header twice.\n    if gmock_header_path in processed_files:\n      return\n    processed_files.add(gmock_header_path)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockAllCcToFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockAllCcToFile(gmock_root, output_file):\n  \"\"\"Scans folder gmock_root to fuse gmock-all.cc into output_file.\"\"\"\n  processed_files = sets.Set()\n  def ProcessFile(gmock_source_file):\n    \"\"\"Processes the given gmock source file.\"\"\"\n    # We don't process the same #included file twice.\n    if gmock_source_file in processed_files:\n      return\n    processed_files.add(gmock_source_file)\n    # Reads each line in the given gmock source file.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMockGTestAllCc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMockGTestAllCc(gmock_root, output_dir):\n  \"\"\"Scans folder gmock_root to generate gmock-gtest-all.cc in output_dir.\"\"\"\n  output_file = file(os.path.join(output_dir, GMOCK_GTEST_ALL_CC_OUTPUT), 'w')\n  # First, fuse gtest-all.cc into gmock-gtest-all.cc.\n  gtest.FuseGTestAllCcToFile(GetGTestRootDir(gmock_root), output_file)\n  # Next, append fused gmock-all.cc to gmock-gtest-all.cc.\n  FuseGMockAllCcToFile(gmock_root, output_file)\n  output_file.close()\ndef FuseGMock(gmock_root, output_dir):\n  \"\"\"Fuses gtest.h, gmock.h, and gmock-gtest-all.h.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "FuseGMock",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def FuseGMock(gmock_root, output_dir):\n  \"\"\"Fuses gtest.h, gmock.h, and gmock-gtest-all.h.\"\"\"\n  ValidateGMockRootDir(gmock_root)\n  ValidateOutputDir(output_dir)\n  gtest.FuseGTestH(GetGTestRootDir(gmock_root), output_dir)\n  FuseGMockH(gmock_root, output_dir)\n  FuseGMockGTestAllCc(gmock_root, output_dir)\ndef main():\n  argc = len(sys.argv)\n  if argc == 2:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "def main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gmock_files.py OUTPUT_DIR\n    FuseGMock(DEFAULT_GMOCK_ROOT_DIR, sys.argv[1])\n  elif argc == 3:\n    # fuse_gmock_files.py GMOCK_ROOT_DIR OUTPUT_DIR\n    FuseGMock(sys.argv[1], sys.argv[2])\n  else:\n    print __doc__",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\nimport sets\nimport sys\n# We assume that this file is in the scripts/ directory in the Google\n# Mock root directory.\nDEFAULT_GMOCK_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# We need to call into googletest/scripts/fuse_gtest_files.py.\nsys.path.append(os.path.join(DEFAULT_GMOCK_ROOT_DIR, '../googletest/scripts'))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GMOCK_ROOT_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "DEFAULT_GMOCK_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# We need to call into googletest/scripts/fuse_gtest_files.py.\nsys.path.append(os.path.join(DEFAULT_GMOCK_ROOT_DIR, '../googletest/scripts'))\nimport fuse_gtest_files\ngtest = fuse_gtest_files\n# Regex for matching '#include \"gmock/...\"'.\nINCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')\n# Where to find the source seed files.\nGMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "gtest",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "gtest = fuse_gtest_files\n# Regex for matching '#include \"gmock/...\"'.\nINCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')\n# Where to find the source seed files.\nGMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_GMOCK_FILE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "INCLUDE_GMOCK_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gmock/.+)\"')\n# Where to find the source seed files.\nGMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_H_SEED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_H_SEED = 'include/gmock/gmock.h'\nGMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_ALL_CC_SEED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_ALL_CC_SEED = 'src/gmock-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GTEST_H_OUTPUT = 'gtest/gtest.h'\nGMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_H_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_H_OUTPUT = 'gmock/gmock.h'\nGMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "GMOCK_GTEST_ALL_CC_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "peekOfCode": "GMOCK_GTEST_ALL_CC_OUTPUT = 'gmock-gtest-all.cc'\ndef GetGTestRootDir(gmock_root):\n  \"\"\"Returns the root directory of Google Test.\"\"\"\n  return os.path.join(gmock_root, '../googletest')\ndef ValidateGMockRootDir(gmock_root):\n  \"\"\"Makes sure gmock_root points to a valid gmock root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  gtest.ValidateGTestRootDir(GetGTestRootDir(gmock_root))\n  gtest.VerifyFileExists(gmock_root, GMOCK_H_SEED)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.fuse_gmock_files",
        "documentation": {}
    },
    {
        "label": "Diagnose",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "def Diagnose(msg):\n  \"\"\"Generates all possible diagnoses given the compiler error message.\"\"\"\n  msg = re.sub(r'\\x1b\\[[^m]*m', '', msg)  # Strips all color formatting.\n  # Assuming the string is using the UTF-8 encoding, replaces the left and\n  # the right single quote characters with apostrophes.\n  msg = re.sub(r'(\\xe2\\x80\\x98|\\xe2\\x80\\x99)', \"'\", msg)\n  diagnoses = []\n  for diagnoser in _DIAGNOSERS:\n    for diag in diagnoser(msg):\n      diagnosis = '[%s - %s]\\n%s' % diag",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "def main():\n  print ('Google Mock Doctor v%s - '\n         'diagnoses problems in code using Google Mock.' % _VERSION)\n  if sys.stdin.isatty():\n    print ('Please copy and paste the compiler errors here.  Press c-D when '\n           'you are done:')\n  else:\n    print ('Waiting for compiler errors on stdin . . .')\n  msg = sys.stdin.read().strip()\n  diagnoses = Diagnose(msg)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport re\nimport sys\n_VERSION = '1.0.3'\n_EMAIL = 'googlemock@googlegroups.com'\n_COMMON_GMOCK_SYMBOLS = [\n    # Matchers\n    '_',\n    'A',\n    'AddressSatisfies',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_VERSION = '1.0.3'\n_EMAIL = 'googlemock@googlegroups.com'\n_COMMON_GMOCK_SYMBOLS = [\n    # Matchers\n    '_',\n    'A',\n    'AddressSatisfies',\n    'AllOf',\n    'An',\n    'AnyOf',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_EMAIL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_EMAIL = 'googlemock@googlegroups.com'\n_COMMON_GMOCK_SYMBOLS = [\n    # Matchers\n    '_',\n    'A',\n    'AddressSatisfies',\n    'AllOf',\n    'An',\n    'AnyOf',\n    'ContainerEq',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_COMMON_GMOCK_SYMBOLS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_COMMON_GMOCK_SYMBOLS = [\n    # Matchers\n    '_',\n    'A',\n    'AddressSatisfies',\n    'AllOf',\n    'An',\n    'AnyOf',\n    'ContainerEq',\n    'Contains',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_GCC_FILE_LINE_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_GCC_FILE_LINE_RE = r'(?P<file>.*):(?P<line>\\d+):(\\d+:)?\\s+'\n_CLANG_FILE_LINE_RE = r'(?P<file>.*):(?P<line>\\d+):(?P<column>\\d+):\\s+'\n_CLANG_NON_GMOCK_FILE_LINE_RE = (\n    r'(?P<file>.*[/\\\\^](?!gmock-)[^/\\\\]+):(?P<line>\\d+):(?P<column>\\d+):\\s+')\ndef _FindAllMatches(regex, s):\n  \"\"\"Generates all matches of regex in string s.\"\"\"\n  r = re.compile(regex)\n  return r.finditer(s)\ndef _GenericDiagnoser(short_name, long_name, diagnoses, msg):\n  \"\"\"Diagnoses the given disease by pattern matching.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_CLANG_FILE_LINE_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_CLANG_FILE_LINE_RE = r'(?P<file>.*):(?P<line>\\d+):(?P<column>\\d+):\\s+'\n_CLANG_NON_GMOCK_FILE_LINE_RE = (\n    r'(?P<file>.*[/\\\\^](?!gmock-)[^/\\\\]+):(?P<line>\\d+):(?P<column>\\d+):\\s+')\ndef _FindAllMatches(regex, s):\n  \"\"\"Generates all matches of regex in string s.\"\"\"\n  r = re.compile(regex)\n  return r.finditer(s)\ndef _GenericDiagnoser(short_name, long_name, diagnoses, msg):\n  \"\"\"Diagnoses the given disease by pattern matching.\n  Can provide different diagnoses for different patterns.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_CLANG_NON_GMOCK_FILE_LINE_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_CLANG_NON_GMOCK_FILE_LINE_RE = (\n    r'(?P<file>.*[/\\\\^](?!gmock-)[^/\\\\]+):(?P<line>\\d+):(?P<column>\\d+):\\s+')\ndef _FindAllMatches(regex, s):\n  \"\"\"Generates all matches of regex in string s.\"\"\"\n  r = re.compile(regex)\n  return r.finditer(s)\ndef _GenericDiagnoser(short_name, long_name, diagnoses, msg):\n  \"\"\"Diagnoses the given disease by pattern matching.\n  Can provide different diagnoses for different patterns.\n  Args:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "_DIAGNOSERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "peekOfCode": "_DIAGNOSERS = [\n    _IncompleteByReferenceArgumentDiagnoser,\n    _MockObjectPointerDiagnoser,\n    _NeedToReturnNothingDiagnoser,\n    _NeedToReturnReferenceDiagnoser,\n    _NeedToReturnSomethingDiagnoser,\n    _NeedToUseReturnNullDiagnoser,\n    _NeedToUseSymbolDiagnoser,\n    _OverloadedFunctionActionDiagnoser,\n    _OverloadedFunctionMatcherDiagnoser,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.gmock_doctor",
        "documentation": {}
    },
    {
        "label": "ClientLoginError",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]\nclass AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "AbstractRpcServer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):\n    \"\"\"Creates a new HttpRpcServer.\n    Args:\n      host: The host to send requests to.\n      auth_function: A function that takes no arguments and returns an\n        (email, password) tuple when called. Will be called if authentication\n        is required.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "HttpRpcServer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class HttpRpcServer(AbstractRpcServer):\n  \"\"\"Provides a simplified RPC-style interface for HTTP requests.\"\"\"\n  def _Authenticate(self):\n    \"\"\"Save the cookie jar after authentication.\"\"\"\n    super(HttpRpcServer, self)._Authenticate()\n    if self.save_cookies:\n      StatusUpdate(\"Saving authentication cookies to %s\" % self.cookie_file)\n      self.cookie_jar.save()\n  def _GetOpener(self):\n    \"\"\"Returns an OpenerDirector that supports cookies and ignores redirects.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "VersionControlSystem",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class VersionControlSystem(object):\n  \"\"\"Abstract base class providing an interface to the VCS.\"\"\"\n  def __init__(self, options):\n    \"\"\"Constructor.\n    Args:\n      options: Command line options.\n    \"\"\"\n    self.options = options\n  def GenerateDiff(self, args):\n    \"\"\"Return the current diff as a string.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SubversionVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class SubversionVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Subversion.\"\"\"\n  def __init__(self, options):\n    super(SubversionVCS, self).__init__(options)\n    if self.options.revision:\n      match = re.match(r\"(\\d+)(:(\\d+))?\", self.options.revision)\n      if not match:\n        ErrorExit(\"Invalid Subversion revision %s.\" % self.options.revision)\n      self.rev_start = match.group(1)\n      self.rev_end = match.group(3)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GitVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class GitVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Git.\"\"\"\n  def __init__(self, options):\n    super(GitVCS, self).__init__(options)\n    # Map of filename -> hash of base file.\n    self.base_hashes = {}\n  def GenerateDiff(self, extra_args):\n    # This is more complicated than svn's GenerateDiff because we must convert\n    # the diff output to include an svn-style \"Index:\" line as well as record\n    # the hashes of the base files, so we can upload them along with our diff.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MercurialVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "class MercurialVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Mercurial.\"\"\"\n  def __init__(self, options, repo_dir):\n    super(MercurialVCS, self).__init__(options)\n    # Absolute path to repository (we can be in a subdir)\n    self.repo_dir = os.path.normpath(repo_dir)\n    # Compute the subdir\n    cwd = os.path.normpath(os.getcwd())\n    assert cwd.startswith(self.repo_dir)\n    self.subdir = cwd[len(self.repo_dir):].lstrip(r\"\\/\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetEmail",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"\n  if os.path.exists(last_email_file_name):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "StatusUpdate",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def StatusUpdate(msg):\n  \"\"\"Print a status message to stdout.\n  If 'verbosity' is greater than 0, print the message.\n  Args:\n    msg: The string to print.\n  \"\"\"\n  if verbosity > 0:\n    print msg\ndef ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "ErrorExit",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"\n  print >>sys.stderr, msg\n  sys.exit(1)\nclass ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetRpcServer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def GetRpcServer(options):\n  \"\"\"Returns an instance of an AbstractRpcServer.\n  Returns:\n    A new AbstractRpcServer, on which RPC calls can be made.\n  \"\"\"\n  rpc_server_class = HttpRpcServer\n  def GetUserCredentials():\n    \"\"\"Prompts the user for a username and password.\"\"\"\n    email = options.email\n    if email is None:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "EncodeMultipartFormData",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def EncodeMultipartFormData(fields, files):\n  \"\"\"Encode form fields for multipart/form-data.\n  Args:\n    fields: A sequence of (name, value) elements for regular form fields.\n    files: A sequence of (name, filename, value) elements for data to be\n           uploaded as files.\n  Returns:\n    (content_type, body) ready for httplib.HTTP instance.\n  Source:\n    https://web.archive.org/web/20160116052001/code.activestate.com/recipes/146306",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetContentType",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def GetContentType(filename):\n  \"\"\"Helper to guess the content-type from the filename.\"\"\"\n  return mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n# Use a shell for subcommands on Windows to get a PATH search.\nuse_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShellWithReturnCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:\n    Tuple (output, return code)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShell",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def RunShell(command, silent_ok=False, universal_newlines=True,\n             print_output=False):\n  data, retcode = RunShellWithReturnCode(command, print_output,\n                                         universal_newlines)\n  if retcode:\n    ErrorExit(\"Got error status from %s:\\n%s\" % (command, data))\n  if not silent_ok and not data:\n    ErrorExit(\"No output from %s\" % command)\n  return data\nclass VersionControlSystem(object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SplitPatch",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def SplitPatch(data):\n  \"\"\"Splits a patch into separate pieces for each file.\n  Args:\n    data: A string containing the output of svn diff.\n  Returns:\n    A list of 2-tuple (filename, text) where text is the svn diff output\n      pertaining to filename.\n  \"\"\"\n  patches = []\n  filename = None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "UploadSeparatePatches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def UploadSeparatePatches(issue, rpc_server, patchset, data, options):\n  \"\"\"Uploads a separate patch for each file in the diff output.\n  Returns a list of [patch_key, filename] for each file.\n  \"\"\"\n  patches = SplitPatch(data)\n  rv = []\n  for patch in patches:\n    if len(patch[1]) > MAX_UPLOAD_SIZE:\n      print (\"Not uploading the patch for \" + patch[0] +\n             \" because the file is too large.\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GuessVCS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def GuessVCS(options):\n  \"\"\"Helper to guess the version control system.\n  This examines the current directory, guesses which VersionControlSystem\n  we're using, and returns an instance of the appropriate class.  Exit with an\n  error if we can't figure it out.\n  Returns:\n    A VersionControlSystem instance. Exits if the VCS can't be guessed.\n  \"\"\"\n  # Mercurial has a command to get the base directory of a repository\n  # Try running it, but don't die if we don't have hg installed.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RealMain",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def RealMain(argv, data=None):\n  \"\"\"The real main function.\n  Args:\n    argv: Command line arguments.\n    data: Diff contents. If None (default) the diff is generated by\n      the VersionControlSystem implementation returned by GuessVCS().\n  Returns:\n    A 2-tuple (issue id, patchset id).\n    The patchset id is None if the base files are not uploaded by this\n    script (applies only to SVN checkouts).",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "def main():\n  try:\n    RealMain(sys.argv)\n  except KeyboardInterrupt:\n    print\n    StatusUpdate(\"Interrupted.\")\n    sys.exit(1)\nif __name__ == \"__main__\":\n  main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "verbosity",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "verbosity = 1\n# Max size of patch or base file.\nMAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MAX_UPLOAD_SIZE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "MAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "parser = optparse.OptionParser(usage=\"%prog [options] [-- diff_options]\")\nparser.add_option(\"-y\", \"--assume_yes\", action=\"store_true\",\n                  dest=\"assume_yes\", default=False,\n                  help=\"Assume that the answer to yes/no questions is 'yes'.\")\n# Logging\ngroup = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,\n                 help=\"Print info level logs (default).\")\ngroup.add_option(\"--noisy\", action=\"store_const\", const=3,\n                 dest=\"verbose\", help=\"Print all logs.\")\n# Review server\ngroup = parser.add_option_group(\"Review server options\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Review server options\")\ngroup.add_option(\"-s\", \"--server\", action=\"store\", dest=\"server\",\n                 default=\"codereview.appspot.com\",\n                 metavar=\"SERVER\",\n                 help=(\"The server to upload to. The format is host[:port]. \"\n                       \"Defaults to 'codereview.appspot.com'.\"))\ngroup.add_option(\"-e\", \"--email\", action=\"store\", dest=\"email\",\n                 metavar=\"EMAIL\", default=None,\n                 help=\"The username to use. Will prompt if omitted.\")\ngroup.add_option(\"-H\", \"--host\", action=\"store\", dest=\"host\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Issue options\")\ngroup.add_option(\"-d\", \"--description\", action=\"store\", dest=\"description\",\n                 metavar=\"DESCRIPTION\", default=None,\n                 help=\"Optional description when creating an issue.\")\ngroup.add_option(\"-f\", \"--description_file\", action=\"store\",\n                 dest=\"description_file\", metavar=\"DESCRIPTION_FILE\",\n                 default=None,\n                 help=\"Optional path of a file that contains \"\n                      \"the description when creating an issue.\")\ngroup.add_option(\"-r\", \"--reviewers\", action=\"store\", dest=\"reviewers\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Patch options\")\ngroup.add_option(\"-m\", \"--message\", action=\"store\", dest=\"message\",\n                 metavar=\"MESSAGE\", default=None,\n                 help=\"A message to identify the patch. \"\n                      \"Will prompt if omitted.\")\ngroup.add_option(\"-i\", \"--issue\", type=\"int\", action=\"store\",\n                 metavar=\"ISSUE\", default=None,\n                 help=\"Issue number to which to add. Defaults to new issue.\")\ngroup.add_option(\"--download_base\", action=\"store_true\",\n                 dest=\"download_base\", default=False,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "use_shell",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "peekOfCode": "use_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "peekOfCode": "def main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Mock discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False\n  for arg in sys.argv[1:]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport sys\nCC_FLAG = '--cc='\nGMOCK_GROUP = 'googlemock@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "documentation": {}
    },
    {
        "label": "CC_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "peekOfCode": "CC_FLAG = '--cc='\nGMOCK_GROUP = 'googlemock@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Mock discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "documentation": {}
    },
    {
        "label": "GMOCK_GROUP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "peekOfCode": "GMOCK_GROUP = 'googlemock@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Mock discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.scripts.upload_gmock",
        "documentation": {}
    },
    {
        "label": "GMockMethodNCTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "peekOfCode": "class GMockMethodNCTest(googletest.TestCase):\n  \"\"\"Negative compilation tests for MOCK_METHOD.\"\"\"\n  # The class body is intentionally empty.  The actual test*() methods\n  # will be defined at run time by a call to\n  # DefineNegativeCompilationTests() later.\n  pass\n# Defines a list of test specs, where each element is a tuple\n# (test name, list of regexes for matching the compiler errors).\nTEST_SPECS = [\n    (\"MOCK_METHOD_INVALID_CONST_SPEC\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "peekOfCode": "IS_LINUX = os.name == \"posix\" and os.uname()[0] == \"Linux\"\nif not IS_LINUX:\n  sys.stderr.write(\n      \"WARNING: Negative compilation tests are not supported on this platform\")\n  sys.exit(0)\n# Suppresses the 'Import not at the top of the file' lint complaint.\n# pylint: disable-msg=C6204\nfrom google3.testing.pybase import fake_target_util\nfrom google3.testing.pybase import googletest\n# pylint: enable-msg=C6204",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "documentation": {}
    },
    {
        "label": "TEST_SPECS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "peekOfCode": "TEST_SPECS = [\n    (\"MOCK_METHOD_INVALID_CONST_SPEC\",\n     [r\"onst cannot be recognized as a valid specification modifier\"]),\n]\n# Define a test method in GMockNCTest for each element in TEST_SPECS.\nfake_target_util.DefineNegativeCompilationTests(\n    GMockMethodNCTest,\n    \"google3/third_party/googletest/googlemock/test/gmock-function-mocker_nc\",\n    \"gmock-function-mocker_nc.o\", TEST_SPECS)\nif __name__ == \"__main__\":",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock-function-mocker_nc_test",
        "documentation": {}
    },
    {
        "label": "GMockLeakTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "class GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(\n        0,\n        gmock_test_utils.Subprocess(TEST_WITH_EXPECT_CALL,\n                                    env=environ).exit_code)\n    self.assertNotEqual(\n        0,\n        gmock_test_utils.Subprocess(TEST_WITH_ON_CALL,\n                                    env=environ).exit_code)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "PROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_leak_test_')\nTEST_WITH_EXPECT_CALL = [PROGRAM_PATH, '--gtest_filter=*ExpectCall*']\nTEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_WITH_EXPECT_CALL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_WITH_EXPECT_CALL = [PROGRAM_PATH, '--gtest_filter=*ExpectCall*']\nTEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_WITH_ON_CALL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_WITH_ON_CALL = [PROGRAM_PATH, '--gtest_filter=*OnCall*']\nTEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "TEST_MULTIPLE_LEAKS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "TEST_MULTIPLE_LEAKS = [PROGRAM_PATH, '--gtest_filter=*MultipleLeaked*']\nenviron = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "environ = gmock_test_utils.environ\nSetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "peekOfCode": "SetEnvVar = gmock_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gmock_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nclass GMockLeakTest(gmock_test_utils.TestCase):\n  def testCatchesLeakedMockByDefault(self):\n    self.assertNotEqual(",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_leak_test",
        "documentation": {}
    },
    {
        "label": "GMockOutputTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "class GMockOutputTest(gmock_test_utils.TestCase):\n  def testOutput(self):\n    (output, leaky_tests) = GetNormalizedCommandOutputAndLeakyTests(COMMAND)\n    golden_file = open(GOLDEN_PATH, 'rb')\n    golden = golden_file.read()\n    golden_file.close()\n    # The normalized output should match the golden file.\n    self.assertEquals(golden, output)\n    # The raw output should contain 2 leaked mock object errors for\n    # test GMockOutputTest.CatchesLeakedMocks.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "ToUnixLineEnding",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveReportHeaderAndFooter",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)\n  output = re.sub(r'.* FAILED TESTS\\n', '', output)\n  return output\ndef RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveLocations",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveLocations(output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or\n       'DIRECTORY\\\\FILE_NAME(LINE_NUMBER): ') replaced by\n       'FILE:#: '.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "NormalizeErrorMarker",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def NormalizeErrorMarker(output):\n  \"\"\"Normalizes the error marker, which is different on Windows vs on Linux.\"\"\"\n  return re.sub(r' error: ', ' Failure\\n', output)\ndef RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n  return re.sub(r'@\\w+', '@0x#', output)\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveMemoryAddresses",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveMemoryAddresses(output):\n  \"\"\"Removes memory addresses from the test output.\"\"\"\n  return re.sub(r'@\\w+', '@0x#', output)\ndef RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "RemoveTestNamesOfLeakedMocks",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def RemoveTestNamesOfLeakedMocks(output):\n  \"\"\"Removes the test names of leaked mock objects from the test output.\"\"\"\n  return re.sub(r'\\(used in test .+\\) ', '', output)\ndef GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\ndef GetNormalizedOutputAndLeakyTests(output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetLeakyTests",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetLeakyTests(output):\n  \"\"\"Returns a list of test names that leak mock objects.\"\"\"\n  # findall() returns a list of all matches of the regex in output.\n  # For example, if '(used in test FooTest.Bar)' is in output, the\n  # list will contain 'FooTest.Bar'.\n  return re.findall(r'\\(used in test (.+)\\)', output)\ndef GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n  Args:\n    output: The test output.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetNormalizedOutputAndLeakyTests",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetNormalizedOutputAndLeakyTests(output):\n  \"\"\"Normalizes the output of gmock_output_test_.\n  Args:\n    output: The test output.\n  Returns:\n    A tuple (the normalized test output, the list of test names that have\n    leaked mocks).\n  \"\"\"\n  output = ToUnixLineEnding(output)\n  output = RemoveReportHeaderAndFooter(output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetShellCommandOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetShellCommandOutput(cmd):\n  \"\"\"Runs a command in a sub-process, and returns its STDOUT in a string.\"\"\"\n  return gmock_test_utils.Subprocess(cmd, capture_stderr=False).output\ndef GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n  Args:\n    cmd:  the shell command.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetNormalizedCommandOutputAndLeakyTests",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "def GetNormalizedCommandOutputAndLeakyTests(cmd):\n  \"\"\"Runs a command and returns its normalized output and a list of leaky tests.\n  Args:\n    cmd:  the shell command.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  os.environ['GTEST_CATCH_EXCEPTIONS'] = '1'\n  return GetNormalizedOutputAndLeakyTests(GetShellCommandOutput(cmd))\nclass GMockOutputTest(gmock_test_utils.TestCase):\n  def testOutput(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GENGOLDEN_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "GENGOLDEN_FLAG = '--gengolden'\nPROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_output_test_')\nCOMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "PROGRAM_PATH = gmock_test_utils.GetTestExecutablePath('gmock_output_test_')\nCOMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "COMMAND = [PROGRAM_PATH, '--gtest_stack_trace_depth=0', '--gtest_print_time=0']\nGOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "GOLDEN_NAME = 'gmock_output_test_golden.txt'\nGOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "peekOfCode": "GOLDEN_PATH = os.path.join(gmock_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveReportHeaderAndFooter(output):\n  \"\"\"Removes Google Test result report's header and footer from the output.\"\"\"\n  output = re.sub(r'.*gtest_main.*\\n', '', output)\n  output = re.sub(r'\\[.*\\d+ tests.*\\n', '', output)\n  output = re.sub(r'\\[.* test environment .*\\n', '', output)\n  output = re.sub(r'\\[=+\\] \\d+ tests .* ran.*', '', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_output_test",
        "documentation": {}
    },
    {
        "label": "GetSourceDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return gtest_test_utils.GetSourceDir()\ndef GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n  Returns:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTestExecutablePath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetTestExecutablePath(executable_name):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n  Returns:\n    The absolute path of the test binary.\n  \"\"\"\n  return gtest_test_utils.GetTestExecutablePath(executable_name)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetExitStatus",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "def GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n  Args:\n    exit_code: the result value of os.system(command).\n  \"\"\"\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly.\n    return exit_code\n  else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "def Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "SCRIPT_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "SCRIPT_DIR = os.path.dirname(__file__) or '.'\n# isdir resolves symbolic links.\ngtest_tests_util_dir = os.path.join(SCRIPT_DIR, '../../googletest/test')\nif os.path.isdir(gtest_tests_util_dir):\n  GTEST_TESTS_UTIL_DIR = gtest_tests_util_dir\nelse:\n  GTEST_TESTS_UTIL_DIR = os.path.join(SCRIPT_DIR, '../../googletest/test')\nsys.path.append(GTEST_TESTS_UTIL_DIR)\n# pylint: disable=C6204\nimport gtest_test_utils",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "gtest_tests_util_dir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "gtest_tests_util_dir = os.path.join(SCRIPT_DIR, '../../googletest/test')\nif os.path.isdir(gtest_tests_util_dir):\n  GTEST_TESTS_UTIL_DIR = gtest_tests_util_dir\nelse:\n  GTEST_TESTS_UTIL_DIR = os.path.join(SCRIPT_DIR, '../../googletest/test')\nsys.path.append(GTEST_TESTS_UTIL_DIR)\n# pylint: disable=C6204\nimport gtest_test_utils\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "Subprocess",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "Subprocess = gtest_test_utils.Subprocess\nTestCase = gtest_test_utils.TestCase\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "TestCase = gtest_test_utils.TestCase\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\nPREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "PREMATURE_EXIT_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "peekOfCode": "PREMATURE_EXIT_FILE_ENV_VAR = gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR\n# pylint: enable-msg=C6409\ndef Main():\n  \"\"\"Runs the unit test.\"\"\"\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googlemock.test.gmock_test_utils",
        "documentation": {}
    },
    {
        "label": "GetCommandOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "def GetCommandOutput(command):\n  \"\"\"Runs the shell command and returns its stdout as a list of lines.\"\"\"\n  f = os.popen(command, 'r')\n  lines = [line.strip() for line in f.readlines()]\n  f.close()\n  return lines\ndef GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):\n    m = _SVN_INFO_URL_RE.match(line)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "GetSvnInfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "def GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):\n    m = _SVN_INFO_URL_RE.match(line)\n    if m:\n      project = m.group(1)  # googletest or googlemock\n      rel_path = m.group(2)\n      root = os.path.realpath(rel_path.count('/') * '../')\n      return project, root\n  return None, None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "GetSvnTrunk",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "def GetSvnTrunk():\n  \"\"\"Returns the current SVN workspace's trunk root path.\"\"\"\n  _, root = GetSvnInfo()\n  return root + '/trunk' if root else None\ndef IsInGTestSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googletest'\ndef IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "IsInGTestSvn",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "def IsInGTestSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googletest'\ndef IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "IsInGMockSvn",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "def IsInGMockSvn():\n  project, _ = GetSvnInfo()\n  return project == 'googlemock'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\n# Matches the line from 'svn info .' output that describes what SVN\n# path the current local directory corresponds to.  For example, in\n# a googletest SVN workspace's trunk/test directory, the output will be:\n#\n# URL: https://googletest.googlecode.com/svn/trunk/test\n_SVN_INFO_URL_RE = re.compile(r'^URL: https://(\\w+)\\.googlecode\\.com/svn(.*)')\ndef GetCommandOutput(command):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "_SVN_INFO_URL_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "peekOfCode": "_SVN_INFO_URL_RE = re.compile(r'^URL: https://(\\w+)\\.googlecode\\.com/svn(.*)')\ndef GetCommandOutput(command):\n  \"\"\"Runs the shell command and returns its stdout as a list of lines.\"\"\"\n  f = os.popen(command, 'r')\n  lines = [line.strip() for line in f.readlines()]\n  f.close()\n  return lines\ndef GetSvnInfo():\n  \"\"\"Returns the project name and the current SVN workspace's root path.\"\"\"\n  for line in GetCommandOutput('svn info .'):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.common",
        "documentation": {}
    },
    {
        "label": "VerifyFileExists",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '\n          'or omit it on the command line.')\n    sys.exit(1)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "ValidateGTestRootDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def ValidateGTestRootDir(gtest_root):\n  \"\"\"Makes sure gtest_root points to a valid gtest root directory.\n  The function aborts the program on failure.\n  \"\"\"\n  VerifyFileExists(gtest_root, GTEST_H_SEED)\n  VerifyFileExists(gtest_root, GTEST_ALL_CC_SEED)\ndef VerifyOutputFile(output_dir, relative_path):\n  \"\"\"Verifies that the given output file path is valid.\n  relative_path is relative to the output_dir directory.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "VerifyOutputFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def VerifyOutputFile(output_dir, relative_path):\n  \"\"\"Verifies that the given output file path is valid.\n  relative_path is relative to the output_dir directory.\n  \"\"\"\n  # Makes sure the output file either doesn't exist or can be overwritten.\n  output_file = os.path.join(output_dir, relative_path)\n  if os.path.exists(output_file):\n    # TODO(wan@google.com): The following user-interaction doesn't\n    # work with automated processes.  We should provide a way for the\n    # Makefile to force overwriting the files.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "ValidateOutputDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def ValidateOutputDir(output_dir):\n  \"\"\"Makes sure output_dir points to a valid output directory.\n  The function aborts the program on failure.\n  \"\"\"\n  VerifyOutputFile(output_dir, GTEST_H_OUTPUT)\n  VerifyOutputFile(output_dir, GTEST_ALL_CC_OUTPUT)\ndef FuseGTestH(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest.h in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_H_OUTPUT), 'w')\n  processed_files = set()  # Holds all gtest headers we've processed.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestH",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestH(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest.h in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_H_OUTPUT), 'w')\n  processed_files = set()  # Holds all gtest headers we've processed.\n  def ProcessFile(gtest_header_path):\n    \"\"\"Processes the given gtest header file.\"\"\"\n    # We don't process the same header twice.\n    if gtest_header_path in processed_files:\n      return\n    processed_files.add(gtest_header_path)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestAllCcToFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestAllCcToFile(gtest_root, output_file):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest-all.cc in output_file.\"\"\"\n  processed_files = set()\n  def ProcessFile(gtest_source_file):\n    \"\"\"Processes the given gtest source file.\"\"\"\n    # We don't process the same #included file twice.\n    if gtest_source_file in processed_files:\n      return\n    processed_files.add(gtest_source_file)\n    # Reads each line in the given gtest source file.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTestAllCc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTestAllCc(gtest_root, output_dir):\n  \"\"\"Scans folder gtest_root to generate gtest/gtest-all.cc in output_dir.\"\"\"\n  output_file = open(os.path.join(output_dir, GTEST_ALL_CC_OUTPUT), 'w')\n  FuseGTestAllCcToFile(gtest_root, output_file)\n  output_file.close()\ndef FuseGTest(gtest_root, output_dir):\n  \"\"\"Fuses gtest.h and gtest-all.cc.\"\"\"\n  ValidateGTestRootDir(gtest_root)\n  ValidateOutputDir(output_dir)\n  FuseGTestH(gtest_root, output_dir)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "FuseGTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def FuseGTest(gtest_root, output_dir):\n  \"\"\"Fuses gtest.h and gtest-all.cc.\"\"\"\n  ValidateGTestRootDir(gtest_root)\n  ValidateOutputDir(output_dir)\n  FuseGTestH(gtest_root, output_dir)\n  FuseGTestAllCc(gtest_root, output_dir)\ndef main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gtest_files.py OUTPUT_DIR",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "def main():\n  argc = len(sys.argv)\n  if argc == 2:\n    # fuse_gtest_files.py OUTPUT_DIR\n    FuseGTest(DEFAULT_GTEST_ROOT_DIR, sys.argv[1])\n  elif argc == 3:\n    # fuse_gtest_files.py GTEST_ROOT_DIR OUTPUT_DIR\n    FuseGTest(sys.argv[1], sys.argv[2])\n  else:\n    print(__doc__)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\ntry:\n  from sets import Set as set  # For Python 2.3 compatibility\nexcept ImportError:\n  pass\nimport sys\n# We assume that this file is in the scripts/ directory in the Google\n# Test root directory.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GTEST_ROOT_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "DEFAULT_GTEST_ROOT_DIR = os.path.join(os.path.dirname(__file__), '..')\n# Regex for matching '#include \"gtest/...\"'.\nINCLUDE_GTEST_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gtest/.+)\"')\n# Regex for matching '#include \"src/...\"'.\nINCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_GTEST_FILE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "INCLUDE_GTEST_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(gtest/.+)\"')\n# Regex for matching '#include \"src/...\"'.\nINCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "INCLUDE_SRC_FILE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "INCLUDE_SRC_FILE_REGEX = re.compile(r'^\\s*#\\s*include\\s*\"(src/.+)\"')\n# Where to find the source seed files.\nGTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_SEED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_H_SEED = 'include/gtest/gtest.h'\nGTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_SPI_H_SEED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'\nGTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_ALL_CC_SEED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_ALL_CC_SEED = 'src/gtest-all.cc'\n# Where to put the generated files.\nGTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_H_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_H_OUTPUT = 'gtest/gtest.h'\nGTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "GTEST_ALL_CC_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "peekOfCode": "GTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'\ndef VerifyFileExists(directory, relative_path):\n  \"\"\"Verifies that the given file exists; aborts on failure.\n  relative_path is the file path relative to the given directory.\n  \"\"\"\n  if not os.path.isfile(os.path.join(directory, relative_path)):\n    print('ERROR: Cannot find %s in directory %s.' % (relative_path,\n                                                      directory))\n    print('Please either specify a valid project root directory '\n          'or omit it on the command line.')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.fuse_gtest_files",
        "documentation": {}
    },
    {
        "label": "Predicate%",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "class Predicate%(n)sTest : public testing::Test {\n protected:\n  virtual void SetUp() {\n    expected_to_finish_ = true;\n    finished_ = false;\"\"\" % DEFS\n  tests += \"\"\"\n    \"\"\" + Iter(n, 'n%s_ = ') + \"\"\"0;\n  }\n\"\"\"\n  tests += \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HeaderPreamble",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),\n    'command' : '%s %s' % (os.path.basename(sys.argv[0]), n),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Arity",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Arity(n):\n  \"\"\"Returns the English name of the given arity.\"\"\"\n  if n < 0:\n    return None\n  elif n <= 3:\n    return ['nullary', 'unary', 'binary', 'ternary'][n]\n  else:\n    return '%s-ary' % n\ndef Title(word):\n  \"\"\"Returns the given word in title case.  The difference between",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Title",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Title(word):\n  \"\"\"Returns the given word in title case.  The difference between\n  this and string's title() method is that Title('4-ary') is '4-ary'\n  while '4-ary'.title() is '4-Ary'.\"\"\"\n  return word[0].upper() + word[1:]\ndef OneTo(n):\n  \"\"\"Returns the list [1, 2, 3, ..., n].\"\"\"\n  return range(1, n + 1)\ndef Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "OneTo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def OneTo(n):\n  \"\"\"Returns the list [1, 2, 3, ..., n].\"\"\"\n  return range(1, n + 1)\ndef Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or\n  more '%s' format specs, and optionally a separator string, returns\n  the join of n strings, each formatted with the format string on an\n  iterator ranged from 1 to n.\n  Example:\n  Iter(3, 'v%s', sep=', ') returns 'v1, v2, v3'.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Iter",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def Iter(n, format, sep=''):\n  \"\"\"Given a positive integer n, a format string that contains 0 or\n  more '%s' format specs, and optionally a separator string, returns\n  the join of n strings, each formatted with the format string on an\n  iterator ranged from 1 to n.\n  Example:\n  Iter(3, 'v%s', sep=', ') returns 'v1, v2, v3'.\n  \"\"\"\n  # How many '%s' specs are in format?\n  spec_count = len(format.split('%s')) - 1",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "ImplementationForArity",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def ImplementationForArity(n):\n  \"\"\"Returns the implementation of n-ary predicate assertions.\"\"\"\n  # A map the defines the values used in the implementation template.\n  DEFS = {\n    'n' : str(n),\n    'vs' : Iter(n, 'v%s', sep=', '),\n    'vts' : Iter(n, '#v%s', sep=', '),\n    'arity' : Arity(n),\n    'Arity' : Title(Arity(n))\n    }",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HeaderPostamble",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def HeaderPostamble():\n  \"\"\"Returns the postamble for the header file.\"\"\"\n  return \"\"\"\n}  // namespace testing\n#endif  // GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_\n\"\"\"\ndef GenerateFile(path, content):\n  \"\"\"Given a file path and a content string\n     overwrites it with the given content.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateFile(path, content):\n  \"\"\"Given a file path and a content string\n     overwrites it with the given content.\n  \"\"\"\n  print 'Updating file %s . . .' % path\n  f = file(path, 'w+')\n  print >>f, content,\n  f.close()\n  print 'File %s has been updated.' % path\ndef GenerateHeader(n):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateHeader",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateHeader(n):\n  \"\"\"Given the maximum arity n, updates the header file that implements\n  the predicate assertions.\n  \"\"\"\n  GenerateFile(HEADER,\n               HeaderPreamble(n)\n               + ''.join([ImplementationForArity(i) for i in OneTo(n)])\n               + HeaderPostamble())\ndef UnitTestPreamble():\n  \"\"\"Returns the preamble for the unit test file.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UnitTestPreamble",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def UnitTestPreamble():\n  \"\"\"Returns the preamble for the unit test file.\"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),\n    'command' : '%s %s' % (os.path.basename(sys.argv[0]), sys.argv[1]),\n    }\n  return (\n\"\"\"// Copyright 2006, Google Inc.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "TestsForArity",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def TestsForArity(n):\n  \"\"\"Returns the tests for n-ary predicate assertions.\"\"\"\n  # A map that defines the values used in the template for the tests.\n  DEFS = {\n    'n' : n,\n    'es' : Iter(n, 'e%s', sep=', '),\n    'vs' : Iter(n, 'v%s', sep=', '),\n    'vts' : Iter(n, '#v%s', sep=', '),\n    'tvs' : Iter(n, 'T%s v%s', sep=', '),\n    'int_vs' : Iter(n, 'int v%s', sep=', '),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UnitTestPostamble",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def UnitTestPostamble():\n  \"\"\"Returns the postamble for the tests.\"\"\"\n  return ''\ndef GenerateUnitTest(n):\n  \"\"\"Returns the tests for up-to n-ary predicate assertions.\"\"\"\n  GenerateFile(UNIT_TEST,\n               UnitTestPreamble()\n               + ''.join([TestsForArity(i) for i in OneTo(n)])\n               + UnitTestPostamble())\ndef _Main():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "GenerateUnitTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "def GenerateUnitTest(n):\n  \"\"\"Returns the tests for up-to n-ary predicate assertions.\"\"\"\n  GenerateFile(UNIT_TEST,\n               UnitTestPreamble()\n               + ''.join([TestsForArity(i) for i in OneTo(n)])\n               + UnitTestPostamble())\ndef _Main():\n  \"\"\"The entry point of the script.  Generates the header file and its\n  unit test.\"\"\"\n  if len(sys.argv) != 2:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport sys\nimport time\n# Where this script is.\nSCRIPT_DIR = os.path.dirname(sys.argv[0])\n# Where to store the generated header.\nHEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "SCRIPT_DIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "SCRIPT_DIR = os.path.dirname(sys.argv[0])\n# Where to store the generated header.\nHEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "HEADER = os.path.join(SCRIPT_DIR, '../include/gtest/gtest_pred_impl.h')\n# Where to store the generated unit test.\nUNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "UNIT_TEST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "peekOfCode": "UNIT_TEST = os.path.join(SCRIPT_DIR, '../test/gtest_pred_impl_unittest.cc')\ndef HeaderPreamble(n):\n  \"\"\"Returns the preamble for the header file.\n  Args:\n    n:  the maximum arity of the predicate macros to be generated.\n  \"\"\"\n  # A map that defines the values used in the preamble template.\n  DEFS = {\n    'today' : time.strftime('%m/%d/%Y'),\n    'year' : time.strftime('%Y'),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.gen_gtest_pred_impl",
        "documentation": {}
    },
    {
        "label": "Cursor",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class Cursor:\n  \"\"\"Represents a position (line and column) in a text file.\"\"\"\n  def __init__(self, line=-1, column=-1):\n    self.line = line\n    self.column = column\n  def __eq__(self, rhs):\n    return self.line == rhs.line and self.column == rhs.column\n  def __ne__(self, rhs):\n    return not self == rhs\n  def __lt__(self, rhs):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class Token:\n  \"\"\"Represents a token in a Pump source file.\"\"\"\n  def __init__(self, start=None, end=None, value=None, token_type=None):\n    if start is None:\n      self.start = Eof()\n    else:\n      self.start = start\n    if end is None:\n      self.end = Eof()\n    else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "CodeNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class CodeNode:\n  def __init__(self, atomic_code_list=None):\n    self.atomic_code = atomic_code_list\nclass VarNode:\n  def __init__(self, identifier=None, atomic_code=None):\n    self.identifier = identifier\n    self.atomic_code = atomic_code\nclass RangeNode:\n  def __init__(self, identifier=None, exp1=None, exp2=None):\n    self.identifier = identifier",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "VarNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class VarNode:\n  def __init__(self, identifier=None, atomic_code=None):\n    self.identifier = identifier\n    self.atomic_code = atomic_code\nclass RangeNode:\n  def __init__(self, identifier=None, exp1=None, exp2=None):\n    self.identifier = identifier\n    self.exp1 = exp1\n    self.exp2 = exp2\nclass ForNode:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "RangeNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class RangeNode:\n  def __init__(self, identifier=None, exp1=None, exp2=None):\n    self.identifier = identifier\n    self.exp1 = exp1\n    self.exp2 = exp2\nclass ForNode:\n  def __init__(self, identifier=None, sep=None, code=None):\n    self.identifier = identifier\n    self.sep = sep\n    self.code = code",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ForNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class ForNode:\n  def __init__(self, identifier=None, sep=None, code=None):\n    self.identifier = identifier\n    self.sep = sep\n    self.code = code\nclass ElseNode:\n  def __init__(self, else_branch=None):\n    self.else_branch = else_branch\nclass IfNode:\n  def __init__(self, exp=None, then_branch=None, else_branch=None):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ElseNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class ElseNode:\n  def __init__(self, else_branch=None):\n    self.else_branch = else_branch\nclass IfNode:\n  def __init__(self, exp=None, then_branch=None, else_branch=None):\n    self.exp = exp\n    self.then_branch = then_branch\n    self.else_branch = else_branch\nclass RawCodeNode:\n  def __init__(self, token=None):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "IfNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class IfNode:\n  def __init__(self, exp=None, then_branch=None, else_branch=None):\n    self.exp = exp\n    self.then_branch = then_branch\n    self.else_branch = else_branch\nclass RawCodeNode:\n  def __init__(self, token=None):\n    self.raw_code = token\nclass LiteralDollarNode:\n  def __init__(self, token):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "RawCodeNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class RawCodeNode:\n  def __init__(self, token=None):\n    self.raw_code = token\nclass LiteralDollarNode:\n  def __init__(self, token):\n    self.token = token\nclass ExpNode:\n  def __init__(self, token, python_exp):\n    self.token = token\n    self.python_exp = python_exp",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "LiteralDollarNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class LiteralDollarNode:\n  def __init__(self, token):\n    self.token = token\nclass ExpNode:\n  def __init__(self, token, python_exp):\n    self.token = token\n    self.python_exp = python_exp\ndef PopFront(a_list):\n  head = a_list[0]\n  a_list[:1] = []",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ExpNode",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class ExpNode:\n  def __init__(self, token, python_exp):\n    self.token = token\n    self.python_exp = python_exp\ndef PopFront(a_list):\n  head = a_list[0]\n  a_list[:1] = []\n  return head\ndef PushFront(a_list, elem):\n  a_list[:0] = [elem]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Env",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class Env:\n  def __init__(self):\n    self.variables = []\n    self.ranges = []\n  def Clone(self):\n    clone = Env()\n    clone.variables = self.variables[:]\n    clone.ranges = self.ranges[:]\n    return clone\n  def PushVariable(self, var, value):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Output",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "class Output:\n  def __init__(self):\n    self.string = ''\n  def GetLastLine(self):\n    index = self.string.rfind('\\n')\n    if index < 0:\n      return ''\n    return self.string[index + 1:]\n  def Append(self, s):\n    self.string += s",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Eof",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def Eof():\n  \"\"\"Returns the special cursor to denote the end-of-file.\"\"\"\n  return Cursor(-1, -1)\nclass Token:\n  \"\"\"Represents a token in a Pump source file.\"\"\"\n  def __init__(self, start=None, end=None, value=None, token_type=None):\n    if start is None:\n      self.start = Eof()\n    else:\n      self.start = start",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "StartsWith",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def StartsWith(lines, pos, string):\n  \"\"\"Returns True iff the given position in lines starts with 'string'.\"\"\"\n  return lines[pos.line][pos.column:].startswith(string)\ndef FindFirstInLine(line, token_table):\n  best_match_start = -1\n  for (regex, token_type) in token_table:\n    m = regex.search(line)\n    if m:\n      # We found regex in lines\n      if best_match_start < 0 or m.start() < best_match_start:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "FindFirstInLine",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def FindFirstInLine(line, token_table):\n  best_match_start = -1\n  for (regex, token_type) in token_table:\n    m = regex.search(line)\n    if m:\n      # We found regex in lines\n      if best_match_start < 0 or m.start() < best_match_start:\n        best_match_start = m.start()\n        best_match_length = m.end() - m.start()\n        best_match_token_type = token_type",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "FindFirst",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def FindFirst(lines, token_table, cursor):\n  \"\"\"Finds the first occurrence of any string in strings in lines.\"\"\"\n  start = cursor.Clone()\n  cur_line_number = cursor.line\n  for line in lines[start.line:]:\n    if cur_line_number == start.line:\n      line = line[start.column:]\n    m = FindFirstInLine(line, token_table)\n    if m:\n      # We found a regex in line.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "SubString",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def SubString(lines, start, end):\n  \"\"\"Returns a substring in lines.\"\"\"\n  if end == Eof():\n    end = Cursor(len(lines) - 1, len(lines[-1]))\n  if start >= end:\n    return ''\n  if start.line == end.line:\n    return lines[start.line][start.column:end.column]\n  result_lines = ([lines[start.line][start.column:]] +\n                  lines[start.line + 1:end.line] +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "StripMetaComments",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def StripMetaComments(str):\n  \"\"\"Strip meta comments from each line in the given string.\"\"\"\n  # First, completely remove lines containing nothing but a meta\n  # comment, including the trailing \\n.\n  str = re.sub(r'^\\s*\\$\\$.*\\n', '', str)\n  # Then, remove meta comments from contentful lines.\n  return re.sub(r'\\s*\\$\\$.*', '', str)\ndef MakeToken(lines, start, end, token_type):\n  \"\"\"Creates a new instance of Token.\"\"\"\n  return Token(start, end, SubString(lines, start, end), token_type)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "MakeToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def MakeToken(lines, start, end, token_type):\n  \"\"\"Creates a new instance of Token.\"\"\"\n  return Token(start, end, SubString(lines, start, end), token_type)\ndef ParseToken(lines, pos, regex, token_type):\n  line = lines[pos.line][pos.column:]\n  m = regex.search(line)\n  if m and not m.start():\n    return MakeToken(lines, pos, pos + m.end(), token_type)\n  else:\n    print 'ERROR: %s expected at %s.' % (token_type, pos)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseToken(lines, pos, regex, token_type):\n  line = lines[pos.line][pos.column:]\n  m = regex.search(line)\n  if m and not m.start():\n    return MakeToken(lines, pos, pos + m.end(), token_type)\n  else:\n    print 'ERROR: %s expected at %s.' % (token_type, pos)\n    sys.exit(1)\nID_REGEX = re.compile(r'[_A-Za-z]\\w*')\nEQ_REGEX = re.compile(r'=')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Skip",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()\n  else:\n    return pos\ndef SkipUntil(lines, pos, regex, token_type):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "SkipUntil",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def SkipUntil(lines, pos, regex, token_type):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m:\n    return pos + m.start()\n  else:\n    print ('ERROR: %s expected on line %s after column %s.' %\n           (token_type, pos.line + 1, pos.column))\n    sys.exit(1)\ndef ParseExpTokenInParens(lines, pos):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseExpTokenInParens",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseExpTokenInParens(lines, pos):\n  def ParseInParens(pos):\n    pos = Skip(lines, pos, OPTIONAL_WHITE_SPACES_REGEX)\n    pos = Skip(lines, pos, r'\\(')\n    pos = Parse(pos)\n    pos = Skip(lines, pos, r'\\)')\n    return pos\n  def Parse(pos):\n    pos = SkipUntil(lines, pos, r'\\(|\\)', ')')\n    if SubString(lines, pos, pos + 1) == '(':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "RStripNewLineFromToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def RStripNewLineFromToken(token):\n  if token.value.endswith('\\n'):\n    return Token(token.start, token.end, token.value[:-1], token.token_type)\n  else:\n    return token\ndef TokenizeLines(lines, pos):\n  while True:\n    found = FindFirst(lines, TOKEN_TABLE, pos)\n    if not found:\n      yield MakeToken(lines, pos, Eof(), 'code')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "TokenizeLines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def TokenizeLines(lines, pos):\n  while True:\n    found = FindFirst(lines, TOKEN_TABLE, pos)\n    if not found:\n      yield MakeToken(lines, pos, Eof(), 'code')\n      return\n    if found.start == pos:\n      prev_token = None\n      prev_token_rstripped = None\n    else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "Tokenize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def Tokenize(s):\n  \"\"\"A generator that yields the tokens in the given string.\"\"\"\n  if s != '':\n    lines = s.splitlines(True)\n    for token in TokenizeLines(lines, Cursor(0, 0)):\n      yield token\nclass CodeNode:\n  def __init__(self, atomic_code_list=None):\n    self.atomic_code = atomic_code_list\nclass VarNode:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "PopFront",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def PopFront(a_list):\n  head = a_list[0]\n  a_list[:1] = []\n  return head\ndef PushFront(a_list, elem):\n  a_list[:0] = [elem]\ndef PopToken(a_list, token_type=None):\n  token = PopFront(a_list)\n  if token_type is not None and token.token_type != token_type:\n    print 'ERROR: %s expected at %s' % (token_type, token.start)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "PushFront",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def PushFront(a_list, elem):\n  a_list[:0] = [elem]\ndef PopToken(a_list, token_type=None):\n  token = PopFront(a_list)\n  if token_type is not None and token.token_type != token_type:\n    print 'ERROR: %s expected at %s' % (token_type, token.start)\n    print 'ERROR: %s found instead' % (token,)\n    sys.exit(1)\n  return token\ndef PeekToken(a_list):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "PopToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def PopToken(a_list, token_type=None):\n  token = PopFront(a_list)\n  if token_type is not None and token.token_type != token_type:\n    print 'ERROR: %s expected at %s' % (token_type, token.start)\n    print 'ERROR: %s found instead' % (token,)\n    sys.exit(1)\n  return token\ndef PeekToken(a_list):\n  if not a_list:\n    return None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "PeekToken",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def PeekToken(a_list):\n  if not a_list:\n    return None\n  return a_list[0]\ndef ParseExpNode(token):\n  python_exp = re.sub(r'([_A-Za-z]\\w*)', r'self.GetValue(\"\\1\")', token.value)\n  return ExpNode(token, python_exp)\ndef ParseElseNode(tokens):\n  def Pop(token_type=None):\n    return PopToken(tokens, token_type)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseExpNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseExpNode(token):\n  python_exp = re.sub(r'([_A-Za-z]\\w*)', r'self.GetValue(\"\\1\")', token.value)\n  return ExpNode(token, python_exp)\ndef ParseElseNode(tokens):\n  def Pop(token_type=None):\n    return PopToken(tokens, token_type)\n  next = PeekToken(tokens)\n  if not next:\n    return None\n  if next.token_type == '$else':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseElseNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseElseNode(tokens):\n  def Pop(token_type=None):\n    return PopToken(tokens, token_type)\n  next = PeekToken(tokens)\n  if not next:\n    return None\n  if next.token_type == '$else':\n    Pop('$else')\n    Pop('[[')\n    code_node = ParseCodeNode(tokens)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseAtomicCodeNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseAtomicCodeNode(tokens):\n  def Pop(token_type=None):\n    return PopToken(tokens, token_type)\n  head = PopFront(tokens)\n  t = head.token_type\n  if t == 'code':\n    return RawCodeNode(head)\n  elif t == '$var':\n    id_token = Pop('id')\n    Pop('=')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseCodeNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseCodeNode(tokens):\n  atomic_code_list = []\n  while True:\n    if not tokens:\n      break\n    atomic_code_node = ParseAtomicCodeNode(tokens)\n    if atomic_code_node:\n      atomic_code_list.append(atomic_code_node)\n    else:\n      break",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ParseToAST",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ParseToAST(pump_src_text):\n  \"\"\"Convert the given Pump source text into an AST.\"\"\"\n  tokens = list(Tokenize(pump_src_text))\n  code_node = ParseCodeNode(tokens)\n  return code_node\nclass Env:\n  def __init__(self):\n    self.variables = []\n    self.ranges = []\n  def Clone(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "RunAtomicCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def RunAtomicCode(env, node, output):\n  if isinstance(node, VarNode):\n    identifier = node.identifier.value.strip()\n    result = Output()\n    RunAtomicCode(env.Clone(), node.atomic_code, result)\n    value = result.string\n    env.PushVariable(identifier, value)\n  elif isinstance(node, RangeNode):\n    identifier = node.identifier.value.strip()\n    lower = int(env.EvalExp(node.exp1))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "RunCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def RunCode(env, code_node, output):\n  for atomic_code in code_node.atomic_code:\n    RunAtomicCode(env, atomic_code, output)\ndef IsSingleLineComment(cur_line):\n  return '//' in cur_line\ndef IsInPreprocessorDirective(prev_lines, cur_line):\n  if cur_line.lstrip().startswith('#'):\n    return True\n  return prev_lines and prev_lines[-1].endswith('\\\\')\ndef WrapComment(line, output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "IsSingleLineComment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def IsSingleLineComment(cur_line):\n  return '//' in cur_line\ndef IsInPreprocessorDirective(prev_lines, cur_line):\n  if cur_line.lstrip().startswith('#'):\n    return True\n  return prev_lines and prev_lines[-1].endswith('\\\\')\ndef WrapComment(line, output):\n  loc = line.find('//')\n  before_comment = line[:loc].rstrip()\n  if before_comment == '':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "IsInPreprocessorDirective",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def IsInPreprocessorDirective(prev_lines, cur_line):\n  if cur_line.lstrip().startswith('#'):\n    return True\n  return prev_lines and prev_lines[-1].endswith('\\\\')\ndef WrapComment(line, output):\n  loc = line.find('//')\n  before_comment = line[:loc].rstrip()\n  if before_comment == '':\n    indent = loc\n  else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WrapComment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def WrapComment(line, output):\n  loc = line.find('//')\n  before_comment = line[:loc].rstrip()\n  if before_comment == '':\n    indent = loc\n  else:\n    output.append(before_comment)\n    indent = len(before_comment) - len(before_comment.lstrip())\n  prefix = indent*' ' + '// '\n  max_len = 80 - len(prefix)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WrapCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def WrapCode(line, line_concat, output):\n  indent = len(line) - len(line.lstrip())\n  prefix = indent*' '  # Prefix of the current line\n  max_len = 80 - indent - len(line_concat)  # Maximum length of the current line\n  new_prefix = prefix + 4*' '  # Prefix of a continuation line\n  new_max_len = max_len - 4  # Maximum length of a continuation line\n  # Prefers to wrap a line after a ',' or ';'.\n  segs = [seg for seg in re.split(r'([^,;]+[,;]?)', line.strip()) if seg != '']\n  cur_line = ''  # The current line without leading spaces.\n  for seg in segs:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WrapPreprocessorDirective",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def WrapPreprocessorDirective(line, output):\n  WrapCode(line, ' \\\\', output)\ndef WrapPlainCode(line, output):\n  WrapCode(line, '', output)\ndef IsMultiLineIWYUPragma(line):\n  return re.search(r'/\\* IWYU pragma: ', line)\ndef IsHeaderGuardIncludeOrOneLineIWYUPragma(line):\n  return (re.match(r'^#(ifndef|define|endif\\s*//)\\s*[\\w_]+\\s*$', line) or\n          re.match(r'^#include\\s', line) or\n          # Don't break IWYU pragmas, either; that causes iwyu.py problems.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WrapPlainCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def WrapPlainCode(line, output):\n  WrapCode(line, '', output)\ndef IsMultiLineIWYUPragma(line):\n  return re.search(r'/\\* IWYU pragma: ', line)\ndef IsHeaderGuardIncludeOrOneLineIWYUPragma(line):\n  return (re.match(r'^#(ifndef|define|endif\\s*//)\\s*[\\w_]+\\s*$', line) or\n          re.match(r'^#include\\s', line) or\n          # Don't break IWYU pragmas, either; that causes iwyu.py problems.\n          re.search(r'// IWYU pragma: ', line))\ndef WrapLongLine(line, output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "IsMultiLineIWYUPragma",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def IsMultiLineIWYUPragma(line):\n  return re.search(r'/\\* IWYU pragma: ', line)\ndef IsHeaderGuardIncludeOrOneLineIWYUPragma(line):\n  return (re.match(r'^#(ifndef|define|endif\\s*//)\\s*[\\w_]+\\s*$', line) or\n          re.match(r'^#include\\s', line) or\n          # Don't break IWYU pragmas, either; that causes iwyu.py problems.\n          re.search(r'// IWYU pragma: ', line))\ndef WrapLongLine(line, output):\n  line = line.rstrip()\n  if len(line) <= 80:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "IsHeaderGuardIncludeOrOneLineIWYUPragma",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def IsHeaderGuardIncludeOrOneLineIWYUPragma(line):\n  return (re.match(r'^#(ifndef|define|endif\\s*//)\\s*[\\w_]+\\s*$', line) or\n          re.match(r'^#include\\s', line) or\n          # Don't break IWYU pragmas, either; that causes iwyu.py problems.\n          re.search(r'// IWYU pragma: ', line))\ndef WrapLongLine(line, output):\n  line = line.rstrip()\n  if len(line) <= 80:\n    output.append(line)\n  elif IsSingleLineComment(line):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WrapLongLine",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def WrapLongLine(line, output):\n  line = line.rstrip()\n  if len(line) <= 80:\n    output.append(line)\n  elif IsSingleLineComment(line):\n    if IsHeaderGuardIncludeOrOneLineIWYUPragma(line):\n      # The style guide made an exception to allow long header guard lines,\n      # includes and IWYU pragmas.\n      output.append(line)\n    else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "BeautifyCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def BeautifyCode(string):\n  lines = string.splitlines()\n  output = []\n  for line in lines:\n    WrapLongLine(line, output)\n  output2 = [line.rstrip() for line in output]\n  return '\\n'.join(output2) + '\\n'\ndef ConvertFromPumpSource(src_text):\n  \"\"\"Return the text generated from the given Pump source text.\"\"\"\n  ast = ParseToAST(StripMetaComments(src_text))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ConvertFromPumpSource",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def ConvertFromPumpSource(src_text):\n  \"\"\"Return the text generated from the given Pump source text.\"\"\"\n  ast = ParseToAST(StripMetaComments(src_text))\n  output = Output()\n  RunCode(Env(), ast, output)\n  return BeautifyCode(output.string)\ndef main(argv):\n  if len(argv) == 1:\n    print __doc__\n    sys.exit(1)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "def main(argv):\n  if len(argv) == 1:\n    print __doc__\n    sys.exit(1)\n  file_path = argv[-1]\n  output_str = ConvertFromPumpSource(file(file_path, 'r').read())\n  if file_path.endswith('.pump'):\n    output_file_path = file_path[:-5]\n  else:\n    output_file_path = '-'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\nimport sys\nTOKEN_TABLE = [\n    (re.compile(r'\\$var\\s+'), '$var'),\n    (re.compile(r'\\$elif\\s+'), '$elif'),\n    (re.compile(r'\\$else\\s+'), '$else'),\n    (re.compile(r'\\$for\\s+'), '$for'),\n    (re.compile(r'\\$if\\s+'), '$if'),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "TOKEN_TABLE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "TOKEN_TABLE = [\n    (re.compile(r'\\$var\\s+'), '$var'),\n    (re.compile(r'\\$elif\\s+'), '$elif'),\n    (re.compile(r'\\$else\\s+'), '$else'),\n    (re.compile(r'\\$for\\s+'), '$for'),\n    (re.compile(r'\\$if\\s+'), '$if'),\n    (re.compile(r'\\$range\\s+'), '$range'),\n    (re.compile(r'\\$[_A-Za-z]\\w*'), '$id'),\n    (re.compile(r'\\$\\(\\$\\)'), '$($)'),\n    (re.compile(r'\\$'), '$'),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "ID_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "ID_REGEX = re.compile(r'[_A-Za-z]\\w*')\nEQ_REGEX = re.compile(r'=')\nREST_OF_LINE_REGEX = re.compile(r'.*?(?=$|\\$\\$)')\nOPTIONAL_WHITE_SPACES_REGEX = re.compile(r'\\s*')\nWHITE_SPACE_REGEX = re.compile(r'\\s')\nDOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "EQ_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "EQ_REGEX = re.compile(r'=')\nREST_OF_LINE_REGEX = re.compile(r'.*?(?=$|\\$\\$)')\nOPTIONAL_WHITE_SPACES_REGEX = re.compile(r'\\s*')\nWHITE_SPACE_REGEX = re.compile(r'\\s')\nDOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "REST_OF_LINE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "REST_OF_LINE_REGEX = re.compile(r'.*?(?=$|\\$\\$)')\nOPTIONAL_WHITE_SPACES_REGEX = re.compile(r'\\s*')\nWHITE_SPACE_REGEX = re.compile(r'\\s')\nDOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()\n  else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_WHITE_SPACES_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "OPTIONAL_WHITE_SPACES_REGEX = re.compile(r'\\s*')\nWHITE_SPACE_REGEX = re.compile(r'\\s')\nDOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()\n  else:\n    return pos",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WHITE_SPACE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "WHITE_SPACE_REGEX = re.compile(r'\\s')\nDOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()\n  else:\n    return pos\ndef SkipUntil(lines, pos, regex, token_type):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "DOT_DOT_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "peekOfCode": "DOT_DOT_REGEX = re.compile(r'\\.\\.')\ndef Skip(lines, pos, regex):\n  line = lines[pos.line][pos.column:]\n  m = re.search(regex, line)\n  if m and not m.start():\n    return pos + m.end()\n  else:\n    return pos\ndef SkipUntil(lines, pos, regex, token_type):\n  line = lines[pos.line][pos.column:]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.pump",
        "documentation": {}
    },
    {
        "label": "WikiBrancher",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "class WikiBrancher(object):\n  \"\"\"Branches ...\"\"\"\n  def __init__(self, dot_version):\n    self.project, svn_root_path = common.GetSvnInfo()\n    if self.project not in ('googletest', 'googlemock'):\n      sys.exit('This script must be run in a gtest or gmock SVN workspace.')\n    self.wiki_dir = svn_root_path + '/wiki'\n    # Turn '2.6' to 'V2_6_'.\n    self.version_prefix = 'V' + dot_version.replace('.', '_') + '_'\n    self.files_to_branch = self.GetFilesToBranch()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "DropWikiSuffix",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "def DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)\nclass WikiBrancher(object):\n  \"\"\"Branches ...\"\"\"\n  def __init__(self, dot_version):\n    self.project, svn_root_path = common.GetSvnInfo()\n    if self.project not in ('googletest', 'googlemock'):\n      sys.exit('This script must be run in a gtest or gmock SVN workspace.')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "def main():\n  if len(sys.argv) != 2:\n    sys.exit(__doc__)\n  brancher = WikiBrancher(sys.argv[1])\n  brancher.BranchFiles()\n  brancher.UpdateLinksInBranchedFiles()\nif __name__ == '__main__':\n  main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport re\nimport sys\nimport common\n# Wiki pages that shouldn't be branched for every gtest/gmock release.\nGTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']\nGMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "GTEST_UNVERSIONED_WIKIS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "GTEST_UNVERSIONED_WIKIS = ['DevGuide.wiki']\nGMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',\n    'KnownIssues.wiki'\n    ]\ndef DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "GMOCK_UNVERSIONED_WIKIS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "peekOfCode": "GMOCK_UNVERSIONED_WIKIS = [\n    'DesignDoc.wiki',\n    'DevGuide.wiki',\n    'KnownIssues.wiki'\n    ]\ndef DropWikiSuffix(wiki_filename):\n  \"\"\"Removes the .wiki suffix (if any) from the given filename.\"\"\"\n  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')\n          else wiki_filename)\nclass WikiBrancher(object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.release_docs",
        "documentation": {}
    },
    {
        "label": "ClientLoginError",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]\nclass AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "AbstractRpcServer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class AbstractRpcServer(object):\n  \"\"\"Provides a common interface for a simple RPC server.\"\"\"\n  def __init__(self, host, auth_function, host_override=None, extra_headers={},\n               save_cookies=False):\n    \"\"\"Creates a new HttpRpcServer.\n    Args:\n      host: The host to send requests to.\n      auth_function: A function that takes no arguments and returns an\n        (email, password) tuple when called. Will be called if authentication\n        is required.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "HttpRpcServer",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class HttpRpcServer(AbstractRpcServer):\n  \"\"\"Provides a simplified RPC-style interface for HTTP requests.\"\"\"\n  def _Authenticate(self):\n    \"\"\"Save the cookie jar after authentication.\"\"\"\n    super(HttpRpcServer, self)._Authenticate()\n    if self.save_cookies:\n      StatusUpdate(\"Saving authentication cookies to %s\" % self.cookie_file)\n      self.cookie_jar.save()\n  def _GetOpener(self):\n    \"\"\"Returns an OpenerDirector that supports cookies and ignores redirects.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "VersionControlSystem",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class VersionControlSystem(object):\n  \"\"\"Abstract base class providing an interface to the VCS.\"\"\"\n  def __init__(self, options):\n    \"\"\"Constructor.\n    Args:\n      options: Command line options.\n    \"\"\"\n    self.options = options\n  def GenerateDiff(self, args):\n    \"\"\"Return the current diff as a string.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SubversionVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class SubversionVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Subversion.\"\"\"\n  def __init__(self, options):\n    super(SubversionVCS, self).__init__(options)\n    if self.options.revision:\n      match = re.match(r\"(\\d+)(:(\\d+))?\", self.options.revision)\n      if not match:\n        ErrorExit(\"Invalid Subversion revision %s.\" % self.options.revision)\n      self.rev_start = match.group(1)\n      self.rev_end = match.group(3)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GitVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class GitVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Git.\"\"\"\n  def __init__(self, options):\n    super(GitVCS, self).__init__(options)\n    # Map of filename -> hash of base file.\n    self.base_hashes = {}\n  def GenerateDiff(self, extra_args):\n    # This is more complicated than svn's GenerateDiff because we must convert\n    # the diff output to include an svn-style \"Index:\" line as well as record\n    # the hashes of the base files, so we can upload them along with our diff.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MercurialVCS",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "class MercurialVCS(VersionControlSystem):\n  \"\"\"Implementation of the VersionControlSystem interface for Mercurial.\"\"\"\n  def __init__(self, options, repo_dir):\n    super(MercurialVCS, self).__init__(options)\n    # Absolute path to repository (we can be in a subdir)\n    self.repo_dir = os.path.normpath(repo_dir)\n    # Compute the subdir\n    cwd = os.path.normpath(os.getcwd())\n    assert cwd.startswith(self.repo_dir)\n    self.subdir = cwd[len(self.repo_dir):].lstrip(r\"\\/\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetEmail",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"\n  if os.path.exists(last_email_file_name):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "StatusUpdate",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def StatusUpdate(msg):\n  \"\"\"Print a status message to stdout.\n  If 'verbosity' is greater than 0, print the message.\n  Args:\n    msg: The string to print.\n  \"\"\"\n  if verbosity > 0:\n    print msg\ndef ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "ErrorExit",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def ErrorExit(msg):\n  \"\"\"Print an error message to stderr and exit.\"\"\"\n  print >>sys.stderr, msg\n  sys.exit(1)\nclass ClientLoginError(urllib2.HTTPError):\n  \"\"\"Raised to indicate there was an error authenticating with ClientLogin.\"\"\"\n  def __init__(self, url, code, msg, headers, args):\n    urllib2.HTTPError.__init__(self, url, code, msg, headers, None)\n    self.args = args\n    self.reason = args[\"Error\"]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetRpcServer",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def GetRpcServer(options):\n  \"\"\"Returns an instance of an AbstractRpcServer.\n  Returns:\n    A new AbstractRpcServer, on which RPC calls can be made.\n  \"\"\"\n  rpc_server_class = HttpRpcServer\n  def GetUserCredentials():\n    \"\"\"Prompts the user for a username and password.\"\"\"\n    email = options.email\n    if email is None:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "EncodeMultipartFormData",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def EncodeMultipartFormData(fields, files):\n  \"\"\"Encode form fields for multipart/form-data.\n  Args:\n    fields: A sequence of (name, value) elements for regular form fields.\n    files: A sequence of (name, filename, value) elements for data to be\n           uploaded as files.\n  Returns:\n    (content_type, body) ready for httplib.HTTP instance.\n  Source:\n    https://web.archive.org/web/20160116052001/code.activestate.com/recipes/146306",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GetContentType",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def GetContentType(filename):\n  \"\"\"Helper to guess the content-type from the filename.\"\"\"\n  return mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n# Use a shell for subcommands on Windows to get a PATH search.\nuse_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShellWithReturnCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:\n    Tuple (output, return code)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RunShell",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def RunShell(command, silent_ok=False, universal_newlines=True,\n             print_output=False):\n  data, retcode = RunShellWithReturnCode(command, print_output,\n                                         universal_newlines)\n  if retcode:\n    ErrorExit(\"Got error status from %s:\\n%s\" % (command, data))\n  if not silent_ok and not data:\n    ErrorExit(\"No output from %s\" % command)\n  return data\nclass VersionControlSystem(object):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "SplitPatch",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def SplitPatch(data):\n  \"\"\"Splits a patch into separate pieces for each file.\n  Args:\n    data: A string containing the output of svn diff.\n  Returns:\n    A list of 2-tuple (filename, text) where text is the svn diff output\n      pertaining to filename.\n  \"\"\"\n  patches = []\n  filename = None",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "UploadSeparatePatches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def UploadSeparatePatches(issue, rpc_server, patchset, data, options):\n  \"\"\"Uploads a separate patch for each file in the diff output.\n  Returns a list of [patch_key, filename] for each file.\n  \"\"\"\n  patches = SplitPatch(data)\n  rv = []\n  for patch in patches:\n    if len(patch[1]) > MAX_UPLOAD_SIZE:\n      print (\"Not uploading the patch for \" + patch[0] +\n             \" because the file is too large.\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "GuessVCS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def GuessVCS(options):\n  \"\"\"Helper to guess the version control system.\n  This examines the current directory, guesses which VersionControlSystem\n  we're using, and returns an instance of the appropriate class.  Exit with an\n  error if we can't figure it out.\n  Returns:\n    A VersionControlSystem instance. Exits if the VCS can't be guessed.\n  \"\"\"\n  # Mercurial has a command to get the base directory of a repository\n  # Try running it, but don't die if we don't have hg installed.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "RealMain",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def RealMain(argv, data=None):\n  \"\"\"The real main function.\n  Args:\n    argv: Command line arguments.\n    data: Diff contents. If None (default) the diff is generated by\n      the VersionControlSystem implementation returned by GuessVCS().\n  Returns:\n    A 2-tuple (issue id, patchset id).\n    The patchset id is None if the base files are not uploaded by this\n    script (applies only to SVN checkouts).",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "def main():\n  try:\n    RealMain(sys.argv)\n  except KeyboardInterrupt:\n    print\n    StatusUpdate(\"Interrupted.\")\n    sys.exit(1)\nif __name__ == \"__main__\":\n  main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "verbosity",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "verbosity = 1\n# Max size of patch or base file.\nMAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "MAX_UPLOAD_SIZE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "MAX_UPLOAD_SIZE = 900 * 1024\ndef GetEmail(prompt):\n  \"\"\"Prompts the user for their email address and returns it.\n  The last used email address is saved to a file and offered up as a suggestion\n  to the user. If the user presses enter without typing in anything the last\n  used email address is used. If the user enters a new address, it is saved\n  for next time we prompt.\n  \"\"\"\n  last_email_file_name = os.path.expanduser(\"~/.last_codereview_email_address\")\n  last_email = \"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "parser = optparse.OptionParser(usage=\"%prog [options] [-- diff_options]\")\nparser.add_option(\"-y\", \"--assume_yes\", action=\"store_true\",\n                  dest=\"assume_yes\", default=False,\n                  help=\"Assume that the answer to yes/no questions is 'yes'.\")\n# Logging\ngroup = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Logging options\")\ngroup.add_option(\"-q\", \"--quiet\", action=\"store_const\", const=0,\n                 dest=\"verbose\", help=\"Print errors only.\")\ngroup.add_option(\"-v\", \"--verbose\", action=\"store_const\", const=2,\n                 dest=\"verbose\", default=1,\n                 help=\"Print info level logs (default).\")\ngroup.add_option(\"--noisy\", action=\"store_const\", const=3,\n                 dest=\"verbose\", help=\"Print all logs.\")\n# Review server\ngroup = parser.add_option_group(\"Review server options\")",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Review server options\")\ngroup.add_option(\"-s\", \"--server\", action=\"store\", dest=\"server\",\n                 default=\"codereview.appspot.com\",\n                 metavar=\"SERVER\",\n                 help=(\"The server to upload to. The format is host[:port]. \"\n                       \"Defaults to 'codereview.appspot.com'.\"))\ngroup.add_option(\"-e\", \"--email\", action=\"store\", dest=\"email\",\n                 metavar=\"EMAIL\", default=None,\n                 help=\"The username to use. Will prompt if omitted.\")\ngroup.add_option(\"-H\", \"--host\", action=\"store\", dest=\"host\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Issue options\")\ngroup.add_option(\"-d\", \"--description\", action=\"store\", dest=\"description\",\n                 metavar=\"DESCRIPTION\", default=None,\n                 help=\"Optional description when creating an issue.\")\ngroup.add_option(\"-f\", \"--description_file\", action=\"store\",\n                 dest=\"description_file\", metavar=\"DESCRIPTION_FILE\",\n                 default=None,\n                 help=\"Optional path of a file that contains \"\n                      \"the description when creating an issue.\")\ngroup.add_option(\"-r\", \"--reviewers\", action=\"store\", dest=\"reviewers\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "group = parser.add_option_group(\"Patch options\")\ngroup.add_option(\"-m\", \"--message\", action=\"store\", dest=\"message\",\n                 metavar=\"MESSAGE\", default=None,\n                 help=\"A message to identify the patch. \"\n                      \"Will prompt if omitted.\")\ngroup.add_option(\"-i\", \"--issue\", type=\"int\", action=\"store\",\n                 metavar=\"ISSUE\", default=None,\n                 help=\"Issue number to which to add. Defaults to new issue.\")\ngroup.add_option(\"--download_base\", action=\"store_true\",\n                 dest=\"download_base\", default=False,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "use_shell",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "peekOfCode": "use_shell = sys.platform.startswith(\"win\")\ndef RunShellWithReturnCode(command, print_output=False,\n                           universal_newlines=True):\n  \"\"\"Executes a command and returns the output from stdout and the return code.\n  Args:\n    command: Command to execute.\n    print_output: If True, the output is printed to stdout.\n                  If False, both stdout and stderr are ignored.\n    universal_newlines: Use universal_newlines flag (default: True).\n  Returns:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "peekOfCode": "def main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False\n  for arg in sys.argv[1:]:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "peekOfCode": "__author__ = 'wan@google.com (Zhanyong Wan)'\nimport os\nimport sys\nCC_FLAG = '--cc='\nGTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "CC_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "peekOfCode": "CC_FLAG = '--cc='\nGTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "GTEST_GROUP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "peekOfCode": "GTEST_GROUP = 'googletestframework@googlegroups.com'\ndef main():\n  # Finds the path to upload.py, assuming it is in the same directory\n  # as this file.\n  my_dir = os.path.dirname(os.path.abspath(__file__))\n  upload_py_path = os.path.join(my_dir, 'upload.py')\n  # Adds Google Test discussion group to the cc line if it's not there\n  # already.\n  upload_py_argv = [upload_py_path]\n  found_cc_flag = False",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.scripts.upload_gtest",
        "documentation": {}
    },
    {
        "label": "GTestBreakOnFailureUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "class GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable or\n  the --gtest_break_on_failure flag to turn assertion failures into\n  segmentation faults.\n  \"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, expect_seg_fault):\n    \"\"\"Runs googletest-break-on-failure-unittest_ and verifies that it does\n    (or does not) have a seg-fault.\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "def Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n  p = gtest_test_utils.Subprocess(command, env=environ)\n  if p.terminated_by_signal:\n    return 1\n  else:\n    return 0\n# The tests.\nclass GTestBreakOnFailureUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the GTEST_BREAK_ON_FAILURE environment variable or",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\n# The environment variable for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'\n# The command line flag for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "BREAK_ON_FAILURE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "BREAK_ON_FAILURE_ENV_VAR = 'GTEST_BREAK_ON_FAILURE'\n# The command line flag for enabling/disabling the break-on-failure mode.\nBREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "BREAK_ON_FAILURE_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "BREAK_ON_FAILURE_FLAG = 'gtest_break_on_failure'\n# The environment variable for enabling/disabling the throw-on-failure mode.\nTHROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "THROW_ON_FAILURE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "THROW_ON_FAILURE_ENV_VAR = 'GTEST_THROW_ON_FAILURE'\n# The environment variable for enabling/disabling the catch-exceptions mode.\nCATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "CATCH_EXCEPTIONS_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "CATCH_EXCEPTIONS_ENV_VAR = 'GTEST_CATCH_EXCEPTIONS'\n# Path to the googletest-break-on-failure-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-break-on-failure-unittest_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\ndef Run(command):\n  \"\"\"Runs a command; returns 1 if it was killed by a signal, or 0 otherwise.\"\"\"\n  p = gtest_test_utils.Subprocess(command, env=environ)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-break-on-failure-unittest",
        "documentation": {}
    },
    {
        "label": "CatchCxxExceptionsTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "class CatchCxxExceptionsTest(gtest_test_utils.TestCase):\n  \"\"\"Tests C++ exception-catching behavior.\n     Tests in this test case verify that:\n     * C++ exceptions are caught and logged as C++ (not SEH) exceptions\n     * Exception thrown affect the remainder of the test work flow in the\n       expected manner.\n  \"\"\"\n  def testCatchesCxxExceptionsInFixtureConstructor(self):\n    self.assert_('C++ exception with description '\n                 '\"Standard C++ exception\" thrown '",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "FLAG_PREFIX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "FLAG_PREFIX = '--gtest_'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nNO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nNO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "NO_CATCH_EXCEPTIONS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "NO_CATCH_EXCEPTIONS_FLAG = FLAG_PREFIX + 'catch_exceptions=0'\nFILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "FILTER_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "FILTER_FLAG = FLAG_PREFIX + 'filter'\n# Path to the googletest-catch-exceptions-ex-test_ binary, compiled with\n# exceptions enabled.\nEX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EX_EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EX_EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-ex-test_')\n# Path to the googletest-catch-exceptions-test_ binary, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-catch-exceptions-no-ex-test_')\nenviron = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "environ = gtest_test_utils.environ\nSetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nTEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "SetEnvVar = gtest_test_utils.SetEnvVar\n# Tests in this file run a Google-Test-based test program and expect it\n# to terminate prematurely.  Therefore they are incompatible with\n# the premature-exit-file protocol by design.  Unset the\n# premature-exit filepath to prevent Google Test from creating\n# the file.\nSetEnvVar(gtest_test_utils.PREMATURE_EXIT_FILE_ENV_VAR, None)\nTEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output\nSUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "TEST_LIST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "TEST_LIST = gtest_test_utils.Subprocess(\n    [EXE_PATH, LIST_TESTS_FLAG], env=environ).output\nSUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_SEH_EXCEPTIONS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "SUPPORTS_SEH_EXCEPTIONS = 'ThrowsSehException' in TEST_LIST\nif SUPPORTS_SEH_EXCEPTIONS:\n  BINARY_OUTPUT = gtest_test_utils.Subprocess([EXE_PATH], env=environ).output\nEX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "EX_BINARY_OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "peekOfCode": "EX_BINARY_OUTPUT = gtest_test_utils.Subprocess(\n    [EX_EXE_PATH], env=environ).output\n# The tests.\nif SUPPORTS_SEH_EXCEPTIONS:\n  # pylint:disable-msg=C6302\n  class CatchSehExceptionsTest(gtest_test_utils.TestCase):\n    \"\"\"Tests exception-catching behavior.\"\"\"\n    def TestSehExceptions(self, test_output):\n      self.assert_('SEH exception with code 0x2a thrown '\n                   'in the test fixture\\'s constructor'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-catch-exceptions-test",
        "documentation": {}
    },
    {
        "label": "GTestColorTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "class GTestColorTest(gtest_test_utils.TestCase):\n  def testNoEnvVarNoFlag(self):\n    \"\"\"Tests the case when there's neither GTEST_COLOR nor --gtest_color.\"\"\"\n    if not IS_WINDOWS:\n      self.assert_(not UsesColor('dumb', None, None))\n      self.assert_(not UsesColor('emacs', None, None))\n      self.assert_(not UsesColor('xterm-mono', None, None))\n      self.assert_(not UsesColor('unknown', None, None))\n      self.assert_(not UsesColor(None, None, None))\n    self.assert_(UsesColor('linux', None, None))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "UsesColor",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "def UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)\n  SetEnvVar(COLOR_ENV_VAR, color_env_var)\n  if color_flag is None:\n    args = []\n  else:\n    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]\n  p = gtest_test_utils.Subprocess([COMMAND] + args)\n  return not p.exited or p.exit_code",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nCOLOR_ENV_VAR = 'GTEST_COLOR'\nCOLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COLOR_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "COLOR_ENV_VAR = 'GTEST_COLOR'\nCOLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COLOR_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "COLOR_FLAG = 'gtest_color'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-color-test_')\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef UsesColor(term, color_env_var, color_flag):\n  \"\"\"Runs googletest-color-test_ and returns its exit code.\"\"\"\n  SetEnvVar('TERM', term)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-color-test",
        "documentation": {}
    },
    {
        "label": "GTestEnvVarTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "class GTestEnvVarTest(gtest_test_utils.TestCase):\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"\n    TestFlag('break_on_failure', '1', '0')\n    TestFlag('color', 'yes', 'auto')\n    TestFlag('filter', 'FooTest.Bar', '*')\n    SetEnvVar('XML_OUTPUT_FILE', None)  # For 'output' test\n    TestFlag('output', 'xml:tmp/foo.xml', '')\n    TestFlag('print_time', '0', '1')\n    TestFlag('repeat', '999', '1')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "AssertEq",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "def AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n  args = [COMMAND]\n  if flag is not None:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "GetFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "def GetFlag(flag):\n  \"\"\"Runs googletest-env-var-test_ and returns its output.\"\"\"\n  args = [COMMAND]\n  if flag is not None:\n    args += [flag]\n  return gtest_test_utils.Subprocess(args, env=environ).output\ndef TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "TestFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "def TestFlag(flag, test_val, default_val):\n  \"\"\"Verifies that the given flag is affected by the corresponding env var.\"\"\"\n  env_var = 'GTEST_' + flag.upper()\n  SetEnvVar(env_var, test_val)\n  AssertEq(test_val, GetFlag(flag))\n  SetEnvVar(env_var, None)\n  AssertEq(default_val, GetFlag(flag))\nclass GTestEnvVarTest(gtest_test_utils.TestCase):\n  def testEnvVarAffectsFlag(self):\n    \"\"\"Tests that environment variable should affect the corresponding flag.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-env-var-test_')\nenviron = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "peekOfCode": "environ = os.environ.copy()\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-env-var-test",
        "documentation": {}
    },
    {
        "label": "GTestFilterUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "class GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n  # Utilities.\n  def AssertSetEqual(self, lhs, rhs):\n    \"\"\"Asserts that two sets are equal.\"\"\"\n    for elem in lhs:\n      self.assert_(elem in rhs, '%s in %s' % (elem, rhs))\n    for elem in rhs:\n      self.assert_(elem in lhs, '%s in %s' % (elem, lhs))\n  def AssertPartitionIsValid(self, set_var, list_of_sets):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),\n                                     env=environ).output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),\n                                     env=environ).output\ndef RunAndExtractTestList(args = None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunAndExtractTestList",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunAndExtractTestList(args = None):\n  \"\"\"Runs the test program and returns its exit code and a list of tests run.\"\"\"\n  p = gtest_test_utils.Subprocess([COMMAND] + (args or []), env=environ)\n  tests_run = []\n  test_case = ''\n  test = ''\n  for line in p.output.split('\\n'):\n    match = TEST_CASE_REGEX.match(line)\n    if match is not None:\n      test_case = match.group(1)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "InvokeWithModifiedEnv",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def InvokeWithModifiedEnv(extra_env, function, *args, **kwargs):\n  \"\"\"Runs the given function and arguments in a modified environment.\"\"\"\n  try:\n    original_env = environ.copy()\n    environ.update(extra_env)\n    return function(*args, **kwargs)\n  finally:\n    environ.clear()\n    environ.update(original_env)\ndef RunWithSharding(total_shards, shard_index, command):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "RunWithSharding",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "def RunWithSharding(total_shards, shard_index, command):\n  \"\"\"Runs a test program shard and returns exit code and a list of tests run.\"\"\"\n  extra_env = {SHARD_INDEX_ENV_VAR: str(shard_index),\n               TOTAL_SHARDS_ENV_VAR: str(total_shards)}\n  return InvokeWithModifiedEnv(extra_env, RunAndExtractTestList, command)\n# The unit test.\nclass GTestFilterUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the env variable or the command line flag to filter tests.\"\"\"\n  # Utilities.\n  def AssertSetEqual(self, lhs, rhs):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_PASS_EMPTY_ENV",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_PASS_EMPTY_ENV = False\nif sys.executable:\n  os.environ['EMPTY_VAR'] = ''\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', 'import os; print(\\'EMPTY_VAR\\' in os.environ)'])\n  CAN_PASS_EMPTY_ENV = eval(child.output)\n# Check if this platform can unset environment variables in child processes.\n# We set an env variable to a non-empty string, unset it, and invoke\n# a python script in a subprocess to print whether the variable\n# is NO LONGER in os.environ.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_UNSET_ENV",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_UNSET_ENV = False\nif sys.executable:\n  os.environ['UNSET_VAR'] = 'X'\n  del os.environ['UNSET_VAR']\n  child = gtest_test_utils.Subprocess(\n      [sys.executable, '-c', 'import os; print(\\'UNSET_VAR\\' not in os.environ)'\n      ])\n  CAN_UNSET_ENV = eval(child.output)\n# Checks if we should test with an empty filter. This doesn't\n# make sense on platforms that cannot pass empty env variables (Win32)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "CAN_TEST_EMPTY_FILTER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "CAN_TEST_EMPTY_FILTER = (CAN_PASS_EMPTY_ENV and CAN_UNSET_ENV)\n# The environment variable for specifying the test filters.\nFILTER_ENV_VAR = 'GTEST_FILTER'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "FILTER_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "FILTER_ENV_VAR = 'GTEST_FILTER'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_STATUS_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\n# The command line flag for specifying the test filters.\nFILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "FILTER_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "FILTER_FLAG = 'gtest_filter'\n# The command line flag for including disabled tests.\nALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "ALSO_RUN_DISABLED_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "ALSO_RUN_DISABLED_TESTS_FLAG = 'gtest_also_run_disabled_tests'\n# Command to run the googletest-filter-unittest_ program.\nCOMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-filter-unittest_')\n# Regex for determining whether parameterized tests are enabled in the binary.\nPARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "PARAM_TEST_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "PARAM_TEST_REGEX = re.compile(r'/ParamTest')\n# Regex for parsing test case names from Google Test's output.\nTEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TEST_CASE_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TEST_CASE_REGEX = re.compile(r'^\\[\\-+\\] \\d+ tests? from (\\w+(/\\w+)?)')\n# Regex for parsing test names from Google Test's output.\nTEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "TEST_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "TEST_REGEX = re.compile(r'^\\[\\s*RUN\\s*\\].*\\.(\\w+(/\\w+)?)')\n# The command line flag to tell Google Test to output the list of tests it\n# will run.\nLIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "LIST_TESTS_FLAG = '--gtest_list_tests'\n# Indicates whether Google Test supports death tests.\nSUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = 'HasDeathTest' in gtest_test_utils.Subprocess(\n    [COMMAND, LIST_TESTS_FLAG]).output\n# Full names of all tests in googletest-filter-unittests_.\nPARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',\n    'SeqQ/ParamTest.TestX/0',\n    'SeqQ/ParamTest.TestX/1',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "PARAM_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "PARAM_TESTS = [\n    'SeqP/ParamTest.TestX/0',\n    'SeqP/ParamTest.TestX/1',\n    'SeqP/ParamTest.TestY/0',\n    'SeqP/ParamTest.TestY/1',\n    'SeqQ/ParamTest.TestX/0',\n    'SeqQ/ParamTest.TestX/1',\n    'SeqQ/ParamTest.TestY/0',\n    'SeqQ/ParamTest.TestY/1',\n    ]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "DISABLED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "DISABLED_TESTS = [\n    'BarTest.DISABLED_TestFour',\n    'BarTest.DISABLED_TestFive',\n    'BazTest.DISABLED_TestC',\n    'DISABLED_FoobarTest.Test1',\n    'DISABLED_FoobarTest.DISABLED_Test2',\n    'DISABLED_FoobarbazTest.TestA',\n    ]\nif SUPPORTS_DEATH_TESTS:\n  DEATH_TESTS = [",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "ACTIVE_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "ACTIVE_TESTS = [\n    'FooTest.Abc',\n    'FooTest.Xyz',\n    'BarTest.TestOne',\n    'BarTest.TestTwo',\n    'BarTest.TestThree',\n    'BazTest.TestOne',\n    'BazTest.TestA',\n    'BazTest.TestB',\n    ] + DEATH_TESTS + PARAM_TESTS",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "param_tests_present",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "param_tests_present = None\n# Utilities.\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "peekOfCode": "environ = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets the env variable to 'value'; unsets it when 'value' is None.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\ndef RunAndReturnOutput(args = None):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  return gtest_test_utils.Subprocess([COMMAND] + (args or []),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-filter-unittest",
        "documentation": {}
    },
    {
        "label": "GTestJsonOutFilesTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "class GTestJsonOutFilesTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\"\"\"\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file\n    # for xml output.\n    self.output_dir_ = os.path.join(gtest_test_utils.GetTempDir(),\n                                    GTEST_OUTPUT_SUBDIR, '')\n    self.DeleteFilesAndDir()\n  def tearDown(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_SUBDIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_SUBDIR = 'json_outfiles'\nGTEST_OUTPUT_1_TEST = 'gtest_xml_outfile1_test_'\nGTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_1_TEST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_1_TEST = 'gtest_xml_outfile1_test_'\nGTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_2_TEST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "GTEST_OUTPUT_2_TEST = 'gtest_xml_outfile2_test_'\nEXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_1",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "EXPECTED_1 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_2",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "peekOfCode": "EXPECTED_2 = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-outfiles-test",
        "documentation": {}
    },
    {
        "label": "GTestJsonOutputUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "class GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.\n      Runs a test program that generates a non-empty JSON output, and\n      tests that the JSON output is expected.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_FILTER_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_FILTER_FLAG = '--gtest_filter'\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.json'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':\n        24,\n    u'failures':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\nEXPECTED_NON_EMPTY = {\n    u'tests':\n        24,\n    u'failures':\n        4,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NON_EMPTY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_NON_EMPTY = {\n    u'tests':\n        24,\n    u'failures':\n        4,\n    u'disabled':\n        2,\n    u'errors':\n        0,\n    u'timestamp':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_FILTERED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_FILTERED = {\n    u'tests':\n        1,\n    u'failures':\n        0,\n    u'disabled':\n        0,\n    u'errors':\n        0,\n    u'time':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_EMPTY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "EXPECTED_EMPTY = {\n    u'tests': 0,\n    u'failures': 0,\n    u'disabled': 0,\n    u'errors': 0,\n    u'time': u'*',\n    u'timestamp': u'*',\n    u'name': u'AllTests',\n    u'testsuites': [],\n}",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)\nSUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestJsonOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's JSON output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyJsonOutput(self):\n      \"\"\"Verifies JSON output for a Google Test binary with non-empty output.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-json-output-unittest",
        "documentation": {}
    },
    {
        "label": "GTestListTestsUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "class GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Runs googletest-list-tests-unittest_ and verifies that it prints\n    the correct tests.\n    Args:\n      flag_value:         value of the --gtest_list_tests flag;\n                          None if the flag should not be present.\n      expected_output_re: regular expression that matches the expected\n                          output after running command;",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "def Run(args):\n  \"\"\"Runs googletest-list-tests-unittest_ and returns the list of tests printed.\"\"\"\n  return gtest_test_utils.Subprocess([EXE_PATH] + args,\n                                     capture_stderr=False).output\n# The unit test.\nclass GTestListTestsUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests using the --gtest_list_tests flag to list all tests.\"\"\"\n  def RunAndVerify(self, flag_value, expected_output_re, other_flag):\n    \"\"\"Runs googletest-list-tests-unittest_ and verifies that it prints\n    the correct tests.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "LIST_TESTS_FLAG = 'gtest_list_tests'\n# Path to the googletest-list-tests-unittest_ program.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath('googletest-list-tests-unittest_')\n# The expected output when running googletest-list-tests-unittest_ with\n# --gtest_list_tests\nEXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath('googletest-list-tests-unittest_')\n# The expected output when running googletest-list-tests-unittest_ with\n# --gtest_list_tests\nEXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_OUTPUT_NO_FILTER_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXPECTED_OUTPUT_NO_FILTER_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nAbc\\.\n  Xyz\n  Def\nFooBar\\.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_OUTPUT_FILTER_FOO_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "peekOfCode": "EXPECTED_OUTPUT_FILTER_FOO_RE = re.compile(r\"\"\"FooDeathTest\\.\n  Test1\nFoo\\.\n  Bar1\n  Bar2\n  DISABLED_Bar3\nFooBar\\.\n  Baz\nFooTest\\.\n  Test1",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-list-tests-unittest",
        "documentation": {}
    },
    {
        "label": "GTestOutputTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "class GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')\n      test_output = RemoveMatchingTests(test_output, 'TypedDeathTest')\n      test_output = RemoveMatchingTests(test_output, 'TypeParamDeathTest')\n    if not SUPPORTS_THREADS:\n      test_output = RemoveMatchingTests(test_output,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "ToUnixLineEnding",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveLocations",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of\n       'DIRECTORY/FILE_NAME:LINE_NUMBER: 'or\n       'DIRECTORY\\\\FILE_NAME(LINE_NUMBER): ') replaced by\n       'FILE_NAME:#: '.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveStackTraceDetails",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveStackTraceDetails(output):\n  \"\"\"Removes all stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n',\n                'Stack trace: (omitted)\\n\\n', output)\ndef RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n', '', output)\ndef RemoveTime(output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveStackTraces",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveStackTraces(output):\n  \"\"\"Removes all traces of stack traces from a Google Test program's output.\"\"\"\n  # *? means \"find the shortest string that matches\".\n  return re.sub(r'Stack trace:(.|\\n)*?\\n\\n', '', output)\ndef RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTime",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTime(output):\n  \"\"\"Removes all time information from a Google Test program's output.\"\"\"\n  return re.sub(r'\\(\\d+ ms', '(? ms', output)\ndef RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with type information normalized to canonical form.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTypeInfoDetails",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTypeInfoDetails(test_output):\n  \"\"\"Removes compiler-specific type info from Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with type information normalized to canonical form.\n  \"\"\"\n  # some compilers output the name of type 'unsigned int' as 'unsigned'\n  return re.sub(r'unsigned int', 'unsigned', test_output)\ndef NormalizeToCurrentPlatform(test_output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NormalizeToCurrentPlatform",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def NormalizeToCurrentPlatform(test_output):\n  \"\"\"Normalizes platform specific output details for easier comparison.\"\"\"\n  if IS_WINDOWS:\n    # Removes the color information that is not present on Windows.\n    test_output = re.sub('\\x1b\\\\[(0;3\\d)?m', '', test_output)\n    # Changes failure message headers into the Windows format.\n    test_output = re.sub(r': Failure\\n', r': error: ', test_output)\n    # Changes file(line_number) to file:line_number.\n    test_output = re.sub(r'((\\w|\\.)+)\\((\\d+)\\):', r'\\1:\\3:', test_output)\n  return test_output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveTestCounts",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveTestCounts(output):\n  \"\"\"Removes test counts from a Google Test program's output.\"\"\"\n  output = re.sub(r'\\d+ tests?, listed below',\n                  '? tests, listed below', output)\n  output = re.sub(r'\\d+ FAILED TESTS',\n                  '? FAILED TESTS', output)\n  output = re.sub(r'\\d+ tests? from \\d+ test cases?',\n                  '? tests from ? test cases', output)\n  output = re.sub(r'\\d+ tests? from ([a-zA-Z_])',\n                  r'? tests from \\1', output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "RemoveMatchingTests",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def RemoveMatchingTests(test_output, pattern):\n  \"\"\"Removes output of specified tests from a Google Test program's output.\n  This function strips not only the beginning and the end of a test but also\n  all output in between.\n  Args:\n    test_output:       A string containing the test output.\n    pattern:           A regex string that matches names of test cases or\n                       tests to remove.\n  Returns:\n    Contents of test_output with tests whose names match pattern removed.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NormalizeOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def NormalizeOutput(output):\n  \"\"\"Normalizes output (the output of googletest-output-test_.exe).\"\"\"\n  output = ToUnixLineEnding(output)\n  output = RemoveLocations(output)\n  output = RemoveStackTraceDetails(output)\n  output = RemoveTime(output)\n  return output\ndef GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n  Args:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetShellCommandOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def GetShellCommandOutput(env_cmd):\n  \"\"\"Runs a command in a sub-process, and returns its output in a string.\n  Args:\n    env_cmd: The shell command. A 2-tuple where element 0 is a dict of extra\n             environment variables to set, and element 1 is a string with\n             the command and any flags.\n  Returns:\n    A string with the command's combined standard and diagnostic output.\n  \"\"\"\n  # Spawns cmd in a sub-process, and gets its standard I/O file objects.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetCommandOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def GetCommandOutput(env_cmd):\n  \"\"\"Runs a command and returns its output with all file location\n  info stripped off.\n  Args:\n    env_cmd:  The shell command. A 2-tuple where element 0 is a dict of extra\n              environment variables to set, and element 1 is a string with\n              the command and any flags.\n  \"\"\"\n  # Disables exception pop-ups on Windows.\n  environ, cmdline = env_cmd",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GetOutputOfAllCommands",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "def GetOutputOfAllCommands():\n  \"\"\"Returns concatenated output from several representative commands.\"\"\"\n  return (GetCommandOutput(COMMAND_WITH_COLOR) +\n          GetCommandOutput(COMMAND_WITH_TIME) +\n          GetCommandOutput(COMMAND_WITH_DISABLED) +\n          GetCommandOutput(COMMAND_WITH_SHARDING))\ntest_list = GetShellCommandOutput(COMMAND_LIST_TESTS)\nSUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GENGOLDEN_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "GENGOLDEN_FLAG = '--gengolden'\nCATCH_EXCEPTIONS_ENV_VAR_NAME = 'GTEST_CATCH_EXCEPTIONS'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "CATCH_EXCEPTIONS_ENV_VAR_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "CATCH_EXCEPTIONS_ENV_VAR_NAME = 'GTEST_CATCH_EXCEPTIONS'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\nIS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nGOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "GOLDEN_NAME = 'googletest-output-test-golden-lin.txt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('googletest-output-test_')\n# At least one command we exercise must not have the\n# 'internal_skip_environment_and_ad_hoc_tests' argument.\nCOMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_LIST_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])\nCOMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_COLOR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])\nCOMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_TIME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_TIME = ({}, [PROGRAM_PATH,\n                          '--gtest_print_time',\n                          'internal_skip_environment_and_ad_hoc_tests',\n                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])\nCOMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])\nCOMMAND_WITH_SHARDING = (",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_DISABLED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_DISABLED = (\n    {}, [PROGRAM_PATH,\n         '--gtest_also_run_disabled_tests',\n         'internal_skip_environment_and_ad_hoc_tests',\n         '--gtest_filter=*DISABLED_*'])\nCOMMAND_WITH_SHARDING = (\n    {'GTEST_SHARD_INDEX': '1', 'GTEST_TOTAL_SHARDS': '2'},\n    [PROGRAM_PATH,\n     'internal_skip_environment_and_ad_hoc_tests',\n     '--gtest_filter=PassingTest.*'])",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "COMMAND_WITH_SHARDING",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "COMMAND_WITH_SHARDING = (\n    {'GTEST_SHARD_INDEX': '1', 'GTEST_TOTAL_SHARDS': '2'},\n    [PROGRAM_PATH,\n     'internal_skip_environment_and_ad_hoc_tests',\n     '--gtest_filter=PassingTest.*'])\nGOLDEN_PATH = os.path.join(gtest_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GOLDEN_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "GOLDEN_PATH = os.path.join(gtest_test_utils.GetSourceDir(), GOLDEN_NAME)\ndef ToUnixLineEnding(s):\n  \"\"\"Changes all Windows/Mac line endings in s to UNIX line endings.\"\"\"\n  return s.replace('\\r\\n', '\\n').replace('\\r', '\\n')\ndef RemoveLocations(test_output):\n  \"\"\"Removes all file location info from a Google Test program's output.\n  Args:\n       test_output:  the output of a Google Test program.\n  Returns:\n       output with all file location info (in the form of",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "test_list = GetShellCommandOutput(COMMAND_LIST_TESTS)\nSUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = 'DeathTest' in test_list\nSUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in test_list\nSUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_THREADS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_THREADS = 'ExpectFailureWithThreadsTest' in test_list\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nCAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "CAN_GENERATE_GOLDEN_FILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "peekOfCode": "CAN_GENERATE_GOLDEN_FILE = (SUPPORTS_DEATH_TESTS and\n                            SUPPORTS_TYPED_TESTS and\n                            SUPPORTS_THREADS and\n                            SUPPORTS_STACK_TRACES)\nclass GTestOutputTest(gtest_test_utils.TestCase):\n  def RemoveUnsupportedTests(self, test_output):\n    if not SUPPORTS_DEATH_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'DeathTest')\n    if not SUPPORTS_TYPED_TESTS:\n      test_output = RemoveMatchingTests(test_output, 'TypedTest')",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-output-test",
        "documentation": {}
    },
    {
        "label": "GTestParamTestInvalidName1Test",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "class GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output\n  Assert(err in p.output)\nclass GTestParamTestInvalidName1Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "binary_name = 'googletest-param-test-invalid-name1-test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Parameterized test name \\'\"InvalidWithQuotes\"\\' is invalid')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Verify the output message contains appropriate output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name1-test",
        "documentation": {}
    },
    {
        "label": "GTestParamTestInvalidName2Test",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "class GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output\n  Assert(err in p.output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output\n  Assert(err in p.output)\nclass GTestParamTestInvalidName2Test(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "binary_name = 'googletest-param-test-invalid-name2-test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  err = ('Duplicate parameterized test name \\'a\\'')\n  p = gtest_test_utils.Subprocess(command)\n  Assert(p.terminated_by_signal)\n  # Check for appropriate output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-param-test-invalid-name2-test",
        "documentation": {}
    },
    {
        "label": "GTestShuffleUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "class GTestShuffleUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Tests test shuffling.\"\"\"\n  def setUp(self):\n    CalculateTestLists()\n  def testShufflePreservesNumberOfTests(self):\n    self.assertEqual(len(ALL_TESTS), len(SHUFFLED_ALL_TESTS))\n    self.assertEqual(len(ACTIVE_TESTS), len(SHUFFLED_ACTIVE_TESTS))\n    self.assertEqual(len(FILTERED_TESTS), len(SHUFFLED_FILTERED_TESTS))\n    self.assertEqual(len(SHARDED_TESTS), len(SHUFFLED_SHARDED_TESTS))\n  def testShuffleChangesTestOrder(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "AlsoRunDisabledTestsFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "FilterFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RepeatFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ShuffleFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RandomSeedFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RandomSeedFlag(n):\n  return '--gtest_random_seed=%s' % (n,)\ndef RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "RunAndReturnOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def RunAndReturnOutput(extra_env, args):\n  \"\"\"Runs the test program and returns its output.\"\"\"\n  environ_copy = os.environ.copy()\n  environ_copy.update(extra_env)\n  return gtest_test_utils.Subprocess([COMMAND] + args, env=environ_copy).output\ndef GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:\n    extra_env: a map from environment variables to their values\n    args: command line flags to pass to googletest-shuffle-test_",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "GetTestsForAllIterations",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def GetTestsForAllIterations(extra_env, args):\n  \"\"\"Runs the test program and returns a list of test lists.\n  Args:\n    extra_env: a map from environment variables to their values\n    args: command line flags to pass to googletest-shuffle-test_\n  Returns:\n    A list where the i-th element is the list of tests run in the i-th\n    test iteration.\n  \"\"\"\n  test_iterations = []",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "GetTestCases",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def GetTestCases(tests):\n  \"\"\"Returns a list of test cases in the given full test names.\n  Args:\n    tests: a list of full test names\n  Returns:\n    A list of test cases from 'tests', in their original order.\n    Consecutive duplicates are removed.\n  \"\"\"\n  test_cases = []\n  for test in tests:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "CalculateTestLists",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "def CalculateTestLists():\n  \"\"\"Calculates the list of tests run under different flags.\"\"\"\n  if not ALL_TESTS:\n    ALL_TESTS.extend(\n        GetTestsForAllIterations({}, [AlsoRunDisabledTestsFlag()])[0])\n  if not ACTIVE_TESTS:\n    ACTIVE_TESTS.extend(GetTestsForAllIterations({}, [])[0])\n  if not FILTERED_TESTS:\n    FILTERED_TESTS.extend(\n        GetTestsForAllIterations({}, [FilterFlag(TEST_FILTER)])[0])",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-shuffle-test_')\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nTEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "TEST_FILTER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "TEST_FILTER = 'A*.A:A*.B:C*'\nALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ALL_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "ALL_TESTS = []\nACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ACTIVE_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "ACTIVE_TESTS = []\nFILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "FILTERED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "FILTERED_TESTS = []\nSHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHARDED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHARDED_TESTS = []\nSHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_ALL_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_ALL_TESTS = []\nSHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_ACTIVE_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_ACTIVE_TESTS = []\nSHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_FILTERED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_FILTERED_TESTS = []\nSHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "SHUFFLED_SHARDED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "peekOfCode": "SHUFFLED_SHARDED_TESTS = []\ndef AlsoRunDisabledTestsFlag():\n  return '--gtest_also_run_disabled_tests'\ndef FilterFlag(test_filter):\n  return '--gtest_filter=%s' % (test_filter,)\ndef RepeatFlag(n):\n  return '--gtest_repeat=%s' % (n,)\ndef ShuffleFlag():\n  return '--gtest_shuffle'\ndef RandomSeedFlag(n):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-shuffle-test",
        "documentation": {}
    },
    {
        "label": "ThrowOnFailureTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "class ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies that it does\n    (or does not) exit with a non-zero code.\n    Args:\n      env_var_value:    value of the GTEST_BREAK_ON_FAILURE environment\n                        variable; None if the variable should be unset.\n      flag_value:       value of the --gtest_break_on_failure flag;\n                        None if the flag should not be present.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value\n  elif env_var in os.environ:\n    del os.environ[env_var]\ndef Run(command):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "def Run(command):\n  \"\"\"Runs a command; returns True/False if its exit code is/isn't 0.\"\"\"\n  print('Running \"%s\". . .' % ' '.join(command))\n  p = gtest_test_utils.Subprocess(command)\n  return p.exited and p.exit_code == 0\n# The tests.\nclass ThrowOnFailureTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the throw-on-failure mode.\"\"\"\n  def RunAndVerify(self, env_var_value, flag_value, should_fail):\n    \"\"\"Runs googletest-throw-on-failure-test_ and verifies that it does",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "THROW_ON_FAILURE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "THROW_ON_FAILURE = 'gtest_throw_on_failure'\n# Path to the googletest-throw-on-failure-test_ program, compiled with\n# exceptions disabled.\nEXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-throw-on-failure-test_')\n# Utilities.\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'googletest-throw-on-failure-test_')\n# Utilities.\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets an environment variable to a given value; unsets it when the\n  given value is None.\n  \"\"\"\n  env_var = env_var.upper()\n  if value is not None:\n    os.environ[env_var] = value",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-throw-on-failure-test",
        "documentation": {}
    },
    {
        "label": "GTestUninitializedTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "class GTestUninitializedTest(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "AssertEq",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "TestExitCodeAndOutput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "def TestExitCodeAndOutput(command):\n  \"\"\"Runs the given command and verifies its exit code and output.\"\"\"\n  # Verifies that 'command' exits with code 1.\n  p = gtest_test_utils.Subprocess(command)\n  if p.exited and p.exit_code == 0:\n    Assert('IMPORTANT NOTICE' in p.output);\n  Assert('InitGoogleTest' in p.output)\nclass GTestUninitializedTest(gtest_test_utils.TestCase):\n  def testExitCodeAndOutput(self):\n    TestExitCodeAndOutput(COMMAND)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath('googletest-uninitialized-test_')\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\ndef AssertEq(expected, actual):\n  if expected != actual:\n    print('Expected: %s' % (expected,))\n    print('  Actual: %s' % (actual,))\n    raise AssertionError\ndef TestExitCodeAndOutput(command):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.googletest-uninitialized-test",
        "documentation": {}
    },
    {
        "label": "GTestHelpTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "class GTestHelpTest(gtest_test_utils.TestCase):\n  \"\"\"Tests the --help flag and its equivalent forms.\"\"\"\n  def TestHelpFlag(self, flag):\n    \"\"\"Verifies correct behavior when help flag is specified.\n    The right message must be printed and the tests must\n    skipped when the given flag is specified.\n    Args:\n      flag:  A flag to pass to the binary or None.\n    \"\"\"\n    exit_code, output = RunWithFlag(flag)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "RunWithFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "def RunWithFlag(flag):\n  \"\"\"Runs gtest_help_test_ with the given flag.\n  Returns:\n    the exit code and the text output as a tuple.\n  Args:\n    flag: the command-line flag to pass to gtest_help_test_, or None.\n  \"\"\"\n  if flag is None:\n    command = [PROGRAM_PATH]\n  else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "IS_LINUX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "IS_LINUX = os.name == 'posix' and os.uname()[0] == 'Linux'\nIS_WINDOWS = os.name == 'nt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nPROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath('gtest_help_test_')\nFLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "FLAG_PREFIX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "FLAG_PREFIX = '--gtest_'\nDEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "DEATH_TEST_STYLE_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "DEATH_TEST_STYLE_FLAG = FLAG_PREFIX + 'death_test_style'\nSTREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "STREAM_RESULT_TO_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "STREAM_RESULT_TO_FLAG = FLAG_PREFIX + 'stream_result_to'\nUNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "UNKNOWN_FLAG = FLAG_PREFIX + 'unknown_flag_for_testing'\nLIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "LIST_TESTS_FLAG = FLAG_PREFIX + 'list_tests'\nINCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "INCORRECT_FLAG_VARIANTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "INCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),\n                           re.sub('^--', '/', LIST_TESTS_FLAG),\n                           re.sub('_', '-', LIST_TESTS_FLAG)]\nINTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "INTERNAL_FLAG_FOR_TESTING",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "INTERNAL_FLAG_FOR_TESTING = FLAG_PREFIX + 'internal_flag_for_testing'\nSUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_DEATH_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "SUPPORTS_DEATH_TESTS = \"DeathTest\" in gtest_test_utils.Subprocess(\n    [PROGRAM_PATH, LIST_TESTS_FLAG]).output\n# The help message must match this regex.\nHELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +\n    FLAG_PREFIX + r'random_seed=.*' +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "HELP_REGEX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "peekOfCode": "HELP_REGEX = re.compile(\n    FLAG_PREFIX + r'list_tests.*' +\n    FLAG_PREFIX + r'filter=.*' +\n    FLAG_PREFIX + r'also_run_disabled_tests.*' +\n    FLAG_PREFIX + r'repeat=.*' +\n    FLAG_PREFIX + r'shuffle.*' +\n    FLAG_PREFIX + r'random_seed=.*' +\n    FLAG_PREFIX + r'color=.*' +\n    FLAG_PREFIX + r'print_time.*' +\n    FLAG_PREFIX + r'output=.*' +",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_help_test",
        "documentation": {}
    },
    {
        "label": "normalize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_json_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_json_test_utils",
        "peekOfCode": "def normalize(obj):\n  \"\"\"Normalize output object.\n  Args:\n     obj: Google Test's JSON output object to normalize.\n  Returns:\n     Normalized output without any references to transient information that may\n     change from run to run.\n  \"\"\"\n  def _normalize(key, value):\n    if key == 'time':",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_json_test_utils",
        "documentation": {}
    },
    {
        "label": "GTestListTestsOutputUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "class GTestListTestsOutputUnitTest(gtest_test_utils.TestCase):\n  \"\"\"Unit test for Google Test's list tests with output to file functionality.\n  \"\"\"\n  def testXml(self):\n    \"\"\"Verifies XML output for listing tests in a Google Test binary.\n    Runs a test program that generates an empty XML output, and\n    tests that the XML output is expected.\n    \"\"\"\n    self._TestOutput('xml', EXPECTED_XML)\n  def testJSON(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"2\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n</testsuites>\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nEXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"2\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n</testsuites>\n\"\"\"\nEXPECTED_JSON = \"\"\"{",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "EXPECTED_XML = \"\"\"<\\?xml version=\"1.0\" encoding=\"UTF-8\"\\?>\n<testsuites tests=\"2\" name=\"AllTests\">\n  <testsuite name=\"FooTest\" tests=\"2\">\n    <testcase name=\"Test1\" file=\".*gtest_list_output_unittest_.cc\" line=\"43\" />\n    <testcase name=\"Test2\" file=\".*gtest_list_output_unittest_.cc\" line=\"45\" />\n  </testsuite>\n</testsuites>\n\"\"\"\nEXPECTED_JSON = \"\"\"{\n  \"tests\": 2,",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_JSON",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "peekOfCode": "EXPECTED_JSON = \"\"\"{\n  \"tests\": 2,\n  \"name\": \"AllTests\",\n  \"testsuites\": \\[\n    {\n      \"name\": \"FooTest\",\n      \"tests\": 2,\n      \"testsuite\": \\[\n        {\n          \"name\": \"Test1\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_list_output_unittest",
        "documentation": {}
    },
    {
        "label": "SkipEntireEnvironmentTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "class SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "EXE_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "EXE_PATH = gtest_test_utils.GetTestExecutablePath(\n    'gtest_skip_in_environment_setup_test')\nOUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "OUTPUT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "peekOfCode": "OUTPUT = gtest_test_utils.Subprocess([EXE_PATH]).output\n# Test.\nclass SkipEntireEnvironmentTest(gtest_test_utils.TestCase):\n  def testSkipEntireEnvironmentTest(self):\n    self.assertIn('Skipping the entire environment', OUTPUT)\n    self.assertNotIn('FAILED', OUTPUT)\nif __name__ == '__main__':\n  gtest_test_utils.Main()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_skip_environment_check_output_test",
        "documentation": {}
    },
    {
        "label": "GTestTestFilterTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "peekOfCode": "class GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)\n    self.assertEquals(0, p.exit_code)\n    Assert('filter = *.TestThatSucceeds' in p.output)\n    Assert('[       OK ] TestFilterTest.TestThatSucceeds' in p.output)\n    Assert('[  PASSED  ] 1 test.' in p.output)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "Assert",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "peekOfCode": "def Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)\n    self.assertEquals(0, p.exit_code)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "binary_name",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "peekOfCode": "binary_name = 'gtest_testbridge_test_'\nCOMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\nTESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "COMMAND",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "peekOfCode": "COMMAND = gtest_test_utils.GetTestExecutablePath(binary_name)\nTESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "TESTBRIDGE_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "peekOfCode": "TESTBRIDGE_NAME = 'TESTBRIDGE_TEST_ONLY'\ndef Assert(condition):\n  if not condition:\n    raise AssertionError\nclass GTestTestFilterTest(gtest_test_utils.TestCase):\n  def testTestExecutionIsFiltered(self):\n    \"\"\"Tests that the test filter is picked up from the testbridge env var.\"\"\"\n    subprocess_env = os.environ.copy()\n    subprocess_env[TESTBRIDGE_NAME] = '*.TestThatSucceeds'\n    p = gtest_test_utils.Subprocess(COMMAND, env=subprocess_env)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_testbridge_test",
        "documentation": {}
    },
    {
        "label": "Subprocess",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "class Subprocess:\n  def __init__(self, command, working_dir=None, capture_stderr=True, env=None):\n    \"\"\"Changes into a specified directory, if provided, and executes a command.\n    Restores the old directory afterwards.\n    Args:\n      command:        The command to run, in the form of sys.argv.\n      working_dir:    The directory to change into.\n      capture_stderr: Determines whether to capture stderr in the output member\n                      or to discard it.\n      env:            Dictionary with environment to pass to the subprocess.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "SetEnvVar",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint\n# complaint.\nTestCase = _test_module.TestCase  # pylint: disable=C6409",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetFlag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetFlag(flag):\n  \"\"\"Returns the value of the given flag.\"\"\"\n  # In case GetFlag() is called before Main(), we always call\n  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags\n  # are parsed.\n  _ParseAndStripGTestFlags(sys.argv)\n  return _flag_map[flag]\ndef GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return os.path.abspath(GetFlag('source_dir'))",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetSourceDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetSourceDir():\n  \"\"\"Returns the absolute path of the directory where the .py files are.\"\"\"\n  return os.path.abspath(GetFlag('source_dir'))\ndef GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n  return os.path.abspath(GetFlag('build_dir'))\n_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetBuildDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetBuildDir():\n  \"\"\"Returns the absolute path of the directory where the test binaries are.\"\"\"\n  return os.path.abspath(GetFlag('build_dir'))\n_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\natexit.register(_RemoveTempDir)\ndef GetTempDir():\n  global _temp_dir",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTempDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir\ndef GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetTestExecutablePath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetTestExecutablePath(executable_name, build_dir=None):\n  \"\"\"Returns the absolute path of the test binary given its name.\n  The function will print a message and abort the program if the resulting file\n  doesn't exist.\n  Args:\n    executable_name: name of the test binary that the test script runs.\n    build_dir:       directory where to look for executables, by default\n                     the result of GetBuildDir().\n  Returns:\n    The absolute path of the test binary.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GetExitStatus",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def GetExitStatus(exit_code):\n  \"\"\"Returns the argument to exit(), or -1 if exit() wasn't called.\n  Args:\n    exit_code: the result value of os.system(command).\n  \"\"\"\n  if os.name == 'nt':\n    # On Windows, os.WEXITSTATUS() doesn't work and os.system() returns\n    # the argument to exit() directly.\n    return exit_code\n  else:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "def Main():\n  \"\"\"Runs the unit test.\"\"\"\n  # We must call _ParseAndStripGTestFlags() before calling\n  # unittest.main().  Otherwise the latter will be confused by the\n  # --gtest_* flags.\n  _ParseAndStripGTestFlags(sys.argv)\n  # The tested binaries should not be writing XML output files unless the\n  # script explicitly instructs them to.\n  if GTEST_OUTPUT_VAR_NAME in os.environ:\n    del os.environ[GTEST_OUTPUT_VAR_NAME]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_WINDOWS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_WINDOWS = os.name == 'nt'\nIS_CYGWIN = os.name == 'posix' and 'CYGWIN' in os.uname()[0]\nIS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_CYGWIN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_CYGWIN = os.name == 'posix' and 'CYGWIN' in os.uname()[0]\nIS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True\nexcept:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "IS_OS2",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "IS_OS2 = os.name == 'os2'\nimport atexit\nimport shutil\nimport tempfile\nimport unittest as _test_module\ntry:\n  import subprocess\n  _SUBPROCESS_MODULE_AVAILABLE = True\nexcept:\n  import popen2",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_VAR_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "GTEST_OUTPUT_VAR_NAME = 'GTEST_OUTPUT'\n# The environment variable for specifying the path to the premature-exit file.\nPREMATURE_EXIT_FILE_ENV_VAR = 'TEST_PREMATURE_EXIT_FILE'\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "PREMATURE_EXIT_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "PREMATURE_EXIT_FILE_ENV_VAR = 'TEST_PREMATURE_EXIT_FILE'\nenviron = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "environ",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "environ = os.environ.copy()\ndef SetEnvVar(env_var, value):\n  \"\"\"Sets/unsets an environment variable to a given value.\"\"\"\n  if value is not None:\n    environ[env_var] = value\n  elif env_var in environ:\n    del environ[env_var]\n# Here we expose a class from a particular module, depending on the\n# environment. The comment suppresses the 'Invalid variable name' lint\n# complaint.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "TestCase = _test_module.TestCase  # pylint: disable=C6409\n# Initially maps a flag to its default value. After\n# _ParseAndStripGTestFlags() is called, maps a flag to its actual value.\n_flag_map = {'source_dir': os.path.dirname(sys.argv[0]),\n             'build_dir': os.path.dirname(sys.argv[0])}\n_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_flag_map",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "_flag_map = {'source_dir': os.path.dirname(sys.argv[0]),\n             'build_dir': os.path.dirname(sys.argv[0])}\n_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.\n  global _gtest_flags_are_parsed  # pylint: disable=W0603\n  if _gtest_flags_are_parsed:\n    return",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_gtest_flags_are_parsed",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "_gtest_flags_are_parsed = False\ndef _ParseAndStripGTestFlags(argv):\n  \"\"\"Parses and strips Google Test flags from argv.  This is idempotent.\"\"\"\n  # Suppresses the lint complaint about a global variable since we need it\n  # here to maintain module-wide state.\n  global _gtest_flags_are_parsed  # pylint: disable=W0603\n  if _gtest_flags_are_parsed:\n    return\n  _gtest_flags_are_parsed = True\n  for flag in _flag_map:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "_temp_dir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "peekOfCode": "_temp_dir = None\ndef _RemoveTempDir():\n  if _temp_dir:\n    shutil.rmtree(_temp_dir, ignore_errors=True)\natexit.register(_RemoveTempDir)\ndef GetTempDir():\n  global _temp_dir\n  if not _temp_dir:\n    _temp_dir = tempfile.mkdtemp()\n  return _temp_dir",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_test_utils",
        "documentation": {}
    },
    {
        "label": "GTestXMLOutFilesTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "class GTestXMLOutFilesTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"Unit test for Google Test's XML output functionality.\"\"\"\n  def setUp(self):\n    # We want the trailing '/' that the last \"\" provides in os.path.join, for\n    # telling Google Test to create an output directory instead of a single file\n    # for xml output.\n    self.output_dir_ = os.path.join(gtest_test_utils.GetTempDir(),\n                                    GTEST_OUTPUT_SUBDIR, \"\")\n    self.DeleteFilesAndDir()\n  def tearDown(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_SUBDIR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_SUBDIR = \"xml_outfiles\"\nGTEST_OUTPUT_1_TEST = \"gtest_xml_outfile1_test_\"\nGTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_1_TEST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_1_TEST = \"gtest_xml_outfile1_test_\"\nGTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_2_TEST",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "GTEST_OUTPUT_2_TEST = \"gtest_xml_outfile2_test_\"\nEXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>\n      </properties>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML_1",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "EXPECTED_XML_1 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyOne\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyOne\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"1\"/>\n        <property name=\"TestSomeProperty\" value=\"1\"/>\n        <property name=\"TearDownProp\" value=\"1\"/>\n      </properties>\n    </testcase>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "EXPECTED_XML_2",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "peekOfCode": "EXPECTED_XML_2 = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\">\n  <testsuite name=\"PropertyTwo\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"TestSomeProperties\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyTwo\">\n      <properties>\n        <property name=\"SetUpProp\" value=\"2\"/>\n        <property name=\"TestSomeProperty\" value=\"2\"/>\n        <property name=\"TearDownProp\" value=\"2\"/>\n      </properties>\n    </testcase>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_outfiles_test",
        "documentation": {}
    },
    {
        "label": "GTestXMLOutputUnitTest",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "class GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyXmlOutput(self):\n      \"\"\"\n      Runs a test program that generates a non-empty XML output, and",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_FILTER_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_FILTER_FLAG = '--gtest_filter'\nGTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_LIST_TESTS_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'\nGTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_OUTPUT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_OUTPUT_FLAG = '--gtest_output'\nGTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nGTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_NAME",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_PROGRAM_NAME = 'gtest_xml_output_unittest_'\n# The flag indicating stacktraces are not supported\nNO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "NO_STACKTRACE_SUPPORT_FLAG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "NO_STACKTRACE_SUPPORT_FLAG = '--no_stacktrace_support'\n# The environment variables for test sharding.\nTOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "TOTAL_SHARDS_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "TOTAL_SHARDS_ENV_VAR = 'GTEST_TOTAL_SHARDS'\nSHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_INDEX_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SHARD_INDEX_ENV_VAR = 'GTEST_SHARD_INDEX'\nSHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SHARD_STATUS_FILE_ENV_VAR",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SHARD_STATUS_FILE_ENV_VAR = 'GTEST_SHARD_STATUS_FILE'\nSUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"24\" failures=\"4\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_STACK_TRACES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SUPPORTS_STACK_TRACES = NO_STACKTRACE_SUPPORT_FLAG not in sys.argv\nif SUPPORTS_STACK_TRACES:\n  STACK_TRACE_TEMPLATE = '\\nStack trace:\\n*'\nelse:\n  STACK_TRACE_TEMPLATE = ''\n  # unittest.main() can't handle unknown flags\n  sys.argv.remove(NO_STACKTRACE_SUPPORT_FLAG)\nEXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"24\" failures=\"4\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_NON_EMPTY_XML",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_NON_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"24\" failures=\"4\" disabled=\"2\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"FailedTest\" tests=\"1\" failures=\"1\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"Fails\" status=\"run\" result=\"completed\" time=\"*\" classname=\"FailedTest\">\n      <failure message=\"gtest_xml_output_unittest_.cc:*&#x0A;Expected equality of these values:&#x0A;  1&#x0A;  2\" type=\"\"><![CDATA[gtest_xml_output_unittest_.cc:*\nExpected equality of these values:\n  1",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_FILTERED_TEST_XML",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_FILTERED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\"\n             errors=\"0\" time=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n</testsuites>\"\"\"\nEXPECTED_SHARDED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_SHARDED_TEST_XML",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_SHARDED_TEST_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" timestamp=\"*\" name=\"AllTests\" ad_hoc_property=\"42\">\n  <testsuite name=\"SuccessfulTest\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\">\n    <testcase name=\"Succeeds\" status=\"run\" result=\"completed\" time=\"*\" classname=\"SuccessfulTest\"/>\n  </testsuite>\n  <testsuite name=\"PropertyRecordingTest\" tests=\"1\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\" SetUpTestSuite=\"yes\" TearDownTestSuite=\"aye\">\n    <testcase name=\"TwoValuesForOneKeyUsesLastValue\" status=\"run\" result=\"completed\" time=\"*\" classname=\"PropertyRecordingTest\">\n      <properties>\n        <property name=\"key_1\" value=\"2\"/>\n      </properties>",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "EXPECTED_EMPTY_XML",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "EXPECTED_EMPTY_XML = \"\"\"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"0\" failures=\"0\" disabled=\"0\" errors=\"0\" time=\"*\"\n            timestamp=\"*\" name=\"AllTests\">\n</testsuites>\"\"\"\nGTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)\nSUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTEST_PROGRAM_PATH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "GTEST_PROGRAM_PATH = gtest_test_utils.GetTestExecutablePath(GTEST_PROGRAM_NAME)\nSUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "SUPPORTS_TYPED_TESTS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "peekOfCode": "SUPPORTS_TYPED_TESTS = 'TypedTest' in gtest_test_utils.Subprocess(\n    [GTEST_PROGRAM_PATH, GTEST_LIST_TESTS_FLAG], capture_stderr=False).output\nclass GTestXMLOutputUnitTest(gtest_xml_test_utils.GTestXMLTestCase):\n  \"\"\"\n  Unit test for Google Test's XML output functionality.\n  \"\"\"\n  # This test currently breaks on platforms that do not support typed and\n  # type-parameterized tests, so we don't run it under them.\n  if SUPPORTS_TYPED_TESTS:\n    def testNonEmptyXmlOutput(self):",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_output_unittest",
        "documentation": {}
    },
    {
        "label": "GTestXMLTestCase",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "peekOfCode": "class GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"\n  Base class for tests of Google Test's XML output functionality.\n  \"\"\"\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM\n    elements and actual_node meets all of the following conditions:",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "GTEST_DEFAULT_OUTPUT_FILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "peekOfCode": "GTEST_DEFAULT_OUTPUT_FILE = 'test_detail.xml'\nclass GTestXMLTestCase(gtest_test_utils.TestCase):\n  \"\"\"\n  Base class for tests of Google Test's XML output functionality.\n  \"\"\"\n  def AssertEquivalentNodes(self, expected_node, actual_node):\n    \"\"\"\n    Asserts that actual_node (a DOM node object) is equivalent to\n    expected_node (another DOM node object), in that either both of\n    them are CDATA nodes and have the same value, or both are DOM",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.test.gtest_xml_test_utils",
        "documentation": {}
    },
    {
        "label": "config_file",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "config_file = open(\"%s/configure.ac\" % input_dir, 'r')\nbuffer_size = 1024\nopening_string = config_file.read(buffer_size)\nconfig_file.close()\n# Extract the version string from the AC_INIT macro\n#   The following init_expression means:\n#     Extract three integers separated by periods and surrounded by square\n#     brackets(e.g. \"[1.0.1]\") between \"AC_INIT(\" and \")\". Do not be greedy\n#     (*? is the non-greedy flag) since that would pull in everything between\n#     the first \"(\" and the last \")\" in the file.",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "buffer_size",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "buffer_size = 1024\nopening_string = config_file.read(buffer_size)\nconfig_file.close()\n# Extract the version string from the AC_INIT macro\n#   The following init_expression means:\n#     Extract three integers separated by periods and surrounded by square\n#     brackets(e.g. \"[1.0.1]\") between \"AC_INIT(\" and \")\". Do not be greedy\n#     (*? is the non-greedy flag) since that would pull in everything between\n#     the first \"(\" and the last \")\" in the file.\nversion_expression = re.compile(r\"AC_INIT\\(.*?\\[(\\d+)\\.(\\d+)\\.(\\d+)\\].*?\\)\",",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "opening_string",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "opening_string = config_file.read(buffer_size)\nconfig_file.close()\n# Extract the version string from the AC_INIT macro\n#   The following init_expression means:\n#     Extract three integers separated by periods and surrounded by square\n#     brackets(e.g. \"[1.0.1]\") between \"AC_INIT(\" and \")\". Do not be greedy\n#     (*? is the non-greedy flag) since that would pull in everything between\n#     the first \"(\" and the last \")\" in the file.\nversion_expression = re.compile(r\"AC_INIT\\(.*?\\[(\\d+)\\.(\\d+)\\.(\\d+)\\].*?\\)\",\n                                re.DOTALL)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "version_expression",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "version_expression = re.compile(r\"AC_INIT\\(.*?\\[(\\d+)\\.(\\d+)\\.(\\d+)\\].*?\\)\",\n                                re.DOTALL)\nversion_values = version_expression.search(opening_string)\nmajor_version = version_values.group(1)\nminor_version = version_values.group(2)\nfix_version = version_values.group(3)\n# Write the version information to a header file to be included in the\n# Info.plist file.\nfile_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "version_values",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "version_values = version_expression.search(opening_string)\nmajor_version = version_values.group(1)\nminor_version = version_values.group(2)\nfix_version = version_values.group(3)\n# Write the version information to a header file to be included in the\n# Info.plist file.\nfile_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)\n//\n// This file is autogenerated by the versiongenerate.py script. This script",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "major_version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "major_version = version_values.group(1)\nminor_version = version_values.group(2)\nfix_version = version_values.group(3)\n# Write the version information to a header file to be included in the\n# Info.plist file.\nfile_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)\n//\n// This file is autogenerated by the versiongenerate.py script. This script\n// is executed in a \"Run Script\" build phase when creating gtest.framework. This",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "minor_version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "minor_version = version_values.group(2)\nfix_version = version_values.group(3)\n# Write the version information to a header file to be included in the\n# Info.plist file.\nfile_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)\n//\n// This file is autogenerated by the versiongenerate.py script. This script\n// is executed in a \"Run Script\" build phase when creating gtest.framework. This\n// header file is not used during compilation of C-source. Rather, it simply",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "fix_version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "fix_version = version_values.group(3)\n# Write the version information to a header file to be included in the\n# Info.plist file.\nfile_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)\n//\n// This file is autogenerated by the versiongenerate.py script. This script\n// is executed in a \"Run Script\" build phase when creating gtest.framework. This\n// header file is not used during compilation of C-source. Rather, it simply\n// defines some version strings for substitution in the Info.plist. Because of",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "file_data",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "file_data = \"\"\"//\n// DO NOT MODIFY THIS FILE (but you can delete it)\n//\n// This file is autogenerated by the versiongenerate.py script. This script\n// is executed in a \"Run Script\" build phase when creating gtest.framework. This\n// header file is not used during compilation of C-source. Rather, it simply\n// defines some version strings for substitution in the Info.plist. Because of\n// this, we are not restricted to C-syntax nor are we using include guards.\n//\n#define GTEST_VERSIONINFO_SHORT %s.%s",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "version_file",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "description": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "peekOfCode": "version_file = open(\"%s/Version.h\" % output_dir, 'w')\nversion_file.write(file_data)\nversion_file.close()",
        "detail": "github.com.voltdb.voltdb.third_party.cpp.googletest.googletest.xcode.Scripts.versiongenerate",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.collections",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.collections",
        "peekOfCode": "class OrderedDict(dict):\n    \"\"\"\n    A Dictionary whose items are returned in the order they were first added\n    \"\"\"\n    def __init__(self):\n        self._sequence = []\n        self._current = 0\n        super(OrderedDict, self).__init__()\n    def __setitem__(self, item, value):\n        self._sequence.append(item)",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.collections",
        "documentation": {}
    },
    {
        "label": "ColumnSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "peekOfCode": "class ColumnSchema(object):\n    \"\"\"\n    Object representation of a single column.\n    Supports equality and inequality comparison of ColumnSchema.\n    ``name`` is the column name.\n    ``parent`` is an instance of TableSchema\n    .. note::\n      ColumnSchema objects are automatically created for you by ColumnSchemaBuilder\n      and loaded under ``schema.databases[name].tables[name].columns``\n    .. note::",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "documentation": {}
    },
    {
        "label": "ColumnSchemaBuilder",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "peekOfCode": "def ColumnSchemaBuilder(table):\n    \"\"\"\n    Returns a dictionary loaded with all of the columns availale in the table.\n    ``table`` must be an instance of TableSchema.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables[name].columns``\n      when you create an instance of SchemaObject\n    \"\"\"\n    conn = table.parent.parent.connection",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.column",
        "documentation": {}
    },
    {
        "label": "DatabaseConnection",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "peekOfCode": "class DatabaseConnection(object):\n    \"\"\"A lightweight wrapper around MySQLdb DB-API\"\"\"\n    def __init__(self):\n        self._db = None\n        self.db = None\n        self.host = None\n        self.port = None\n        self.user = None\n    @property\n    def version(self):",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "parse_database_url",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "peekOfCode": "def parse_database_url(url):\n    matches = REGEX_RFC1738.match(url)\n    result = {}\n    if matches:\n        if matches.group('protocol'):\n            result['protocol'] = matches.group('protocol')\n        if matches.group('username'):\n            result['user'] = matches.group('username')\n        if matches.group('password'):\n            result['passwd'] = matches.group('password')",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "REGEX_RFC1738",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "peekOfCode": "REGEX_RFC1738 = re.compile(r'''\n            (?P<protocol>\\w+)://\n            (?:\n                (?P<username>[^:/]*)\n                (?::(?P<password>[^/]*))?\n            @)?\n            (?:\n                (?P<host>[^/:]*)\n                (?::(?P<port>[^/]*))?\n            )?",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "DatabaseError",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "peekOfCode": "DatabaseError = MySQLdb.Error",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.connection",
        "documentation": {}
    },
    {
        "label": "DatabaseSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "peekOfCode": "class DatabaseSchema(object):\n    \"\"\"\n    Object representation of a single database schema\n    (as per `CREATE DATABASE Syntax <http://dev.mysql.com/doc/refman/5.0/en/create-database.html>`_).\n    Supports equality and inequality comparison of DatabaseSchemas.\n    ``name`` is the database name.\n    ``parent`` is an instance of SchemaObject\n        >>> for db in schema.databases:\n        ...     print schema.databases[db].name\n        ...",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "documentation": {}
    },
    {
        "label": "DatabaseSchemaBuilder",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "peekOfCode": "def DatabaseSchemaBuilder(instance):\n    \"\"\"\n    Returns a dictionary loaded with all of the databases availale on\n    the MySQL instance. ``instance`` must be an instance SchemaObject.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases`` when you create an instance of SchemaObject\n    \"\"\"\n    conn = instance.connection\n    d = OrderedDict()",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.database",
        "documentation": {}
    },
    {
        "label": "ForeignKeySchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "peekOfCode": "class ForeignKeySchema(object):\n    \"\"\"\n    Object representation of a single foreign key.\n    Supports equality and inequality comparison of ForeignKeySchema.\n    ``name`` is the column name.\n    ``parent`` is an instance of TableSchema\n    .. note::\n      ForeignKeySchema objects are automatically created for you by ForeignKeySchemaBuilder\n      and loaded under ``schema.databases[name].tables[name].foreign_keys``\n    Example",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "documentation": {}
    },
    {
        "label": "ForeignKeySchemaBuilder",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "peekOfCode": "def ForeignKeySchemaBuilder(table):\n    \"\"\"\n    Returns a dictionary loaded with all of the foreign keys available in the table.\n    ``table`` must be an instance of TableSchema.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables[name].foreign_keys`` when you create an instance of SchemaObject\n    \"\"\"\n    conn = table.parent.parent.connection\n    fkeys = OrderedDict()",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "documentation": {}
    },
    {
        "label": "REGEX_FK_REFERENCE_OPTIONS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "peekOfCode": "REGEX_FK_REFERENCE_OPTIONS = r\"\"\"\n    `%s`(?:.(?!ON\\ DELETE)(?!ON\\ UPDATE))*\n    (?:\\sON\\sDELETE\\s(?P<on_delete>(?:RESTRICT|CASCADE|SET\\ NULL|NO\\ ACTION)))?\n    (?:\\sON\\sUPDATE\\s(?P<on_update>(?:RESTRICT|CASCADE|SET\\ NULL|NO\\ ACTION)))?\n    \"\"\"\ndef ForeignKeySchemaBuilder(table):\n    \"\"\"\n    Returns a dictionary loaded with all of the foreign keys available in the table.\n    ``table`` must be an instance of TableSchema.\n    .. note::",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.foreignkey",
        "documentation": {}
    },
    {
        "label": "IndexSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "peekOfCode": "class IndexSchema(object):\n    \"\"\"\n    Object representation of a single index.\n    Supports equality and inequality comparison of IndexSchema.\n    ``name`` is the column name.\n    ``parent`` is an instance of TableSchema\n    .. note::\n      IndexSchema objects are automatically created for you by IndexSchemaBuilder\n      and loaded under ``schema.databases[name].tables[name].indexes``\n    Example",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "documentation": {}
    },
    {
        "label": "IndexSchemaBuilder",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "peekOfCode": "def IndexSchemaBuilder(table):\n    \"\"\"\n    Returns a dictionary loaded with all of the indexes available in the table.\n    ``table`` must be an instance of TableSchema.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables[name].indexes`` when you create an instance of SchemaObject\n    \"\"\"\n    conn = table.parent.parent.connection\n    idx = OrderedDict()",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.index",
        "documentation": {}
    },
    {
        "label": "SchemaOption",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.option",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.option",
        "peekOfCode": "class SchemaOption(object):\n    \"\"\"\n    Object representation of a database or table option\n      >>> schema.databases['sakila'].tables['rental'].options['engine'].name\n      'ENGINE'\n      >>> schema.databases['sakila'].tables['rental'].options['engine'].value\n      'InnoDB'\n      >>> schema.databases['sakila'].tables['rental'].options['engine'].create()\n      'ENGINE=InnoDB'\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.option",
        "documentation": {}
    },
    {
        "label": "SchemaObject",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.schema",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.schema",
        "peekOfCode": "class SchemaObject(object):\n    \"\"\"\n    Object representation of a single MySQL instance.\n    If database name is not specified in ``connection_url``,\n    all databases on the MySQL instance will be loaded.\n    ``connection_url`` - the database url as per `RFC1738 <http://www.ietf.org/rfc/rfc1738.txt>`_\n      >>> schema  = schemaobject.SchemaObject('mysql://username:password@localhost:3306/sakila')\n      >>> schema.host\n      'localhost'\n      >>> schema.port",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.schema",
        "documentation": {}
    },
    {
        "label": "TableSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "peekOfCode": "class TableSchema(object):\n    \"\"\"\n    Object representation of a single table\n    (as per `CREATE TABLE Syntax <http://dev.mysql.com/doc/refman/5.0/en/create-table.html>`_).\n    Supports equality and inequality comparison of TableSchema.\n    ``name`` is the column name.\n    ``parent`` is an instance of DatabaseSchema\n    .. note::\n      TableSchema objects are automatically created for you by TableSchemaBuilder\n      and loaded under ``schema.databases[name].tables``",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "documentation": {}
    },
    {
        "label": "TableSchemaBuilder",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "peekOfCode": "def TableSchemaBuilder(database):\n    \"\"\"\n    Returns a dictionary loaded with all of the tables available in the database.\n    ``database`` must be an instance of DatabaseSchema.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables`` when you create an instance of SchemaObject\n    \"\"\"\n    conn = database.parent.connection\n    t = OrderedDict()",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "documentation": {}
    },
    {
        "label": "REGEX_MULTI_SPACE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "peekOfCode": "REGEX_MULTI_SPACE = re.compile('\\s\\s+')\ndef TableSchemaBuilder(database):\n    \"\"\"\n    Returns a dictionary loaded with all of the tables available in the database.\n    ``database`` must be an instance of DatabaseSchema.\n    .. note::\n      This function is automatically called for you and set to\n      ``schema.databases[name].tables`` when you create an instance of SchemaObject\n    \"\"\"\n    conn = database.parent.connection",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.schemaobject.table",
        "documentation": {}
    },
    {
        "label": "get_database_url",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "peekOfCode": "def get_database_url():\n    database_url = raw_input(\"\\nTests need to be run against the Sakila Database v0.8\\n\"\n                            \"Enter the MySQL Database Connection URL without the database name\\n\"\n                            \"Example: mysql://user:pass@host:port/\\n\"\n                            \"URL: \")\n    if not database_url.endswith('/'):\n        database_url += '/'\n    return database_url\ndef regressionTest():\n    test_cases = [",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "documentation": {}
    },
    {
        "label": "regressionTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "peekOfCode": "def regressionTest():\n    test_cases = [\n                  TestSchema,\n                  TestDatabaseSchema,\n                  TestTableSchema,\n                  TestColumnSchema,\n                  TestIndexSchema,\n                  TestForeignKeySchema,\n                  TestOptionSchema,\n                  TestOrderedDict,",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_all",
        "documentation": {}
    },
    {
        "label": "TestOrderedDict",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_collections",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_collections",
        "peekOfCode": "class TestOrderedDict(unittest.TestCase):\n    def setUp(self):\n        self.test = OrderedDict()\n        self.test['name'] = \"John Smith\"\n        self.test['location'] = \"New York\"\n    def test_eq_dict_keys(self):\n        self.assertEqual( ['name', 'location'], self.test.keys() )\n    def test_neq_dict_keys(self):\n        self.assertNotEqual( ['location', 'name'], self.test.keys() )\n    def test_eq_dict_items(self):",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_collections",
        "documentation": {}
    },
    {
        "label": "TestColumnSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_column",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_column",
        "peekOfCode": "class TestColumnSchema(unittest.TestCase):\n    def setUp(self):\n        self.db = schemaobject.SchemaObject(self.database_url + 'sakila')\n        self.db = self.db.selected\n    def test_column_count(self):\n        self.assertEqual(9, len(self.db.tables['customer'].columns))\n    def test_columns(self):\n        self.assertEqual(self.db.tables['customer'].columns.keys(),\n                        ['customer_id', 'store_id', 'first_name', 'last_name',\n                         'email', 'address_id', 'active', 'create_date', 'last_update'])",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_column",
        "documentation": {}
    },
    {
        "label": "TestDatabaseURL",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_connection",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_connection",
        "peekOfCode": "class TestDatabaseURL(unittest.TestCase):\n    def test_user_pw_host_port_db(self):\n        test = \"mysql://user:password@localhost:3306/database\"\n        matches = REGEX_RFC1738.match(test)\n        self.assertTrue(matches)\n        self.assertEqual(matches.group('protocol'), 'mysql')\n        self.assertEqual(matches.group('username'), 'user')\n        self.assertEqual(matches.group('password'), 'password')\n        self.assertEqual(matches.group('host'), 'localhost')\n        self.assertEqual(matches.group('port'), '3306')",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_connection",
        "documentation": {}
    },
    {
        "label": "TestDatabaseSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_database",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_database",
        "peekOfCode": "class TestDatabaseSchema(unittest.TestCase):\n    def setUp(self):\n        self.db = schemaobject.SchemaObject(self.database_url + 'sakila')\n        self.db = self.db.selected\n    def test_database_name(self):\n        self.assertEqual(\"sakila\", self.db.name)\n    def test_database_option_charset(self):\n        self.assertEqual(\"latin1\", self.db.options['charset'].value)\n    def test_database_option_collation(self):\n        self.assertEqual(\"latin1_swedish_ci\", self.db.options['collation'].value)",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_database",
        "documentation": {}
    },
    {
        "label": "TestForeignKeySchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_foreignkey",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_foreignkey",
        "peekOfCode": "class TestForeignKeySchema(unittest.TestCase):\n    def setUp(self):\n        self.schema = schemaobject.SchemaObject(self.database_url + 'sakila')\n        self.fk = self.schema.selected.tables['rental'].foreign_keys\n    def test_FK_exists(self):\n        self.assertTrue(\"fk_rental_customer\" in self.fk.keys())\n    def test_FK_not_exists(self):\n        self.assertFalse(\"fk_foobar\" in self.fk.keys())\n    def test_FK_name(self):\n        self.assertEqual(\"fk_rental_customer\", self.fk['fk_rental_customer'].name)",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_foreignkey",
        "documentation": {}
    },
    {
        "label": "TestIndexSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_index",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_index",
        "peekOfCode": "class TestIndexSchema(unittest.TestCase):\n    def setUp(self):\n            self.db = schemaobject.SchemaObject(self.database_url + 'sakila')\n            self.db = self.db.selected\n    def test_format_sub_part_with_length(self):\n        self.assertEqual('`name`(16)', schemaobject.index.IndexSchema.format_sub_part('name', 16))\n    def test_format_sub_part_without_length(self):\n        self.assertEqual('`name`', schemaobject.index.IndexSchema.format_sub_part('name', 0))\n        self.assertEqual('`name`', schemaobject.index.IndexSchema.format_sub_part('name', None))\n    def test_index_exists(self):",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_index",
        "documentation": {}
    },
    {
        "label": "TestOptionSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_option",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_option",
        "peekOfCode": "class TestOptionSchema(unittest.TestCase):\n  def test_set_value(self):\n    opt = SchemaOption('key')\n    assert opt.value == None\n    opt.value = \"value\"\n    assert opt.value == \"value\"\n  def test_get_value(self):\n    opt = SchemaOption('key', 'value')\n    assert opt.value == \"value\"\n  def test_create_no_name(self):",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_option",
        "documentation": {}
    },
    {
        "label": "TestSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_schema",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_schema",
        "peekOfCode": "class TestSchema(unittest.TestCase):\n  def setUp(self):\n    self.db = schemaobject.SchemaObject(self.database_url + 'sakila')\n    self.db2 = schemaobject.SchemaObject(self.database_url)\n  def test_database_version(self):\n    assert self.db.version == \"5.1.30\"\n  def test_port(self):\n    assert self.db.port == 3306\n  def test_host(self):\n    assert self.db.host == \"localhost\"",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_schema",
        "documentation": {}
    },
    {
        "label": "TestTableSchema",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_table",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_table",
        "peekOfCode": "class TestTableSchema(unittest.TestCase):\n    def setUp(self):\n        self.db = schemaobject.SchemaObject(self.database_url + 'sakila')\n        self.db = self.db.selected\n    def test_table_count(self):\n        self.assertEqual(16, len(self.db.tables))\n    def test_tables(self):\n        self.assertEqual(self.db.tables.keys(), ['actor','address','category','city','country','customer',\n         'film','film_actor','film_category','film_text','inventory',\n          'language','payment','rental','staff','store'])",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.tests.test_table",
        "documentation": {}
    },
    {
        "label": "use_setuptools",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "def use_setuptools(\n    version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir,\n    download_delay=15\n):\n    \"\"\"Automatically find/download setuptools and make it available on sys.path\n    `version` should be a valid setuptools version number that is available\n    as an egg for download under the `download_base` URL (which should end with\n    a '/').  `to_dir` is the directory where setuptools will be downloaded, if\n    it is not already available.  If `download_delay` is specified, it should\n    be the number of seconds that will be paused before initiating a download,",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "download_setuptools",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "def download_setuptools(\n    version=DEFAULT_VERSION, download_base=DEFAULT_URL, to_dir=os.curdir,\n    delay = 15\n):\n    \"\"\"Download setuptools from a specified location and return its filename\n    `version` should be a valid setuptools version number that is available\n    as an egg for download under the `download_base` URL (which should end\n    with a '/'). `to_dir` is the directory where the egg will be downloaded.\n    `delay` is the number of seconds to pause before an actual download attempt.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "def main(argv, version=DEFAULT_VERSION):\n    \"\"\"Install or upgrade setuptools and EasyInstall\"\"\"\n    try:\n        import setuptools\n    except ImportError:\n        egg = None\n        try:\n            egg = download_setuptools(version, delay=0)\n            sys.path.insert(0,egg)\n            from setuptools.command.easy_install import main",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "update_md5",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "def update_md5(filenames):\n    \"\"\"Update our built-in md5 registry\"\"\"\n    import re\n    for name in filenames:\n        base = os.path.basename(name)\n        f = open(name,'rb')\n        md5_data[base] = md5(f.read()).hexdigest()\n        f.close()\n    data = [\"    %r: %r,\\n\" % it for it in md5_data.items()]\n    data.sort()",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_VERSION",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "DEFAULT_VERSION = \"0.6c9\"\nDEFAULT_URL     = \"http://pypi.python.org/packages/%s/s/setuptools/\" % sys.version[:3]\nmd5_data = {\n    'setuptools-0.6b1-py2.3.egg': '8822caf901250d848b996b7f25c6e6ca',\n    'setuptools-0.6b1-py2.4.egg': 'b79a8a403e4502fbb85ee3f1941735cb',\n    'setuptools-0.6b2-py2.3.egg': '5657759d8a6d8fc44070a9d07272d99b',\n    'setuptools-0.6b2-py2.4.egg': '4996a8d169d2be661fa32a6e52e4f82a',\n    'setuptools-0.6b3-py2.3.egg': 'bb31c0fc7399a63579975cad9f5a0618',\n    'setuptools-0.6b3-py2.4.egg': '38a8c6b3d6ecd22247f179f7da669fac',\n    'setuptools-0.6b4-py2.3.egg': '62045a24ed4e1ebc77fe039aa4e6f7e5',",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "md5_data",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "description": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "peekOfCode": "md5_data = {\n    'setuptools-0.6b1-py2.3.egg': '8822caf901250d848b996b7f25c6e6ca',\n    'setuptools-0.6b1-py2.4.egg': 'b79a8a403e4502fbb85ee3f1941735cb',\n    'setuptools-0.6b2-py2.3.egg': '5657759d8a6d8fc44070a9d07272d99b',\n    'setuptools-0.6b2-py2.4.egg': '4996a8d169d2be661fa32a6e52e4f82a',\n    'setuptools-0.6b3-py2.3.egg': 'bb31c0fc7399a63579975cad9f5a0618',\n    'setuptools-0.6b3-py2.4.egg': '38a8c6b3d6ecd22247f179f7da669fac',\n    'setuptools-0.6b4-py2.3.egg': '62045a24ed4e1ebc77fe039aa4e6f7e5',\n    'setuptools-0.6b4-py2.4.egg': '4cb2a185d228dacffb2d17f103b3b1c4',\n    'setuptools-0.6c1-py2.3.egg': 'b3f2b5539d65cb7f74ad79127f1a908c',",
        "detail": "github.com.voltdb.voltdb.third_party.python.schemaobject.ez_setup",
        "documentation": {}
    },
    {
        "label": "get_temp_directory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def get_temp_directory(suffix=None):\n    return tempfile.mkdtemp(prefix='%s_' % environment.command_name)\ndef extract_catalog(runner, catalog_old):\n    tempdir = get_temp_directory()\n    try:\n        catalog_zip_in = zipfile.ZipFile(catalog_old, 'r')\n    except (IOError, OSError), e:\n        runner.abort('Failed to open input catalog jar \"%s\".' % catalog_old)\n    try:\n        try:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "extract_catalog",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def extract_catalog(runner, catalog_old):\n    tempdir = get_temp_directory()\n    try:\n        catalog_zip_in = zipfile.ZipFile(catalog_old, 'r')\n    except (IOError, OSError), e:\n        runner.abort('Failed to open input catalog jar \"%s\".' % catalog_old)\n    try:\n        try:\n            catalog_zip_in.extractall(tempdir)\n        except (IOError, OSError), e:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "compress_catalog",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def compress_catalog(runner, catalog_new, tempdir):\n    try:\n        catalog_zip_out = zipfile.ZipFile(catalog_new, 'w', zipfile.ZIP_DEFLATED)\n    except (IOError, OSError), e:\n        runner.abort('Failed to open output catalog jar \"%s\".' % catalog_new)\n    try:\n        savedir = os.getcwd()\n        os.chdir(tempdir)\n        try:\n            try:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "patch_buildinfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def patch_buildinfo(runner, buildinfo_in, version_new):\n    buildinfo_out = '%s.out' % buildinfo_in\n    buildinfo_orig = '%s.orig' % buildinfo_in\n    if not os.path.isfile(buildinfo_in):\n        runner.abort('\"%s\" not found.' % buildinfo_in)\n    try:\n        shutil.copy(buildinfo_in, buildinfo_orig)\n    except (IOError, OSError), e:\n        runner.abort('Failed to backup \"%s\" to \"%s\".'\n                        % (buildinfo_in, buildinfo_orig), e)",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "iter_catalog_dump",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def iter_catalog_dump(runner, path, all):\n    try:\n        zipf = zipfile.ZipFile(path)\n        try:\n            try:\n                yield ''\n                yield '========== Build Info =========='\n                yield ''\n                for line in zipf.read('buildinfo.txt').split('\\n'):\n                    if line:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "dump_to_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def dump_to_file(runner, path_in, path_out):\n    writer = utility.File(path_out, 'w')\n    writer.open()\n    try:\n        for line in iter_catalog_dump(runner, path_in, True):\n            writer.write('%s\\n' % line)\n    finally:\n        writer.close()\n@VOLT.Command(\n    description='Display catalog information.',",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "dump",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def dump(runner):\n    for line in iter_catalog_dump(runner, runner.opts.catalog_path, runner.opts.all):\n        print line\n@VOLT.Command(\n    description='Patch a catalog file version (buildinfo.txt).',\n    description2='This command does not overwrite the original catalog file.',\n    arguments=[\n        VOLT.PathArgument('catalog_path', 'path to catalog jar', exists=True),\n        VOLT.StringArgument('version', 'new version number'),\n    ],",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "patch_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def patch_version(runner):\n    version_new = runner.opts.version\n    if not version_new:\n        runner.abort('A non-empty version number is required.')\n    catalog_old = runner.opts.catalog_path\n    basename, extension = os.path.splitext(catalog_old)\n    catalog_new = '%(basename)s-%(version_new)s%(extension)s' % locals()\n    runner.info('Extracting \"%s\"...' % catalog_old)\n    tempdir = extract_catalog(runner, catalog_old)\n    try:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "diff",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "def diff(runner):\n    tempdir = get_temp_directory(suffix='_diff')\n    try:\n        path1 = os.path.join(tempdir, '%s.out' % os.path.basename(runner.opts.catalog_path_1))\n        path2 = os.path.join(tempdir, '%s.out' % os.path.basename(runner.opts.catalog_path_2))\n        dump_to_file(runner, runner.opts.catalog_path_1, path1)\n        dump_to_file(runner, runner.opts.catalog_path_2, path2)\n        os.system('diff \"%s\" \"%s\"' % (path1, path2))\n    finally:\n        if not runner.opts.keep:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "reHexPat",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "reHexPat = '^(\\s*set\\s+.*\\s+)(schema|explainplan|plannodetree)(\\s+\")([0-9a-f]+)(\".*)$'\nreHex = re.compile(reHexPat, re.IGNORECASE)\ndef get_temp_directory(suffix=None):\n    return tempfile.mkdtemp(prefix='%s_' % environment.command_name)\ndef extract_catalog(runner, catalog_old):\n    tempdir = get_temp_directory()\n    try:\n        catalog_zip_in = zipfile.ZipFile(catalog_old, 'r')\n    except (IOError, OSError), e:\n        runner.abort('Failed to open input catalog jar \"%s\".' % catalog_old)",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "reHex",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "description": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "peekOfCode": "reHex = re.compile(reHexPat, re.IGNORECASE)\ndef get_temp_directory(suffix=None):\n    return tempfile.mkdtemp(prefix='%s_' % environment.command_name)\ndef extract_catalog(runner, catalog_old):\n    tempdir = get_temp_directory()\n    try:\n        catalog_zip_in = zipfile.ZipFile(catalog_old, 'r')\n    except (IOError, OSError), e:\n        runner.abort('Failed to open input catalog jar \"%s\".' % catalog_old)\n    try:",
        "detail": "github.com.voltdb.voltdb.tools.catalog-tool.d.catalog-tool",
        "documentation": {}
    },
    {
        "label": "getdata",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.findchangedpaths",
        "description": "github.com.voltdb.voltdb.tools.jenkins.findchangedpaths",
        "peekOfCode": "def getdata(url, build):\n    url = 'http://ci.voltdb.lan:8080/' + url + str(build) + \"/api/python\"\n    return eval(urllib2.urlopen(url).read())\nif __name__ == '__main__':\n    pattern = sys.argv[1]\n    patterns = pattern.split(',')\n    result = -1\n    #DATA = {\"_class\":\"hudson.model.FreeStyleBuild\",\"actions\":[{\"_class\":\"hudson.model.ParametersAction\",\"parameters\":[{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"GIT_BRANCH\",\"value\":\"origin/ENG-12931-PoisonPillInEE\"},{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"GIT_REPO\",\"value\":\"voltdb\"},{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"REPOSITORY_VOLTDB\",\"value\":\"git@github.com:VoltDB/voltdb.git\"},{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"REPOSITORY_PRO\",\"value\":\"git@github.com:VoltDB/pro.git\"},{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"GIT_REPOSITORY_PRO\",\"value\":\"git@github.com:VoltDB/pro.git\"},{\"_class\":\"hudson.model.StringParameterValue\",\"name\":\"GIT_REPOSITORY_VOLTDB\",\"value\":\"git@github.com:VoltDB/voltdb.git\"}]},{\"_class\":\"hudson.model.CauseAction\",\"causes\":[{\"_class\":\"hudson.model.Cause$UpstreamCause\",\"shortDescription\":\"Started by upstream project \\\"SyncProjectBranchesWithJenkins\\\" build number 33,941\",\"upstreamBuild\":33941,\"upstreamProject\":\"SyncProjectBranchesWithJenkins\",\"upstreamUrl\":\"job/SyncProjectBranchesWithJenkins/\"}]},{},{},{},{}],\"artifacts\":[],\"building\":False,\"description\":None,\"displayName\":\"#31944.voltdb origin/ENG-12931-PoisonPillInEE\",\"duration\":23487,\"estimatedDuration\":24740,\"executor\":None,\"fullDisplayName\":\"SyncStartBranchJobs #31944.voltdb origin/ENG-12931-PoisonPillInEE\",\"id\":\"31944\",\"keepLog\":False,\"number\":31944,\"queueId\":13006,\"result\":\"SUCCESS\",\"timestamp\":1501871991747,\"url\":\"http://ci:8080/job/SyncStartBranchJobs/31944/\",\"builtOn\":\"\",\"changeSet\":{\"_class\":\"hudson.scm.EmptyChangeLogSet\",\"items\":[],\"kind\":None}}\n    DATA = getdata('job/'+os.environ['JOB_BASE_NAME'], '/'+os.environ['BUILD_NUMBER'])\n    affectedPaths = []",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.findchangedpaths",
        "documentation": {}
    },
    {
        "label": "WorkerThread",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "class WorkerThread(Thread):\n    def __init__(self, incoming_data, jenkins_bot):\n        Thread.__init__(self)\n        self.incoming = incoming_data\n        self.jenkins_bot = jenkins_bot\n    def run(self):\n        jenkins_bot = self.jenkins_bot\n        try:\n            if not self.can_reply():\n                return",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JenkinsBot",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "class JenkinsBot(object):\n    def __init__(self):\n        self.client = None\n        self.help_text = '\\n'.join(\n            ['*Instructions:*',\n             'Alias a command:\\n\\tmy alias = valid command',\n             'Remove an alias:\\n\\t`unalias` my alias',\n             'See your aliases:\\n\\t`aliases`',\n             'See which tests are failing the most since this build:\\n\\t`tests-since` <job> <build #>',\n             'See which tests are failing in the past x days:\\n\\t`days` <job> <days>',",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "COMMUNITY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "COMMUNITY = os.environ.get('community', None)\nPRO = os.environ.get('pro', None)\nVDM = os.environ.get('vdm', None)\nMEMVALDEBUG = os.environ.get('memvaldebug', None)\nDEBUG = os.environ.get('debug', None)\nMEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "PRO",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "PRO = os.environ.get('pro', None)\nVDM = os.environ.get('vdm', None)\nMEMVALDEBUG = os.environ.get('memvaldebug', None)\nDEBUG = os.environ.get('debug', None)\nMEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "VDM",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "VDM = os.environ.get('vdm', None)\nMEMVALDEBUG = os.environ.get('memvaldebug', None)\nDEBUG = os.environ.get('debug', None)\nMEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "MEMVALDEBUG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "MEMVALDEBUG = os.environ.get('memvaldebug', None)\nDEBUG = os.environ.get('debug', None)\nMEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "DEBUG = os.environ.get('debug', None)\nMEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "MEMVAL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "MEMVAL = os.environ.get('memval', None)\nFULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "FULLMEMCHECK",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "FULLMEMCHECK = os.environ.get('fullmemcheck', None)\nMASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "MASTER_JOBS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "MASTER_JOBS = [PRO, COMMUNITY, VDM]\nCORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "CORE_JOBS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "CORE_JOBS = [MEMVALDEBUG, DEBUG, MEMVAL, FULLMEMCHECK]\n# Channel to message in case something goes wrong\nADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "ADMIN_CHANNEL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "ADMIN_CHANNEL = os.environ.get('admin', None)\n# Other channels\nGENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "GENERAL_CHANNEL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "GENERAL_CHANNEL = os.environ.get('general', None)\nRANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "RANDOM_CHANNEL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "RANDOM_CHANNEL = os.environ.get('random', None)\nJUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.\nSL_QUERY = (\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JUNIT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "JUNIT = os.environ.get('junit', None)\n# Jira credentials and info\nJIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.\nSL_QUERY = (\"\"\"\n  SELECT job_name AS 'Job name',",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JIRA_USER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "JIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.\nSL_QUERY = (\"\"\"\n  SELECT job_name AS 'Job name',\n         workload AS 'Workload',\n         fails AS 'Fails',",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JIRA_PASS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "JIRA_PASS = os.environ.get('jirapass', None)\n# TODO: change this back to 'ENG', before merging to master\nJIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.\nSL_QUERY = (\"\"\"\n  SELECT job_name AS 'Job name',\n         workload AS 'Workload',\n         fails AS 'Fails',\n         total AS 'Total',",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "JIRA_PROJECT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "JIRA_PROJECT = os.environ.get('jiraproject', 'ENG')\n# Queries\n# System Leaderboard - Leaderboard for master system tests on apprunner.\nSL_QUERY = (\"\"\"\n  SELECT job_name AS 'Job name',\n         workload AS 'Workload',\n         fails AS 'Fails',\n         total AS 'Total',\n         fails/total*100. AS 'Fail %',\n         latest AS 'Latest'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "SL_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "SL_QUERY = (\"\"\"\n  SELECT job_name AS 'Job name',\n         workload AS 'Workload',\n         fails AS 'Fails',\n         total AS 'Total',\n         fails/total*100. AS 'Fail %',\n         latest AS 'Latest'\n    FROM\n        (\n           SELECT job_name,",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "TS_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "TS_QUERY = (\"\"\"\n  SELECT tf.name AS 'Test name',\n         COUNT(*) AS 'Failures'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT tf.status='FIXED' AND\n         tf.build >= %(beginning)s AND\n         tf.job=%(job)s\nGROUP BY tf.name\nORDER BY 2 DESC\n\"\"\")",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "DL_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "DL_QUERY = (\"\"\"\n  SELECT tf.name AS 'Test name',\n         COUNT(*) AS 'Failures'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT tf.status='FIXED' AND\n         NOW() - INTERVAL %(days)s DAY <= tf.stamp AND\n         tf.job=%(job)s\nGROUP BY tf.name\nORDER BY 2 DESC\n\"\"\")",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "BR_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "BR_QUERY = (\"\"\"\n    SELECT tf.name AS 'Test name',\n           COUNT(*) AS 'Number of failures in this build range'\n      FROM `junit-test-failures` AS tf\nINNER JOIN `junit-builds` AS jb\n        ON NOT tf.status='FIXED' AND\n           jb.name=tf.job AND\n           jb.build=tf.build AND\n           jb.name=%(job)s AND\n           %(build_low)s <= jb.build AND",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "AF_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "AF_QUERY = (\"\"\"\n  SELECT tf.name AS 'Test name',\n         tf.build AS 'Build',\n         tf.stamp AS 'Time'\n    FROM `junit-test-failures` AS tf\n   WHERE NOT STATUS='FIXED' AND\n         tf.job=%(job)s\nORDER BY 2 DESC\n\"\"\")\n# Latest build - See the latest build for a job in the database.",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "LB_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "LB_QUERY = (\"\"\"\n    SELECT name AS 'Job name',\n           stamp AS 'Latest run',\n           url AS 'Build url',\n           build AS 'Build number'\n      FROM `junit-builds`\n     WHERE stamp = (\n              SELECT MAX(jb.stamp)\n                FROM `junit-builds` AS jb\n               WHERE jb.name=%(job)s",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "RF_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "RF_QUERY = (\"\"\"\n    SELECT MAX(tf.build) AS 'Most recent failure',\n           MAX(jb.build) AS 'Most recent build of job'\n      FROM `junit-test-failures` AS tf\nINNER JOIN `junit-builds` AS jb\n        ON NOT tf.status='FIXED' AND\n           jb.name=tf.job AND\n           tf.name=%(test)s AND\n           jb.name=%(job)s\n\"\"\")",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "RS_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "RS_QUERY = (\"\"\"\n    SELECT name AS 'Test name',\n           status AS 'Latest status',\n           stamp AS 'Latest run',\n           build AS 'Latest build'\n      FROM `junit-test-failures`\n     WHERE stamp = (\n              SELECT MAX(tf.stamp)\n                FROM `junit-test-failures` AS tf\n               WHERE tf.name=%(test)s AND",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "AA_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "AA_QUERY = (\"\"\"\n    INSERT INTO `jenkinsbot-user-aliases`\n                (slack_user_id, command, alias)\n         VALUES (%(slack_user_id)s, %(command)s, %(alias)s)\n\"\"\")\n# Remove alias - Remove an alias for the user.\nRA_QUERY = (\"\"\"\n    DELETE FROM `jenkinsbot-user-aliases`\n          WHERE slack_user_id=%(slack_user_id)s AND\n                alias=%(alias)s",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "RA_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "RA_QUERY = (\"\"\"\n    DELETE FROM `jenkinsbot-user-aliases`\n          WHERE slack_user_id=%(slack_user_id)s AND\n                alias=%(alias)s\n\"\"\")\n# Get alias - Get the command for an alias for the user.\nGA_QUERY = (\"\"\"\n    SELECT command\n      FROM `jenkinsbot-user-aliases`\n     WHERE alias=%(alias)s AND",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "GA_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "GA_QUERY = (\"\"\"\n    SELECT command\n      FROM `jenkinsbot-user-aliases`\n     WHERE alias=%(alias)s AND\n           slack_user_id=%(slack_user_id)s\n\"\"\")\n# See aliases - Get all aliases for the user.\nSA_QUERY = (\"\"\"\n    SELECT alias,\n           command",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "SA_QUERY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "description": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "peekOfCode": "SA_QUERY = (\"\"\"\n    SELECT alias,\n           command\n      FROM `jenkinsbot-user-aliases`\n     WHERE slack_user_id=%(slack_user_id)s\n\"\"\")\nclass WorkerThread(Thread):\n    def __init__(self, incoming_data, jenkins_bot):\n        Thread.__init__(self)\n        self.incoming = incoming_data",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.jenkinsbot",
        "documentation": {}
    },
    {
        "label": "Stats",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "class Stats(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        self.dbhost = 'junitstatsdb.voltdb.lan'\n        self.dbuser = os.environ.get('dbuser', None)\n        self.dbpass = os.environ.get('dbpass', None)\n        self.dbname = os.environ.get('dbname', 'qa')\n        self.cmdhelp = \"\"\"\n        usage: junit-stats <job> <build_range>\n        ex: junit-stats branch-2-pro-junit-master 800-990",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "Tests",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "class Tests(unittest.TestCase):\n    def create_db(self):\n        self.cursor.execute(\"DROP DATABASE IF EXISTS junitstatstests;\")\n        self.cursor.execute(\"CREATE DATABASE junitstatstests;\")\n        self.db.database = \"junitstatstests\"\n        self.db.autocommit = True\n    def drop_db(self):\n        self.cursor.execute(\"DROP DATABASE junitstatstests;\")\n    def create_table(self):\n        self.cursor.execute(\"\"\"CREATE TABLE `junit-test-failures` (",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "isTruthy",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "def isTruthy(value):\n    \"\"\"Converts any value to a boolean value; just uses the 'bool' built-in function,\n       except that strings like 'FALSE', 'false' and 'False', and strings that are\n       numeric values equal to 0, return False.\n    \"\"\"\n    if str(value).lower() == 'false':\n        return False\n    try:\n        return bool(float(value))\n    except:",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JUNIT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JUNIT = os.environ.get('junit', None)\nAUTO_FILED = os.environ.get('auto-filed', None)\n# For now, this should work (?); need a constant for the 'auto-filed' channel\nSLACK_CHANNEL_FOR_AUTO_FILING = JUNIT\n# set to True if you need to suppress updating the 'qa' database or JIRA\nDRY_RUN = False\n# Default is None (null); but once initialized, it may be reused\nJENKINSBOT = None\n# All possible failure \"types\", as detailed below\nALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "AUTO_FILED",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "AUTO_FILED = os.environ.get('auto-filed', None)\n# For now, this should work (?); need a constant for the 'auto-filed' channel\nSLACK_CHANNEL_FOR_AUTO_FILING = JUNIT\n# set to True if you need to suppress updating the 'qa' database or JIRA\nDRY_RUN = False\n# Default is None (null); but once initialized, it may be reused\nJENKINSBOT = None\n# All possible failure \"types\", as detailed below\nALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']\n# Constants used to determine which test failures are considered Consistent,",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "SLACK_CHANNEL_FOR_AUTO_FILING",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "SLACK_CHANNEL_FOR_AUTO_FILING = JUNIT\n# set to True if you need to suppress updating the 'qa' database or JIRA\nDRY_RUN = False\n# Default is None (null); but once initialized, it may be reused\nJENKINSBOT = None\n# All possible failure \"types\", as detailed below\nALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']\n# Constants used to determine which test failures are considered Consistent,\n# Intermittent or New failures\nNEW_FAILURE_WINDOW_SIZE             = 10",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "DRY_RUN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "DRY_RUN = False\n# Default is None (null); but once initialized, it may be reused\nJENKINSBOT = None\n# All possible failure \"types\", as detailed below\nALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']\n# Constants used to determine which test failures are considered Consistent,\n# Intermittent or New failures\nNEW_FAILURE_WINDOW_SIZE             = 10\nNEW_NUM_FAILURES_THRESHOLD          = 2  # 2 out of 10 failures is 'New' - if not seen recently\nINTERMITTENT_FAILURE_WINDOW_SIZE    = 25",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JENKINSBOT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JENKINSBOT = None\n# All possible failure \"types\", as detailed below\nALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']\n# Constants used to determine which test failures are considered Consistent,\n# Intermittent or New failures\nNEW_FAILURE_WINDOW_SIZE             = 10\nNEW_NUM_FAILURES_THRESHOLD          = 2  # 2 out of 10 failures is 'New' - if not seen recently\nINTERMITTENT_FAILURE_WINDOW_SIZE    = 25\nINTERMITTENT_NUM_FAILURES_THRESHOLD = 3  # 3 out of 25 failures is 'Intermittent'\nCONSISTENT_FAILURE_WINDOW_SIZE      = 3",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "ALL_FAILURE_TYPES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "ALL_FAILURE_TYPES = ['NEW', 'INTERMITTENT', 'FREQUENT', 'CONSISTENT', 'INCONSISTENT', 'OLD']\n# Constants used to determine which test failures are considered Consistent,\n# Intermittent or New failures\nNEW_FAILURE_WINDOW_SIZE             = 10\nNEW_NUM_FAILURES_THRESHOLD          = 2  # 2 out of 10 failures is 'New' - if not seen recently\nINTERMITTENT_FAILURE_WINDOW_SIZE    = 25\nINTERMITTENT_NUM_FAILURES_THRESHOLD = 3  # 3 out of 25 failures is 'Intermittent'\nCONSISTENT_FAILURE_WINDOW_SIZE      = 3\nCONSISTENT_NUM_FAILURES_THRESHOLD   = 3  # 3 out of 3 (consecutive) failures is 'Consistent'\n# Constants used to determine after how many passing it should be closed, or",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "INTERMITTENT_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "INTERMITTENT_NUM_FAILURES_THRESHOLD = 3  # 3 out of 25 failures is 'Intermittent'\nCONSISTENT_FAILURE_WINDOW_SIZE      = 3\nCONSISTENT_NUM_FAILURES_THRESHOLD   = 3  # 3 out of 3 (consecutive) failures is 'Consistent'\n# Constants used to determine after how many passing it should be closed, or\n# when its status should be changed to Old, Inconsistent or Intermittent.\n# Note: \"Inconsistent\" means formerly deemed Consistent, but we're not yet\n# certain whether it is fixed or actually Intermittent.\nCHANGE_NEW_TO_OLD_WINDOW_SIZE            = 5\nCHANGE_NEW_TO_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 5 failed, downgrade to 'Old'\nCHANGE_INTERMITTENT_TO_OLD_WINDOW_SIZE            = 10",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CHANGE_NEW_TO_OLD_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CHANGE_NEW_TO_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 5 failed, downgrade to 'Old'\nCHANGE_INTERMITTENT_TO_OLD_WINDOW_SIZE            = 10\nCHANGE_INTERMITTENT_TO_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, downgrade to 'Old'\nCHANGE_INTERMITTENT_TO_CONSISTENT_WINDOW_SIZE            = 5\nCHANGE_INTERMITTENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD = 5  # if 5 out of 5 failed, upgrade to 'Consistent'\nCHANGE_INTERMITTENT_TO_FREQUENT_WINDOW_SIZE              = 10\nCHANGE_INTERMITTENT_TO_FREQUENT_NUM_FAILURES_THRESHOLD   = 8  # if 8 out of 10 failed, upgrade to 'Frequent'\nCHANGE_FREQUENT_TO_CONSISTENT_WINDOW_SIZE                = 10\nCHANGE_FREQUENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD     = 10 # if 10 out of 10 failed, change to 'Consistent'\nCHANGE_FREQUENT_TO_INTERMITTENT_WINDOW_SIZE              = 10",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CHANGE_INTERMITTENT_TO_OLD_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CHANGE_INTERMITTENT_TO_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, downgrade to 'Old'\nCHANGE_INTERMITTENT_TO_CONSISTENT_WINDOW_SIZE            = 5\nCHANGE_INTERMITTENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD = 5  # if 5 out of 5 failed, upgrade to 'Consistent'\nCHANGE_INTERMITTENT_TO_FREQUENT_WINDOW_SIZE              = 10\nCHANGE_INTERMITTENT_TO_FREQUENT_NUM_FAILURES_THRESHOLD   = 8  # if 8 out of 10 failed, upgrade to 'Frequent'\nCHANGE_FREQUENT_TO_CONSISTENT_WINDOW_SIZE                = 10\nCHANGE_FREQUENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD     = 10 # if 10 out of 10 failed, change to 'Consistent'\nCHANGE_FREQUENT_TO_INTERMITTENT_WINDOW_SIZE              = 10\nCHANGE_FREQUENT_TO_INTERMITTENT_NUM_FAILURES_THRESHOLD   = 7  # if less than 7 in 10 failed, downgrade to 'Intermittent'\nCHANGE_CONSISTENT_TO_INCONSISTENT_WINDOW_SIZE            = 1",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CHANGE_INTERMITTENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CHANGE_INTERMITTENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD = 5  # if 5 out of 5 failed, upgrade to 'Consistent'\nCHANGE_INTERMITTENT_TO_FREQUENT_WINDOW_SIZE              = 10\nCHANGE_INTERMITTENT_TO_FREQUENT_NUM_FAILURES_THRESHOLD   = 8  # if 8 out of 10 failed, upgrade to 'Frequent'\nCHANGE_FREQUENT_TO_CONSISTENT_WINDOW_SIZE                = 10\nCHANGE_FREQUENT_TO_CONSISTENT_NUM_FAILURES_THRESHOLD     = 10 # if 10 out of 10 failed, change to 'Consistent'\nCHANGE_FREQUENT_TO_INTERMITTENT_WINDOW_SIZE              = 10\nCHANGE_FREQUENT_TO_INTERMITTENT_NUM_FAILURES_THRESHOLD   = 7  # if less than 7 in 10 failed, downgrade to 'Intermittent'\nCHANGE_CONSISTENT_TO_INCONSISTENT_WINDOW_SIZE            = 1\nCHANGE_CONSISTENT_TO_INCONSISTENT_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 1 failed, downgrade to 'Inconsistent'\nCHANGE_INCONSISTENT_TO_INTERMITTENT_WINDOW_SIZE            = 1",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CHANGE_CONSISTENT_TO_INCONSISTENT_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CHANGE_CONSISTENT_TO_INCONSISTENT_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 1 failed, downgrade to 'Inconsistent'\nCHANGE_INCONSISTENT_TO_INTERMITTENT_WINDOW_SIZE            = 1\nCHANGE_INCONSISTENT_TO_INTERMITTENT_NUM_FAILURES_THRESHOLD = 1  # if 1 out of 1 failed, change to 'Intermittent'\n# Constants used to determine after how many passing it should be closed\nCLOSE_INCONSISTENT_WINDOW_SIZE            = 5\nCLOSE_INCONSISTENT_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 5 failed, close the ticket\nCLOSE_OLD_WINDOW_SIZE            = 10\nCLOSE_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, close the ticket\n# Constants used in filing (or modifying) Jira tickets\nJIRA_PRIORITY_FOR_CONSISTENT_FAILURES   = 'Critical'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CHANGE_INCONSISTENT_TO_INTERMITTENT_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CHANGE_INCONSISTENT_TO_INTERMITTENT_NUM_FAILURES_THRESHOLD = 1  # if 1 out of 1 failed, change to 'Intermittent'\n# Constants used to determine after how many passing it should be closed\nCLOSE_INCONSISTENT_WINDOW_SIZE            = 5\nCLOSE_INCONSISTENT_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 5 failed, close the ticket\nCLOSE_OLD_WINDOW_SIZE            = 10\nCLOSE_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, close the ticket\n# Constants used in filing (or modifying) Jira tickets\nJIRA_PRIORITY_FOR_CONSISTENT_FAILURES   = 'Critical'\nJIRA_PRIORITY_FOR_FREQUENT_FAILURES     = 'Critical'\nJIRA_PRIORITY_FOR_INCONSISTENT_FAILURES = 'Major'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CLOSE_INCONSISTENT_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CLOSE_INCONSISTENT_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 5 failed, close the ticket\nCLOSE_OLD_WINDOW_SIZE            = 10\nCLOSE_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, close the ticket\n# Constants used in filing (or modifying) Jira tickets\nJIRA_PRIORITY_FOR_CONSISTENT_FAILURES   = 'Critical'\nJIRA_PRIORITY_FOR_FREQUENT_FAILURES     = 'Critical'\nJIRA_PRIORITY_FOR_INCONSISTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_INTERMITTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_NEW_FAILURES = 'Minor'\nJIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "CLOSE_OLD_NUM_FAILURES_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "CLOSE_OLD_NUM_FAILURES_THRESHOLD = 1  # if less than 1 in 10 failed, close the ticket\n# Constants used in filing (or modifying) Jira tickets\nJIRA_PRIORITY_FOR_CONSISTENT_FAILURES   = 'Critical'\nJIRA_PRIORITY_FOR_FREQUENT_FAILURES     = 'Critical'\nJIRA_PRIORITY_FOR_INCONSISTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_INTERMITTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_NEW_FAILURES = 'Minor'\nJIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'\nJIRA_LABEL_FOR_AUTO_FILING     = 'auto-filed'\nJIRA_LABEL_FOR_CONSISTENT_FAILURES   = 'junit-consistent-failure'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_PRIORITY_FOR_INCONSISTENT_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_PRIORITY_FOR_INCONSISTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_INTERMITTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_NEW_FAILURES = 'Minor'\nJIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'\nJIRA_LABEL_FOR_AUTO_FILING     = 'auto-filed'\nJIRA_LABEL_FOR_CONSISTENT_FAILURES   = 'junit-consistent-failure'\nJIRA_LABEL_FOR_FREQUENT_FAILURES     = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INCONSISTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_PRIORITY_FOR_INTERMITTENT_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_PRIORITY_FOR_INTERMITTENT_FAILURES = 'Major'\nJIRA_PRIORITY_FOR_NEW_FAILURES = 'Minor'\nJIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'\nJIRA_LABEL_FOR_AUTO_FILING     = 'auto-filed'\nJIRA_LABEL_FOR_CONSISTENT_FAILURES   = 'junit-consistent-failure'\nJIRA_LABEL_FOR_FREQUENT_FAILURES     = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INCONSISTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_OLD_FAILURES          = 'junit-intermittent-failure'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_PRIORITY_FOR_NEW_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_PRIORITY_FOR_NEW_FAILURES = 'Minor'\nJIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'\nJIRA_LABEL_FOR_AUTO_FILING     = 'auto-filed'\nJIRA_LABEL_FOR_CONSISTENT_FAILURES   = 'junit-consistent-failure'\nJIRA_LABEL_FOR_FREQUENT_FAILURES     = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INCONSISTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_OLD_FAILURES          = 'junit-intermittent-failure'\nMAX_NUM_ATTACHMENTS_PER_JIRA_TICKET  = 8",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_PRIORITY_FOR_OLD_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_PRIORITY_FOR_OLD_FAILURES = 'Trivial'\nJIRA_LABEL_FOR_AUTO_FILING     = 'auto-filed'\nJIRA_LABEL_FOR_CONSISTENT_FAILURES   = 'junit-consistent-failure'\nJIRA_LABEL_FOR_FREQUENT_FAILURES     = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INCONSISTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_OLD_FAILURES          = 'junit-intermittent-failure'\nMAX_NUM_ATTACHMENTS_PER_JIRA_TICKET  = 8\n# Used to help prevent a Jira ticket from exceeding Jira's maximum",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_LABEL_FOR_INCONSISTENT_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_LABEL_FOR_INCONSISTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_OLD_FAILURES          = 'junit-intermittent-failure'\nMAX_NUM_ATTACHMENTS_PER_JIRA_TICKET  = 8\n# Used to help prevent a Jira ticket from exceeding Jira's maximum\n# description size (32,767 characters, total)\nMAX_NUM_CHARS_PER_JIRA_DESCRIPTION  = 32767\nMAX_NUM_CHARS_PER_DESCRIPTION_PIECE = 2000\n# Characters that don't work well in Jira seqrches",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_LABEL_FOR_INTERMITTENT_FAILURES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_LABEL_FOR_INTERMITTENT_FAILURES = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_NEW_FAILURES          = 'junit-intermittent-failure'\nJIRA_LABEL_FOR_OLD_FAILURES          = 'junit-intermittent-failure'\nMAX_NUM_ATTACHMENTS_PER_JIRA_TICKET  = 8\n# Used to help prevent a Jira ticket from exceeding Jira's maximum\n# description size (32,767 characters, total)\nMAX_NUM_CHARS_PER_JIRA_DESCRIPTION  = 32767\nMAX_NUM_CHARS_PER_DESCRIPTION_PIECE = 2000\n# Characters that don't work well in Jira seqrches\nJIRA_SEARCH_PROBLEMATIC_CHARACTERS = '._'",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "MAX_NUM_CHARS_PER_DESCRIPTION_PIECE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "MAX_NUM_CHARS_PER_DESCRIPTION_PIECE = 2000\n# Characters that don't work well in Jira seqrches\nJIRA_SEARCH_PROBLEMATIC_CHARACTERS = '._'\n# Used in Jira ticket descriptions:\nDASHES = '-------------------------'\nSTACK_TRACE_LINE = '\\n'+DASHES+'\\-Stack Trace\\-'+DASHES+'\\n\\n'\nSEPARATOR_LINE   = '\\n'+DASHES+'--------------' +DASHES+'\\n\\n'\nJENKINS_JOBS = {\n    'branch-2-community-junit-master'         : {'nickname' : 'community-junit',  'label' : 'junit-community-failure'},\n    'branch-2-pro-junit-master'               : {'nickname' : 'pro-junit',        'label' : 'junit-pro-failure'},",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JIRA_SEARCH_PROBLEMATIC_CHARACTERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JIRA_SEARCH_PROBLEMATIC_CHARACTERS = '._'\n# Used in Jira ticket descriptions:\nDASHES = '-------------------------'\nSTACK_TRACE_LINE = '\\n'+DASHES+'\\-Stack Trace\\-'+DASHES+'\\n\\n'\nSEPARATOR_LINE   = '\\n'+DASHES+'--------------' +DASHES+'\\n\\n'\nJENKINS_JOBS = {\n    'branch-2-community-junit-master'         : {'nickname' : 'community-junit',  'label' : 'junit-community-failure'},\n    'branch-2-pro-junit-master'               : {'nickname' : 'pro-junit',        'label' : 'junit-pro-failure'},\n    'test-nextrelease-debug-pro'              : {'nickname' : 'debug-pro',        'label' : 'junit-debug-failure'},\n    'test-nextrelease-memcheck-pro'           : {'nickname' : 'memcheck-pro',     'label' : 'junit-memcheck-debug-failure'},",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "DASHES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "DASHES = '-------------------------'\nSTACK_TRACE_LINE = '\\n'+DASHES+'\\-Stack Trace\\-'+DASHES+'\\n\\n'\nSEPARATOR_LINE   = '\\n'+DASHES+'--------------' +DASHES+'\\n\\n'\nJENKINS_JOBS = {\n    'branch-2-community-junit-master'         : {'nickname' : 'community-junit',  'label' : 'junit-community-failure'},\n    'branch-2-pro-junit-master'               : {'nickname' : 'pro-junit',        'label' : 'junit-pro-failure'},\n    'test-nextrelease-debug-pro'              : {'nickname' : 'debug-pro',        'label' : 'junit-debug-failure'},\n    'test-nextrelease-memcheck-pro'           : {'nickname' : 'memcheck-pro',     'label' : 'junit-memcheck-debug-failure'},\n    'test-nextrelease-memcheck-nodebug-pro'   : {'nickname' : 'memcheck-nodebug', 'label' : 'junit-memcheck-failure'},\n    'test-nextrelease-fulljmemcheck-pro-junit': {'nickname' : 'fulljmemcheck',    'label' : 'junit-fulljmemcheck-failure'},",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "STACK_TRACE_LINE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "STACK_TRACE_LINE = '\\n'+DASHES+'\\-Stack Trace\\-'+DASHES+'\\n\\n'\nSEPARATOR_LINE   = '\\n'+DASHES+'--------------' +DASHES+'\\n\\n'\nJENKINS_JOBS = {\n    'branch-2-community-junit-master'         : {'nickname' : 'community-junit',  'label' : 'junit-community-failure'},\n    'branch-2-pro-junit-master'               : {'nickname' : 'pro-junit',        'label' : 'junit-pro-failure'},\n    'test-nextrelease-debug-pro'              : {'nickname' : 'debug-pro',        'label' : 'junit-debug-failure'},\n    'test-nextrelease-memcheck-pro'           : {'nickname' : 'memcheck-pro',     'label' : 'junit-memcheck-debug-failure'},\n    'test-nextrelease-memcheck-nodebug-pro'   : {'nickname' : 'memcheck-nodebug', 'label' : 'junit-memcheck-failure'},\n    'test-nextrelease-fulljmemcheck-pro-junit': {'nickname' : 'fulljmemcheck',    'label' : 'junit-fulljmemcheck-failure'},\n    'test-nextrelease-nonflaky-pro-junit'     : {'nickname' : 'nonflaky-pro',     'label' : 'junit-nonflaky-failure'},",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "JENKINS_JOBS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "JENKINS_JOBS = {\n    'branch-2-community-junit-master'         : {'nickname' : 'community-junit',  'label' : 'junit-community-failure'},\n    'branch-2-pro-junit-master'               : {'nickname' : 'pro-junit',        'label' : 'junit-pro-failure'},\n    'test-nextrelease-debug-pro'              : {'nickname' : 'debug-pro',        'label' : 'junit-debug-failure'},\n    'test-nextrelease-memcheck-pro'           : {'nickname' : 'memcheck-pro',     'label' : 'junit-memcheck-debug-failure'},\n    'test-nextrelease-memcheck-nodebug-pro'   : {'nickname' : 'memcheck-nodebug', 'label' : 'junit-memcheck-failure'},\n    'test-nextrelease-fulljmemcheck-pro-junit': {'nickname' : 'fulljmemcheck',    'label' : 'junit-fulljmemcheck-failure'},\n    'test-nextrelease-nonflaky-pro-junit'     : {'nickname' : 'nonflaky-pro',     'label' : 'junit-nonflaky-failure'},\n    'test-nextrelease-pool-community-junit'   : {'nickname' : 'pool-community',   'label' : 'junit-pool-community-failure'},\n    'test-nextrelease-pool-pro-junit'         : {'nickname' : 'pool-pro',         'label' : 'junit-pool-pro-failure'},",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "GOOD_URL_PREFIX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "GOOD_URL_PREFIX = 'ci.voltdb.lan:8080'\n# Used to count errors and warnings encountered during execution\nERROR_COUNT   = 0\nWARNING_COUNT = 0\n# Use to modify URLs by changing problematic characters into underscores\nfrom string import maketrans\nTT = maketrans(\"[]-<> \", \"______\")\n# Print a log (info) message after every group of this many test cases are processed\n# (in each \"run\" of a build, e.g. junit_other_p4 vs. junit_regression_h2)\nLOG_MESSAGE_EVERY_NUM_TEST_CASES = 200",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "WARNING_COUNT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "WARNING_COUNT = 0\n# Use to modify URLs by changing problematic characters into underscores\nfrom string import maketrans\nTT = maketrans(\"[]-<> \", \"______\")\n# Print a log (info) message after every group of this many test cases are processed\n# (in each \"run\" of a build, e.g. junit_other_p4 vs. junit_regression_h2)\nLOG_MESSAGE_EVERY_NUM_TEST_CASES = 200\n# TODO: possibly obsolete?? :\n# set threshold (greater than or equal to) of failures in a row to be significant\nFAIL_THRESHOLD = 2",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "TT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "TT = maketrans(\"[]-<> \", \"______\")\n# Print a log (info) message after every group of this many test cases are processed\n# (in each \"run\" of a build, e.g. junit_other_p4 vs. junit_regression_h2)\nLOG_MESSAGE_EVERY_NUM_TEST_CASES = 200\n# TODO: possibly obsolete?? :\n# set threshold (greater than or equal to) of failures in a row to be significant\nFAIL_THRESHOLD = 2\n# TODO: probably obsolete:\nQUERY1 = \"\"\"\n    SELECT count(*) AS fails",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "LOG_MESSAGE_EVERY_NUM_TEST_CASES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "LOG_MESSAGE_EVERY_NUM_TEST_CASES = 200\n# TODO: possibly obsolete?? :\n# set threshold (greater than or equal to) of failures in a row to be significant\nFAIL_THRESHOLD = 2\n# TODO: probably obsolete:\nQUERY1 = \"\"\"\n    SELECT count(*) AS fails\n    FROM `junit-test-failures` m\n    WHERE m.job = %(job)s\n        AND m.name = %(name)s",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "FAIL_THRESHOLD",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "FAIL_THRESHOLD = 2\n# TODO: probably obsolete:\nQUERY1 = \"\"\"\n    SELECT count(*) AS fails\n    FROM `junit-test-failures` m\n    WHERE m.job = %(job)s\n        AND m.name = %(name)s\n        AND m.status in ('FAILED', 'REGRESSION')\n        AND m.stamp > %(stamp)s - INTERVAL 30 DAY\n        AND m.build <= %(build)s",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "QUERY1",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "QUERY1 = \"\"\"\n    SELECT count(*) AS fails\n    FROM `junit-test-failures` m\n    WHERE m.job = %(job)s\n        AND m.name = %(name)s\n        AND m.status in ('FAILED', 'REGRESSION')\n        AND m.stamp > %(stamp)s - INTERVAL 30 DAY\n        AND m.build <= %(build)s\n\"\"\"\nQUERY2 = \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "QUERY2",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "QUERY2 = \"\"\"\n    SELECT count(*) AS fixes\n    FROM `junit-test-failures` m\n    WHERE m.job = %(job)s\n        AND m.name = %(name)s\n        AND m.status in ('FIXED')\n        AND m.stamp > %(stamp)s - INTERVAL 30 DAY\n        AND m.build <= %(build)s\n    HAVING fixes > 0\n    LIMIT 1",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "QUERY3",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "QUERY3 = \"\"\"\n    SELECT count(*) as runs\n    FROM `junit-builds` m\n    WHERE m.name = %(job)s\n        AND m.stamp > %(stamp)s - INTERVAL 30 DAY\n        AND m.stamp <= %(stamp)s\n\"\"\"\nQUERY4 = \"\"\"\n    SELECT job, build, name, ord-1-COALESCE(pre, 0) AS runs, current\n    FROM",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "QUERY4",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "description": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "peekOfCode": "QUERY4 = \"\"\"\n    SELECT job, build, name, ord-1-COALESCE(pre, 0) AS runs, current\n    FROM\n        (SELECT job, build, name, status, ord, stamp,\n                LAG(ord) OVER w2 AS pre,\n                LEAD(ord) OVER w2 AS post,\n                (SELECT last-MAX(ord)\n                FROM\n                    (SELECT job, name, status, stamp,\n                            ROW_NUMBER() OVER w1 AS ord,",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.junit-stats",
        "documentation": {}
    },
    {
        "label": "VJenkins",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "description": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "peekOfCode": "class VJenkins(jenkins.Jenkins) :\n    def get_node_data(self,retry=10):\n        '''Get a list of nodes connected to the Master\n        Each node is a dict with keys 'name' and 'offline'\n        :returns: List of nodes, ``[ { str: str, str: bool} ]``\n        '''\n        try:\n            data = self.jenkins_open(Request(self._build_url(NODE_LIST_INFO)));\n            #print(\"data:\"+str(data))\n            nodes_data = json.loads(data)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "documentation": {}
    },
    {
        "label": "Controller",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "description": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "peekOfCode": "class Controller() :\n    def __init__(self) :\n        # the first node of the controllers\n        self.master = None;\n        # a list of nodes that are part of this controller\n        self.slaves = [];\n        self.reason = None;\nclass Resv() :\n    # you may need to install the following pip modules:\n    # multi_key_dict",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "documentation": {}
    },
    {
        "label": "Resv",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "description": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "peekOfCode": "class Resv() :\n    # you may need to install the following pip modules:\n    # multi_key_dict\n    # pbr\n    # python-jenkins\n    # six\n    # if the modules are installed locally, you can will need to add them to your PYTHONPATH as follows:\n    # export PYTHONPATH=~/jenkins/python-jenkins-0.4.12/\n    # if you have 'six' already install on your MAC, you may need to override it's installation as follows:\n    # sudo pip install --upgrade six --ignore-install  # the --ignore-install because it's already installed",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "documentation": {}
    },
    {
        "label": "NODE_LIST_INFO",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "description": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "peekOfCode": "NODE_LIST_INFO = 'computer/api/json?depth=2'\nNODE_STATE_BUSY = 'busy'\nclass VJenkins(jenkins.Jenkins) :\n    def get_node_data(self,retry=10):\n        '''Get a list of nodes connected to the Master\n        Each node is a dict with keys 'name' and 'offline'\n        :returns: List of nodes, ``[ { str: str, str: bool} ]``\n        '''\n        try:\n            data = self.jenkins_open(Request(self._build_url(NODE_LIST_INFO)));",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "documentation": {}
    },
    {
        "label": "NODE_STATE_BUSY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "description": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "peekOfCode": "NODE_STATE_BUSY = 'busy'\nclass VJenkins(jenkins.Jenkins) :\n    def get_node_data(self,retry=10):\n        '''Get a list of nodes connected to the Master\n        Each node is a dict with keys 'name' and 'offline'\n        :returns: List of nodes, ``[ { str: str, str: bool} ]``\n        '''\n        try:\n            data = self.jenkins_open(Request(self._build_url(NODE_LIST_INFO)));\n            #print(\"data:\"+str(data))",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.resv",
        "documentation": {}
    },
    {
        "label": "Issues",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "class Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)\n    def read_url(self, url):\n        data = None\n        try:\n            data = urlopen(url).read()\n        except (HTTPError, URLError):\n            logging.exception('Could not open data from url: %s. The url may not be formed correctly.' % url)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "JIRA_USER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "JIRA_USER = os.environ.get('jirauser', None)\nJIRA_PASS = os.environ.get('jirapass', None)\nJIRA_PROJECT = os.environ.get('jiraproject', None)\njob = 'test-nextrelease-sql-grammar-gen'\n# Set to true to avoid updating Jira\nDRY_RUN = False\nclass Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "JIRA_PASS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "JIRA_PASS = os.environ.get('jirapass', None)\nJIRA_PROJECT = os.environ.get('jiraproject', None)\njob = 'test-nextrelease-sql-grammar-gen'\n# Set to true to avoid updating Jira\nDRY_RUN = False\nclass Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)\n    def read_url(self, url):",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "JIRA_PROJECT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "JIRA_PROJECT = os.environ.get('jiraproject', None)\njob = 'test-nextrelease-sql-grammar-gen'\n# Set to true to avoid updating Jira\nDRY_RUN = False\nclass Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)\n    def read_url(self, url):\n        data = None",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "job",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "job = 'test-nextrelease-sql-grammar-gen'\n# Set to true to avoid updating Jira\nDRY_RUN = False\nclass Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)\n    def read_url(self, url):\n        data = None\n        try:",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "DRY_RUN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "peekOfCode": "DRY_RUN = False\nclass Issues(object):\n    def __init__(self):\n        self.jhost = 'http://ci.voltdb.lan'\n        logging.basicConfig(stream=sys.stdout)\n    def read_url(self, url):\n        data = None\n        try:\n            data = urlopen(url).read()\n        except (HTTPError, URLError):",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql-grammar-reporter",
        "documentation": {}
    },
    {
        "label": "Reporter",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "peekOfCode": "class Reporter(Issues):\n    def build_description(self, name, url, stats):\n        description = name + '\\n'\n        description += \\\n            'SQL Statements:\\n' \\\n            + ' : Valid=' + str(stats['valid_statements']) + ' (' + stats['valid_percent'] + '%)' \\\n            + ' : Invalid=' + str(stats['invalid_statements']) + ' (' + stats['invalid_percent'] + '%)' \\\n            + ' : Total=' + str(stats['total_statements']) + '\\n' \\\n            + 'Test Failures:\\n' \\\n            + ' : Mismatched=' + str(stats['mismatched_statements']) + ' (' + stats['mismatched_percent'] + '%)\\n' \\",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "documentation": {}
    },
    {
        "label": "DRY_RUN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "description": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "peekOfCode": "DRY_RUN = False\nclass Reporter(Issues):\n    def build_description(self, name, url, stats):\n        description = name + '\\n'\n        description += \\\n            'SQL Statements:\\n' \\\n            + ' : Valid=' + str(stats['valid_statements']) + ' (' + stats['valid_percent'] + '%)' \\\n            + ' : Invalid=' + str(stats['invalid_statements']) + ' (' + stats['invalid_percent'] + '%)' \\\n            + ' : Total=' + str(stats['total_statements']) + '\\n' \\\n            + 'Test Failures:\\n' \\",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.sql_coverage_reporter",
        "documentation": {}
    },
    {
        "label": "map_repo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "def map_repo(url, branch):\n    for r in repos.iterkeys():\n        if r in url:\n            repos[r] = branch.split('origin/')[-1]\nsv_prefix = 'kit_'\noutfile = 'workspace_params.properties'\nif len(sys.argv) == 2:\n    outfile = sys.argv[1]\n#Set up the stored_vars_map (some might not be set)\nstored_vars_map = {}",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "repos",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "repos = dict(internal='unknown',voltdb='unknown', pro='unknown')\ndef map_repo(url, branch):\n    for r in repos.iterkeys():\n        if r in url:\n            repos[r] = branch.split('origin/')[-1]\nsv_prefix = 'kit_'\noutfile = 'workspace_params.properties'\nif len(sys.argv) == 2:\n    outfile = sys.argv[1]\n#Set up the stored_vars_map (some might not be set)",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "sv_prefix",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "sv_prefix = 'kit_'\noutfile = 'workspace_params.properties'\nif len(sys.argv) == 2:\n    outfile = sys.argv[1]\n#Set up the stored_vars_map (some might not be set)\nstored_vars_map = {}\nfor jv in jenkins_vars:\n    sv = sv_prefix + jv.lower()\n    if jv in os.environ:\n        stored_vars_map[sv] = os.environ[jv]",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "outfile",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "outfile = 'workspace_params.properties'\nif len(sys.argv) == 2:\n    outfile = sys.argv[1]\n#Set up the stored_vars_map (some might not be set)\nstored_vars_map = {}\nfor jv in jenkins_vars:\n    sv = sv_prefix + jv.lower()\n    if jv in os.environ:\n        stored_vars_map[sv] = os.environ[jv]\n    else:",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "stored_vars_map",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "stored_vars_map = {}\nfor jv in jenkins_vars:\n    sv = sv_prefix + jv.lower()\n    if jv in os.environ:\n        stored_vars_map[sv] = os.environ[jv]\n    else:\n        print(\"missing env var '%s', setting to 'unknown'\" % jv)\n        stored_vars_map[sv] = 'unknown'\nmap_repo(stored_vars_map['kit_git_url'], stored_vars_map['kit_git_branch'])\n#Map all additional git repos",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "branch",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "branch = repos['voltdb']\nif repos['voltdb'] == \"unknown\":\n   branch = repos['internal']\nif repos['voltdb'] != repos['pro'] and repos['internal'] != repos['pro']:\n    branch += (\"/\" + repos['pro'])\nstored_vars_map['BRANCH'] = branch\nwith open (outfile,'w') as f:\n    for sv in stored_vars_map:\n        f.write( sv + '=' +  stored_vars_map[sv] + '\\n')",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "stored_vars_map['BRANCH']",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "description": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "peekOfCode": "stored_vars_map['BRANCH'] = branch\nwith open (outfile,'w') as f:\n    for sv in stored_vars_map:\n        f.write( sv + '=' +  stored_vars_map[sv] + '\\n')",
        "detail": "github.com.voltdb.voltdb.tools.jenkins.write_kit_properties",
        "documentation": {}
    },
    {
        "label": "repoCheckout",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def repoCheckout(repo, treeish):\n    #Try a shallow clone (only works with branch names)\n    print \"Trying a shallow single branch clone\"\n    result = run(\"git clone -q %s --depth=1 --branch %s --single-branch \"% (repo, treeish), warn_only=True)\n    if result.failed:\n        #Maybe it was a sha and needs a full clone\n        try:\n            #Check if it is hex\n            int(treeish, 16)\n        except ValueError:",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "checkoutCode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def checkoutCode(voltdbGit, proGit, gitloc):\n    global buildir\n    # clean out the existing dir\n    run(\"rm -rf \" + builddir)\n    # make the build dir again\n    run(\"mkdir -p \" + builddir)\n    # change to it\n    with cd(builddir):\n        # do the checkouts, collect checkout errors on both community &\n        # pro repos so user gets status on both checkouts",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "makeReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def makeReleaseDir(releaseDir):\n    # handle the case where a release dir exists for this version\n    if os.path.exists(releaseDir):\n        shutil.rmtree(releaseDir)\n    # create a release dir\n    os.makedirs(releaseDir)\n    local(\"chmod 755 %s\" % releaseDir)\n    print \"Created dir: \" + releaseDir\n################################################\n# BUILD THE COMMUNITY VERSION",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "buildCommunity",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def buildCommunity(edition_type, ee_only=False):\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"/internal\"):\n        run(\"pwd\")\n        run(\"git status\")\n        if ee_only:\n            run(\"ant -Dvoltdb_editiontype=%s -Djmemcheck=NO_MEMCHECK -Dkitbuild=%s %s clean ee\" % (edition_type, packageMacLib, build_args))",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "buildEnterprise",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def buildEnterprise(version):\n    licensee=\"VoltDB Enterprise Trial User \" + version\n    if build_mac:\n        packageMacLib=\"true\"\n    else:\n        packageMacLib=\"false\"\n    with cd(builddir + \"/pro\"):\n        run(\"pwd\")\n        run(\"git status\")\n        run(\"VOLTCORE=../internal ant -f mmt.xml \\",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "makeTrialLicense",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def makeTrialLicense(licensee, days=30, dr_and_xdcr=\"true\", nodes=12):\n    timestring = datetime.datetime.now().strftime(\"%Y-%m-%d-%H%M%S\")\n    filename = 'trial_' + timestring + '.xml'\n    drtype = 'XDCR' if dr_and_xdcr else 'none'\n    with cd(builddir + \"/pro\"):\n        run(\"ant -f licensetool.xml createlicense \\\n        -Dfilename=%s -Dlicensetype='Trial' -DisTrial=true \\\n        -DdrType=%s -Dlicensedays=%d -Dlicensee='%s' \\\n        -Dnote='VoltDB Internal Use Only'\" % (filename, drtype, days, licensee))\n        return filename",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "makeSHA256SUM",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def makeSHA256SUM(version, type):\n    with cd(builddir + \"/pro/obj/pro\"):\n        kitname=\"voltdb-\" +  type + \"-\" + version\n        run(\"sha256sum -b %s.tar.gz > %s.SHA256SUM\" % (kitname, kitname))\n################################################\n# MAKE AN JAR FILES NEEDED TO PUSH TO MAVEN\n################################################\ndef makeMavenJars():\n    with cd(builddir + \"/internal\"):\n        run(\"VOLTCORE=../internal ant -f build.xml maven-jars\")",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "makeMavenJars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def makeMavenJars():\n    with cd(builddir + \"/internal\"):\n        run(\"VOLTCORE=../internal ant -f build.xml maven-jars\")\n        run(\"VOLTCORE=../internal ant -f build-client.xml maven-jars\")\n################################################\n# COPY FILES\n################################################\ndef copyFilesToReleaseDir(releaseDir, version, type=None):\n    print \"Copying files to releaseDir\"\n    if type:",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "copyFilesToReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def copyFilesToReleaseDir(releaseDir, version, type=None):\n    print \"Copying files to releaseDir\"\n    if type:\n        typeString=\"-\" + type\n    else:\n        typeString=\"\"\n    get(\"%s/pro/obj/pro/voltdb%s-%s.tar.gz\" % (builddir, typeString, version),\n        \"%s/voltdb%s-%s.tar.gz\" % (releaseDir, typeString, version))\n    get(\"%s/pro/obj/pro/voltdb%s-%s.SHA256SUM\" % (builddir, typeString, version),\n        \"%s/voltdb%s-%s.SHA256SUM\" % (releaseDir, typeString, version))",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "copyCommunityFilesToReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def copyCommunityFilesToReleaseDir(releaseDir, version, edition_type, operatingsys):\n    get(\"%s/internal/obj/release/voltdb-%s-%s.tar.gz\" % (builddir, edition_type, version),\n        \"%s/voltdb-%s-%s.tar.gz\" % (releaseDir, edition_type, version))\n    # add stripped symbols\n    if operatingsys == \"LINUX\":\n        os.makedirs(releaseDir + \"/other\")\n        get(\"%s/internal/obj/release/voltdb-%s.sym\" % (builddir, version),\n            \"%s/other/%s-voltdb-voltkv-%s.sym\" % (releaseDir, operatingsys, version))\ndef copyTrialLicenseToReleaseDir(licensefile, releaseDir):\n    get(licensefile,",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "copyTrialLicenseToReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def copyTrialLicenseToReleaseDir(licensefile, releaseDir):\n    get(licensefile,\n        \"%s/license.xml\" % (releaseDir))\ndef copyMavenJarsToReleaseDir(releaseDir, version):\n    #The .jars and upload file must be in a directory called voltdb - it is the projectname\n    mavenProjectDir = releaseDir + \"/mavenjars/voltdb\"\n    if not os.path.exists(mavenProjectDir):\n        os.makedirs(mavenProjectDir)\n    #Get the upload.gradle file\n    get(\"%s/internal/tools/kit_tools/upload.gradle\" % (builddir),",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "copyMavenJarsToReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def copyMavenJarsToReleaseDir(releaseDir, version):\n    #The .jars and upload file must be in a directory called voltdb - it is the projectname\n    mavenProjectDir = releaseDir + \"/mavenjars/voltdb\"\n    if not os.path.exists(mavenProjectDir):\n        os.makedirs(mavenProjectDir)\n    #Get the upload.gradle file\n    get(\"%s/internal/tools/kit_tools/upload.gradle\" % (builddir),\n        \"%s/upload.gradle\" % (mavenProjectDir))\n    #Get the voltdbclient-n.n.jar from the recently built community build\n    get(\"%s/internal/obj/release/dist-client-java/voltdb/voltdbclient-%s.jar\" % (builddir, version),",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "createCandidateSysmlink",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def createCandidateSysmlink(releaseDir):\n    candidateDir =  os.getenv('HOME') + \"/releases/candidate\";\n    local(\"rm -rf \" + candidateDir)\n    local(\"ln -s %s %s\" % (releaseDir, candidateDir))\n################################################\n# BACKUP RELEASE DIR\n################################################\ndef backupReleaseDir(releaseDir,archiveDir,version):\n    if not os.path.exists(archiveDir):\n        os.makedirs(archiveDir)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "backupReleaseDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def backupReleaseDir(releaseDir,archiveDir,version):\n    if not os.path.exists(archiveDir):\n        os.makedirs(archiveDir)\n    # make a backup with the timstamp of the  build\n    timestamp = datetime.datetime.now().strftime(\"%y%m%d-%H%M%S\")\n    local(\"tar -czf %s/%s-%s.tgz %s\" \\\n          % (archiveDir, version, timestamp, releaseDir))\n################################################\n# REMOVE NATIVE LIBS FROM SHARED DIRECTORY\n################################################",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "rmNativeLibs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "def rmNativeLibs():\n    # local(\"ls -l ~\" + username + nativelibdir)\n    local(\"rm -rf ~\" + username + nativelibdir)\n################################################\n# GET THE GIT TAGS OR SHAS TO BUILD FROM\n################################################\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description = \"Create a full kit. With no args, will do build of master\")\n    parser.add_argument('voltdb_sha', nargs=\"?\", default=\"master\", help=\"voltdb repository commit, tag or branch\" )\n    parser.add_argument('pro_sha', nargs=\"?\", default=\"master\", help=\"pro repository commit, tag or branch\" )",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "username = 'test'\nbuilddir = \"/tmp/\" + getpass.getuser() + \"Kits/buildtemp\"\nversion = \"UNKNOWN\"\nnativelibdir = \"/nativelibs/obj\"  #  ~test/libs/... usually\ndefaultlicensedays = 70 #default trial license length\n################################################\n# Single repo checkout\n################################################\n# Try to checkout shallow\n# If it's a sha, this won't work, so try that",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "builddir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "builddir = \"/tmp/\" + getpass.getuser() + \"Kits/buildtemp\"\nversion = \"UNKNOWN\"\nnativelibdir = \"/nativelibs/obj\"  #  ~test/libs/... usually\ndefaultlicensedays = 70 #default trial license length\n################################################\n# Single repo checkout\n################################################\n# Try to checkout shallow\n# If it's a sha, this won't work, so try that\n# Returns checkout Success (boolean)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "version = \"UNKNOWN\"\nnativelibdir = \"/nativelibs/obj\"  #  ~test/libs/... usually\ndefaultlicensedays = 70 #default trial license length\n################################################\n# Single repo checkout\n################################################\n# Try to checkout shallow\n# If it's a sha, this won't work, so try that\n# Returns checkout Success (boolean)\ndef repoCheckout(repo, treeish):",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "nativelibdir",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "nativelibdir = \"/nativelibs/obj\"  #  ~test/libs/... usually\ndefaultlicensedays = 70 #default trial license length\n################################################\n# Single repo checkout\n################################################\n# Try to checkout shallow\n# If it's a sha, this won't work, so try that\n# Returns checkout Success (boolean)\ndef repoCheckout(repo, treeish):\n    #Try a shallow clone (only works with branch names)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "defaultlicensedays",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "peekOfCode": "defaultlicensedays = 70 #default trial license length\n################################################\n# Single repo checkout\n################################################\n# Try to checkout shallow\n# If it's a sha, this won't work, so try that\n# Returns checkout Success (boolean)\ndef repoCheckout(repo, treeish):\n    #Try a shallow clone (only works with branch names)\n    print \"Trying a shallow single branch clone\"",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_kits",
        "documentation": {}
    },
    {
        "label": "vm_start",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_start():\n    \"\"\"\n    Start vm $VMX. Will start VMware if not already running\n    \"\"\"\n    _get_vmx()\n    local('export DISPLAY=%s;vmrun -T ws start %s' % (os.environ['DISPLAY'],vmx))\n@task\ndef vm_clone(newvmx, clonename):\n    \"\"\"\n    Clone vm $VMX. Usage: vm_clone:newvmx,clonename",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_clone",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_clone(newvmx, clonename):\n    \"\"\"\n    Clone vm $VMX. Usage: vm_clone:newvmx,clonename\n    \"\"\"\n    _get_vmx()\n    if not newvmx or not clonename:\n        exit('FATAL: You must specify a new vmx (newvmx) and a new name (clonename)')\n    newvmx=os.path.abspath(os.path.expanduser(newvmx))\n    local('vmrun -T ws clone %s %s full --cloneName=\"%s\"' % (vmx, newvmx, clonename))\n@task",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_stop",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_stop():\n    \"\"\"\n    Stop vm $VMX.\n    \"\"\"\n    if not vmx:\n        exit('FATAL: You must set VMX in your environment')\n    local(\"vmrun -T ws stop %s\" % (vmx))\n@task\ndef vm_cmd(cmd, quiet=False):\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_cmd(cmd, quiet=False):\n    \"\"\"\n    Run a bash command or script on $VMX. Usage: vm_cmd:cmd,[quiet=True]\n    \"\"\"\n    _get_vmx()\n    tf=tempfile.NamedTemporaryFile(prefix='vmrun-')\n    tf.close()\n    with hide('stderr'):\n        local('vmrun -T ws -gu %s -gp %s runScriptInGuest %s /bin/bash \"%s > %s 2>&1\"' % (\n                user, password, vmx, cmd, tf.name))",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_getfile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_getfile(source, dest=\".\"):\n    \"\"\"\n    Copy a file from guest to host. Usage: vm_getfile:source,destfile|destdir\n    \"\"\"\n    _get_vmx()\n    dest = os.path.expanduser(dest)\n    if os.path.isdir(dest):\n        dest = os.path.join(dest, os.path.basename(source))\n    else:\n        dest = os.path.abspath(dest)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_putfile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_putfile(source, dest=\".\"):\n    \"\"\"\n    Copy a file from host to guest. Usage: vm_getfile:source,destfile|destdir\n    \"\"\"\n    _get_vmx()\n    if os.path.isdir(dest):\n        dest = os.path.join(dest,os.path.basename(source))\n    else:\n        dest = os.path.abspath(os.path.expanduser(dest))\n    source=os.path.abspath(source)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_update",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_update(version):\n    \"\"\"\n    Do all the updates needed on the VM. Usage vm_update:version\n    \"\"\"\n    _get_vmx()\n    #Update\n    #TODO: Make this work from anywhere. Right now it expects you to be in kit_tools\n    login_script='demo-vmware-login.sh'\n    vm_putfile(login_script, '/home/voltdb/.voltdbprofile')\n    #Copy voltupdate.sh to the guest OS and run it. This script does all the heavy lifting",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vm_zerofilldisk",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vm_zerofilldisk(vmdk):\n    \"\"\"\n    Mount, zerofill, unmount a vmdk: Usage: vm_zerofill:vmxdir\n    \"\"\"\n    #TODO: Check if disk is already mounted\n    _get_vmx()\n    vmdir = os.path.dirname(vmx)\n    local ('du -hs ' + vmdir)\n    try:\n        #Mount device locally",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vmdk_compressdisk",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vmdk_compressdisk(vmdk):\n    \"\"\"\n    Compress a virtual disk. Usage: vm_compressdisk:vmdk\n    \"\"\"\n#shrink the disk\n    local('vmware-vdiskmanager -k %s' % (vmdk))\n@task\ndef vmdk_mountlocal(vmdk, partition, mountpoint='/mnt/vmdk'):\n    \"\"\"\n    Mount vm disk partition on localhost. Usage: vmdk_mountlocal:vmdk,partition#,mountpoint,owner",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vmdk_mountlocal",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vmdk_mountlocal(vmdk, partition, mountpoint='/mnt/vmdk'):\n    \"\"\"\n    Mount vm disk partition on localhost. Usage: vmdk_mountlocal:vmdk,partition#,mountpoint,owner\n    \"\"\"\n    me =  pwd.getpwuid(os.getuid())[0]\n    print 'sudo chown %s %s' % (me, mountpoint)\n    #owner = os.getlogin()\n    local('sudo mkdir -p %s' % mountpoint)\n    local('sudo vmware-mount %s %s %s' % (vmdk, partition, mountpoint))\n    local('sudo chown %s %s' % (me, mountpoint))",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "vmdk_unmountlocal",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def vmdk_unmountlocal(mountpoint='/mnt/vmdk'):\n    \"\"\"\n    Unmount the local vm disk. Usage: vmdk_unmountlocal:mountpoint\n    \"\"\"\n    local('sudo vmware-mount -d %s' % mountpoint)\n@task\ndef zip_write(path, outfile, chdir=''):\n    cdcmd=''\n    if chdir:\n        cdcmd = 'cd %s;' % chdir",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "zip_write",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def zip_write(path, outfile, chdir=''):\n    cdcmd=''\n    if chdir:\n        cdcmd = 'cd %s;' % chdir\n    local('%s zip -r %s %s' % (cdcmd, outfile, path))\n    return\n@task\ndef zip_read(path, chdir=''):\n    cdcmd=''\n    if chdir:",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "zip_read",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def zip_read(path, chdir=''):\n    cdcmd=''\n    if chdir:\n        cdcmd = 'cd %s;' % chdir\n    local('%s unzip -o %s' % (cdcmd, path))\n    return\n@task\ndef clean_and_pack_vmimage():\n    _get_vmx()\n    #Stop",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "clean_and_pack_vmimage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def clean_and_pack_vmimage():\n    _get_vmx()\n    #Stop\n    _print_line()\n    print \"Stopping VM\"\n    try:\n        vm_stop()\n    except:\n        print \"This VM was already stopped\"\n    newvmdir = os.path.dirname(vmx)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "start_from_update",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def start_from_update(version):\n    \"\"\"\n    Run all the steps to update $VMX.  Usage: restart_from_update:version\n    \"\"\"\n    _print_line()\n    print \"Updating new VM with V\" + version\n    vm_update(version)\n    clean_and_pack_vmimage()\n    #Start\n    _print_line()",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "make_new_vmimage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "peekOfCode": "def make_new_vmimage(version,oldvmdir=None):\n    \"\"\"\n    Run all the steps to make a new vmware image from an old one.  Usage: make_new_vmimage:version,oldvmdirectory\n    \"\"\"\n    #get and unpack a vm from voltdb website, if necessary\n    if not oldvmdir:\n        exit(\"Usage: make_new_vmimage:version,oldvmdir\")\n        #TODO: Make this work some day.\n        import urllib\n        import zipfile",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.build_new_vmware",
        "documentation": {}
    },
    {
        "label": "getSSHInfoForHost",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.fabric_ssh_config",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.fabric_ssh_config",
        "peekOfCode": "def getSSHInfoForHost(host):\n    \"\"\" Inspired by:\n        http://markpasc.typepad.com/blog/2010/04/loading-ssh-config-settings-for-fabric.html \"\"\"\n    from os.path import expanduser\n    from paramiko.config import SSHConfig\n    key = None\n    key_filename = None\n    host = host\n    def hostinfo(host, config):\n        hive = config.lookup(host)",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.fabric_ssh_config",
        "documentation": {}
    },
    {
        "label": "str_option_to_bool",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "peekOfCode": "def str_option_to_bool(opt):\n    if opt in ('True', 'true', '1', 1, 'on', True):\n        return True\n    elif opt in ('False', 'false', '0', 0, 'off', False):\n        return False\n    else:\n        raise \"invalid option setting\"\ndef upload_kits(version,\n                editionType=\"community\",\n                upload_type=\"ent\",",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "documentation": {}
    },
    {
        "label": "upload_kits",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "peekOfCode": "def upload_kits(version,\n                editionType=\"community\",\n                upload_type=\"ent\",\n                remote_dir=\"/var/www/downloads.voltdb.com/technologies/server\",\n                kit_dir=\"/home/test/releases/released\",\n                dry_run='False'):\n    \"\"\" Upload kits to the voltdb download site.\n        Args:\n            version - version number such as 7.1.2\n            upload_type - upload types are \"ent\" (only ent kit) and \"all\" for all kits",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "documentation": {}
    },
    {
        "label": "sshinfo",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "description": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "peekOfCode": "sshinfo = getSSHInfoForHost(env.hosts[0])\ndef str_option_to_bool(opt):\n    if opt in ('True', 'true', '1', 1, 'on', True):\n        return True\n    elif opt in ('False', 'false', '0', 0, 'off', False):\n        return False\n    else:\n        raise \"invalid option setting\"\ndef upload_kits(version,\n                editionType=\"community\",",
        "detail": "github.com.voltdb.voltdb.tools.kit_tools.upload_kits",
        "documentation": {}
    },
    {
        "label": "cmd_readlines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "def cmd_readlines(cmd):\n    \"Run a shell command and get the output as a list of lines\"\n    fd = os.popen(cmd)\n    retval = fd.readlines()\n    fd.close()\n    return retval\ndef killProcess(p):\n    \"Kill all processes for this user named 'LBDLockPatternTest'\"\n    # get all the java processes for this user\n    javaprocs = cmd_readlines(\"jps\")",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "killProcess",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "def killProcess(p):\n    \"Kill all processes for this user named 'LBDLockPatternTest'\"\n    # get all the java processes for this user\n    javaprocs = cmd_readlines(\"jps\")\n    # split them into (pid, name) tuples\n    javaprocs = [line.split() for line in javaprocs]\n    # throw out any with no name\n    javaprocs = [t for t in javaprocs if len(t) > 1]\n    # find pids for processes with the right name\n    javaprocs = [int(t[0]) for t in javaprocs if t[1].startswith(\"LBDLockPatternTest\")]",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "blockUntilInput",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "def blockUntilInput(f):\n    \"Assuming f is non blocking, block until you can read a line from it\"\n    while True:\n        try: f.readline(); return\n        except: time.sleep(0.1)\n# make stdin non-blocking\nfd = sys.stdin.fileno()\nfl = fcntl.fcntl(fd, fcntl.F_GETFL)\nfcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n# compile the java code we need (assuming it's in the same folder)",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "runTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "def runTest(i):\n    \"\"\"Start a subprocess that runs the java reproducer. If it hangs, let the user know and\n       leave the subprocess process running until the user presses a key. If it runs for\n       DURATION_IN_SECONDS seconds without hanging, kill the subprocess and repeat.\"\"\"\n    print \"\\nBeginning run %d for %d seconds. Press ENTER or RETURN to end the test.\\n\" % (i, DURATION_IN_SECONDS)\n    p = Popen(\"java LBDLockPatternTest\", shell=True, bufsize=0, stdout=PIPE)\n    # make the process's output non-blocking\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "DURATION_IN_SECONDS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "DURATION_IN_SECONDS = 240\ndef cmd_readlines(cmd):\n    \"Run a shell command and get the output as a list of lines\"\n    fd = os.popen(cmd)\n    retval = fd.readlines()\n    fd.close()\n    return retval\ndef killProcess(p):\n    \"Kill all processes for this user named 'LBDLockPatternTest'\"\n    # get all the java processes for this user",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "fd",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "fd = sys.stdin.fileno()\nfl = fcntl.fcntl(fd, fcntl.F_GETFL)\nfcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n# compile the java code we need (assuming it's in the same folder)\nprint \"Compiling Java Reprodcuer...\"\noutput = os.system(\"javac LBDLockPatternTest.java\")\nif output == 0:\n    print \"Success\"\nelse:\n    print \"Failed to compile reproducer.\"",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "fl",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "fl = fcntl.fcntl(fd, fcntl.F_GETFL)\nfcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n# compile the java code we need (assuming it's in the same folder)\nprint \"Compiling Java Reprodcuer...\"\noutput = os.system(\"javac LBDLockPatternTest.java\")\nif output == 0:\n    print \"Success\"\nelse:\n    print \"Failed to compile reproducer.\"\n    print \"Check the output of \\\"javac LBDLockPatternTest.java\\\" from your shell.\"",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "output = os.system(\"javac LBDLockPatternTest.java\")\nif output == 0:\n    print \"Success\"\nelse:\n    print \"Failed to compile reproducer.\"\n    print \"Check the output of \\\"javac LBDLockPatternTest.java\\\" from your shell.\"\n    sys.exit(-1)\ndef runTest(i):\n    \"\"\"Start a subprocess that runs the java reproducer. If it hangs, let the user know and\n       leave the subprocess process running until the user presses a key. If it runs for",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "description": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "peekOfCode": "i = 1\nwhile runTest(i):\n    i += 1",
        "detail": "github.com.voltdb.voltdb.tools.lbd_lock_test.testrunner",
        "documentation": {}
    },
    {
        "label": "Global",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "class Global:\n    \"\"\"\n    Globals.\n    \"\"\"\n    # Regular expression to parse a MySQL type.\n    re_type = re.compile(\n            # Whitespace\n            r'^\\s'\n            # Token (group 1)\n            r'*\\b([a-z0-9_ ]+)\\b'",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "MySQLTable",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "class MySQLTable(object):\n    def __init__(self, schema, row_count):\n        self.schema = schema\n        self.row_count = row_count\n        self.name = schema.name\n        self.primary_key_columns = []\n        for column_name in self.schema.columns:\n            column = self.schema.columns[column_name]\n            if column.key == 'PRI':\n                self.primary_key_columns.append(column)",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "PartitionedTable",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "class PartitionedTable(object):\n    def __init__(self, table, pkey_column_name, reason_chosen):\n        self.table = table\n        self.name = table.name\n        self.pkey_column_name = pkey_column_name\n        self.reason_chosen = reason_chosen\nclass MySQLSchemaGenerator(object):\n    def __init__(self, uri, partition_table):\n        self.uri = uri\n        self.partition_table_name = partition_table",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "MySQLSchemaGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "class MySQLSchemaGenerator(object):\n    def __init__(self, uri, partition_table):\n        self.uri = uri\n        self.partition_table_name = partition_table\n        self.formatter = utility.CodeFormatter(vcomment_prefix=Global.vcomment_prefix)\n        # Initialized in initialize()\n        self.schema = None\n        self.database = None\n        # Maps table names to MySQLTable objects.\n        self.tables = {}",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "def initialize():\n    \"\"\"\n    Perform various one-time initializations.\n    \"\"\"\n    if MySQLdb is None:\n        initialize_mysql_imports()\ndef initialize_mysql_imports():\n    \"\"\"\n    Perform the delayed MySQL module imports.\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "initialize_mysql_imports",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "def initialize_mysql_imports():\n    \"\"\"\n    Perform the delayed MySQL module imports.\n    \"\"\"\n    try:\n        import MySQLdb as MySQLdb_\n        global MySQLdb\n        MySQLdb = MySQLdb_\n    except ImportError, e:\n        msgs = [",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "generate_schema",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "def generate_schema(uri, partition_table, output_stream):\n    initialize()\n    schema_generator = MySQLSchemaGenerator(uri, partition_table)\n    schema_generator.write_schema(output_stream)\n    return schema_generator\ndef fix_name(name):\n    if name.upper() not in KEYWORDS:\n        return name\n    return '%s_' % name\nclass MySQLTable(object):",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "fix_name",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "def fix_name(name):\n    if name.upper() not in KEYWORDS:\n        return name\n    return '%s_' % name\nclass MySQLTable(object):\n    def __init__(self, schema, row_count):\n        self.schema = schema\n        self.row_count = row_count\n        self.name = schema.name\n        self.primary_key_columns = []",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "convert_type",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "def convert_type(mysql_type):\n    \"\"\"\n    Convert MySQL type to VoltDB type.\n    Return (volt_type, message)\n    message is a string with information about conversion issues when they occur.\n    \"\"\"\n    m = Global.re_type.match(mysql_type)\n    if not m:\n        return 'VARCHAR(50)', MESSAGES.PARSE_ERROR\n    # Normalize compound names with arbitrary spacing,",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "MySQLdb = None\n# Find and import the voltdb-patched schemaobject module.\n# It should be in third_party/python/schemaobject.\n# Prepend it to the Python path so that it overrides any local unpatched copy.\nif environment.third_party_python is None:\n    utility.abort('Third party python libraries are not available')\nschemaobject_path = os.path.join(environment.third_party_python, 'schemaobject')\nsys.path.insert(0, schemaobject_path)\nimport schemaobject\n# IMPORTANT: Any name being generated needs to be post-processed with",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "schemaobject_path",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "schemaobject_path = os.path.join(environment.third_party_python, 'schemaobject')\nsys.path.insert(0, schemaobject_path)\nimport schemaobject\n# IMPORTANT: Any name being generated needs to be post-processed with\n# fix_name() at the point where the DDL is being output, but no sooner. All\n# schema lookups are with un-fixed symbols, but all names that conflict with\n# keywords need to be tweaked upon output.\nclass Global:\n    \"\"\"\n    Globals.",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "MESSAGES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "MESSAGES = utility.MessageDict(\n    WIDTH_PARAM = 'Width parameter is not supported.',\n    MEDIUM_INT = '3 byte integer was expanded to 4 bytes.',\n    PREC_PARAMS = 'Precision and scale parameters are not supported.',\n    BIT_TYPE = 'BIT type was replaced by VARBINARY.',\n    DATE_TIME = 'Date/time type was replaced by TIMESTAMP.',\n    ENUM = 'ENUM type was replaced by VARCHAR.',\n    SET = 'SET type was replaced by VARCHAR.',\n    CHAR = 'CHAR type was replaced by VARCHAR.',\n    TEXT = 'TEXT type was replaced by VARCHAR.',",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "KEYWORDS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "description": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "peekOfCode": "KEYWORDS = [\n    'ADMIN', 'AS', 'AND', 'ALL', 'ANY', 'AT', 'AVG',\n    'BY', 'BETWEEN', 'BOTH',\n    'CALL', 'CASE', 'CAST', 'CORRESPONDING', 'CONVERT', 'COUNT', 'COALESCE', 'CREATE', 'CROSS',\n    'DISTINCT', 'DROP',\n    'ELSE', 'END', 'EVERY', 'EXISTS', 'EXCEPT',\n    'FOR', 'FROM', 'FULL',\n    'GRANT', 'GROUP',\n    'HAVING',\n    'INTO', 'IS', 'IN', 'INTERSECT', 'JOIN', 'INNER',",
        "detail": "github.com.voltdb.voltdb.tools.lib.python.mysqlutil",
        "documentation": {}
    },
    {
        "label": "ApprunnerTarFile",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "class ApprunnerTarFile():\n    def __init__(self, f):\n        self.tar = tarfile.open(f)\n        self.prefix = os.path.commonprefix(self.tar.getnames())\n        #validate this file is really apprunner\n        if not re.match('tmp/\\S+/apprunner/\\S+',\n                        os.path.commonprefix(self.tar.getnames())):\n            raise IOError(f + \" isn't a valid apprunner file\")\n    def show_files(self):\n        return self.tar.getnames()",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "LogfilePackage",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "class LogfilePackage():\n    def __init__(self, f):\n        self.tar = tarfile.open(f)\n        self.ts_date = '\\d{4}-\\d{2}-\\d{2}'\n        self.ts_time = '\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'\n        # validate f is valid logfile package\n        if not re.match('.*' + self.ts_date + '-' + self.ts_time + '\\.tgz', f):\n            raise IOError(f + \" isn't a valid logfile package\")\n    def get_logs(self):\n        pat = '^log/.*|/log/.*'",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "epochtimemillis_keyfunc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "def epochtimemillis_keyfunc(ts):\n    \"\"\"Return ms since epoch for timestamp of format yyyy-mm-dd hh:mm:ss[,xxx]\n       or format yyyy-mm-dd hh:mm:ss[.xxx]\n    \"\"\"\n    split_ts = ts.replace('.',',').split(',')\n    seconds = time.strptime(split_ts[0],\"%Y-%m-%d %H:%M:%S\")\n    if len(split_ts) > 1:\n        millis = int(split_ts[1])\n    else:\n        millis = 0",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "decorated_log_split",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "def decorated_log_split(f, offset, keyfunc, fnamedict = {}):\n    \"\"\" Generator that splits on timestamps. This returns\n    (millis-since-epoch, {\"datetime\":<original timestamp> ,\n                          \"newdatetime\":<offset timestamp>,\n                          \"message\": <log message>\n                          \"filename\":<filename>})\n    \"\"\"\n    ts_date = '\\d{0,4}-?\\d{2}-\\d{2}'\n    ts_mmm = '\\w{3}'\n    ts_day = '\\d{1,2}'",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "exclude_callback",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "def exclude_callback(option, opt_str, value, parser):\n    if value.lower() == \"none\":\n        # If the next thing is another arg, set exclude file to no file\n        setattr(parser.values, option.dest, '')\n    else:\n        # If not another arg, assume it is a filename\n        setattr(parser.values, option.dest, value)\ndef tz_offset_callback(option, opt_str, value, parser):\n    \"\"\" check to see the tz_offset looks like [+-]nn:nn and then store it\n    as the delta milliseconds\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "tz_offset_callback",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "def tz_offset_callback(option, opt_str, value, parser):\n    \"\"\" check to see the tz_offset looks like [+-]nn:nn and then store it\n    as the delta milliseconds\"\"\"\n    offset_re = re.compile('(\\+?-?\\d{1,2}):(\\d{2})')\n    m = offset_re.match(value)\n    if m:\n        offset_ms = int(m.groups()[0]) * 60 * 60 * 1000 + int(m.groups()[1]) * 60 * 1000\n        setattr(parser.values, option.dest, str(offset_ms))\n    else:\n        raise OptionValueError(value + \" is not a valid timezone offset\")",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "merge_logs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "description": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "peekOfCode": "def merge_logs(files, offsets, fnamedict = {}):\n    #print options.tzoffset\n    for (epoch_ms, entry) in heapq.merge(*[decorated_log_split(f, offsets[f.name], epochtimemillis_keyfunc, fnamedict) for f in files]):\n        yield (epoch_ms, entry)\nclass ApprunnerTarFile():\n    def __init__(self, f):\n        self.tar = tarfile.open(f)\n        self.prefix = os.path.commonprefix(self.tar.getnames())\n        #validate this file is really apprunner\n        if not re.match('tmp/\\S+/apprunner/\\S+',",
        "detail": "github.com.voltdb.voltdb.tools.log_tools.logmerger",
        "documentation": {}
    },
    {
        "label": "ConfigProperty",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "class ConfigProperty:\n#===============================================================================\n    def __init__(self, description, default=None):\n        self.description = description\n        self.default = default\n#===============================================================================\nclass Global:\n#===============================================================================\n    tool_name = 'voltify'\n    config_key = tool_name",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "Global",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "class Global:\n#===============================================================================\n    tool_name = 'voltify'\n    config_key = tool_name\n    config_properties = dict(\n        connection_string = ConfigProperty('database connection string'),\n        ddl_file          = ConfigProperty('generated DDL file name', default='ddl.sql'),\n        deployment_file   = ConfigProperty('generated deployment file name', default='deployment.xml'),\n        package           = ConfigProperty('package/application name', default='voltapp'),\n        run_script        = ConfigProperty('generated run script', default='run.sh'),",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "class Configuration(dict):\n#===============================================================================\n    \"\"\"\n    Dictionary that also allows attribute-based access.\n    \"\"\"\n    def __getattr__(self, name):\n        return self[name]\n    def __setattr__(self, name, value):\n        self[name] = value\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "FileGenerator",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "class FileGenerator(utility.FileGenerator):\n#===============================================================================\n    def __init__(self, runner, config):\n        self.runner = runner\n        self.config = config\n        if config.source_type != 'mysql':\n            utility.abort('Unsupported source type \"%s\".' % config.source_type,\n                          'Only \"mysql\" is valid.')\n        output_files = [config.ddl_file, config.deployment_file, config.run_script]\n        overwrites = [p for p in output_files if os.path.exists(p)]",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "config_key",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def config_key(name):\n#===============================================================================\n    \"\"\"\n    Generate a configuration property key from a property name.\n    \"\"\"\n    return '.'.join([Global.config_key, name])\n#===============================================================================\ndef config_help(samples=None):\n#===============================================================================\n    if samples:",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "config_help",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def config_help(samples=None):\n#===============================================================================\n    if samples:\n        paren = ' (using actual property name)'\n    else:\n        paren = ''\n        samples.append('name')\n    set_samples = []\n    for name in samples:\n        set_samples.append('   %s config set %s=%s'",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "get_config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def get_config(runner, reset = False):\n#===============================================================================\n    \"\"\"\n    Utility function to look for and validate a set of configuration properties.\n    \"\"\"\n    config = Configuration()\n    missing = []\n    defaults = []\n    msgblocks = []\n    for name in sorted(Global.config_properties.keys()):",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def port(runner):\n#===============================================================================\n    config = get_config(runner)\n    if config is None:\n        sys.exit(1)\n    generator = FileGenerator(runner, config)\n    generator.generate_all()\n#===============================================================================\ndef run_config_get(runner):\n#===============================================================================",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "run_config_get",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def run_config_get(runner):\n#===============================================================================\n    \"\"\"\n    Implementation of \"config get\" sub-command.\"\n    \"\"\"\n    if not runner.opts.arg:\n        # All labels.\n        for (key, value) in runner.config.query_pairs():\n            sys.stdout.write('%s=%s\\n' % (key, value))\n    else:",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "run_config_set",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def run_config_set(runner):\n#===============================================================================\n    \"\"\"\n    Implementation of \"config set\" sub-command.\n    \"\"\"\n    bad = []\n    for arg in runner.opts.arg:\n        if arg.find('=') == -1:\n            bad.append(arg)\n    if bad:",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "run_config_reset",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def run_config_reset(runner):\n#===============================================================================\n    \"\"\"\n    Implementation of \"config reset\" sub-command.\n    \"\"\"\n    utility.info('Clearing configuration settings...')\n    # Perform the reset.\n    get_config(runner, reset=True)\n    # Display the help.\n    get_config(runner)",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "description": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "peekOfCode": "def config(runner):\n#===============================================================================\n    runner.go()",
        "detail": "github.com.voltdb.voltdb.tools.voltify.d.voltify",
        "documentation": {}
    },
    {
        "label": "build",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def build(runner):\n    if not runner.opts.conditional or not os.path.exists('voter.jar'):\n        runner.java.compile('obj', 'src/voter/*.java', 'src/voter/procedures/*.java')\n    runner.call('volt.compile', '-c', 'obj', '-o', 'voter.jar', 'ddl.sql')\n@VOLT.Command(description = 'Clean the Voter build output.')\ndef clean(runner):\n    runner.shell('rm', '-rfv', 'obj', 'debugoutput', 'voter.jar', 'voltdbroot')\n@VOLT.Server('create',\n             description = 'Start the Voter VoltDB server.',\n             command_arguments = 'voter.jar',",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def clean(runner):\n    runner.shell('rm', '-rfv', 'obj', 'debugoutput', 'voter.jar', 'voltdbroot')\n@VOLT.Server('create',\n             description = 'Start the Voter VoltDB server.',\n             command_arguments = 'voter.jar',\n             classpath = 'obj')\ndef server(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.AsyncBenchmark', classpath = 'obj',",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def server(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.AsyncBenchmark', classpath = 'obj',\n           description = 'Run the Voter asynchronous benchmark.')\ndef async(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.SyncBenchmark', classpath = 'obj',\n           description = 'Run the Voter synchronous benchmark.')",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "async",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def async(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.SyncBenchmark', classpath = 'obj',\n           description = 'Run the Voter synchronous benchmark.')\ndef sync(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.JDBCBenchmark', classpath = 'obj',\n           description = 'Run the Voter JDBC benchmark.')",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "sync",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def sync(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.JDBCBenchmark', classpath = 'obj',\n           description = 'Run the Voter JDBC benchmark.')\ndef jdbc(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.SimpleBenchmark', classpath = 'obj',\n           description = 'Run the Voter simple benchmark.')",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "jdbc",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def jdbc(runner):\n    runner.call('build', '-C')\n    runner.go()\n@VOLT.Java('voter.SimpleBenchmark', classpath = 'obj',\n           description = 'Run the Voter simple benchmark.')\ndef simple(runner):\n    runner.call('build', '-C')\n    runner.go()",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "simple",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "def simple(runner):\n    runner.call('build', '-C')\n    runner.go()",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "@VOLT.Command(description",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "@VOLT.Command(description = 'Build the Voter application and catalog.',\n              options = VOLT.BooleanOption('-C', '--conditional', 'conditional',\n                                           'only build when the catalog file is missing'))\ndef build(runner):\n    if not runner.opts.conditional or not os.path.exists('voter.jar'):\n        runner.java.compile('obj', 'src/voter/*.java', 'src/voter/procedures/*.java')\n    runner.call('volt.compile', '-c', 'obj', '-o', 'voter.jar', 'ddl.sql')\n@VOLT.Command(description = 'Clean the Voter build output.')\ndef clean(runner):\n    runner.shell('rm', '-rfv', 'obj', 'debugoutput', 'voter.jar', 'voltdbroot')",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "@VOLT.Command(description",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "description": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "peekOfCode": "@VOLT.Command(description = 'Clean the Voter build output.')\ndef clean(runner):\n    runner.shell('rm', '-rfv', 'obj', 'debugoutput', 'voter.jar', 'voltdbroot')\n@VOLT.Server('create',\n             description = 'Start the Voter VoltDB server.',\n             command_arguments = 'voter.jar',\n             classpath = 'obj')\ndef server(runner):\n    runner.call('build', '-C')\n    runner.go()",
        "detail": "github.com.voltdb.voltdb.tools.voter.d.voter",
        "documentation": {}
    },
    {
        "label": "makeParser",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def makeParser():\n    class OnOffAction(argparse.Action):\n        def __call__(self, parser, namespace, values, option_string=None):\n            setattr(namespace, self.dest, 'ON' if values == 'true' else 'OFF')\n    parser = argparse.ArgumentParser(description='Build VoltDB EE Engine.')\n    #\n    # Build configuration.\n    #\n    parser.add_argument('--debug',\n                        action='store_true',",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "deleteDirectory",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def deleteDirectory(dirname, config):\n    if config.debug:\n        print(\"Deleting directory %s\" % dirname)\n    else:\n        subprocess.call('rm -rf %s' % dirname, shell=True)\n########################################################################\n#\n# Get the number of cores we will use.  This is the min of\n# the number of cores actually available and the number of\n# cores specified in the parameters.  If none are specified",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "getNumberProcessors",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def getNumberProcessors(config):\n    # np is the number of cores to use.\n    np = multiprocessing.cpu_count()\n    if np < 1:\n        np = 1\n        if 0 < config.max_processors:\n            # We can't find out (np < 1) but the user has\n            # given us a number (0 < config.max_processors).\n            # Use the user's number.\n            np = config.max_processors",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "makeBuilderCall",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def makeBuilderCall(config):\n    np = getNumberProcessors(config)\n    if config.generator.endswith('Unix Makefiles'):\n        return \"make -j%d %s\" % (\n            np,\n            \"VERBOSE=1\" if config.verbose_build == 'yes' else ''\n        )\n    elif config.generator.endswith('Ninja'):\n        return \"ninja -j %d \" % (\n            np,",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "configureCommandString",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def configureCommandString(config):\n    profile = \"OFF\"\n    coverage = \"OFF\"\n    if config.coverage:\n        coverage = \"ON\"\n    if config.profile:\n        profile = 'ON'\n    if config.buildtype == 'debug' or config.buildtype == 'memcheck':\n        cmakeBuildType=\"Debug\"\n    else:",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "buildCommandSet",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def buildCommandSet(config):\n    targets=[]\n    if config.install:\n        targets += ['install']\n    if config.buildonetest:\n        targets += ['build-test-%s' % config.buildonetest]\n    elif config.buildonetestdir:\n        targets += ['build-testdir-%s' % config.buildonetestdir]\n    elif config.buildalltests:\n        targets += ['build-all-tests']",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "runCommand",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def runCommand(commandStr, config):\n    print(\"########################################################################\")\n    print(\"#\")\n    print(\"# Running command '%s'\" % commandStr)\n    print(\"#\")\n    print(\"########################################################################\")\n    sys.stdout.flush()\n    if config.debug:\n        print(commandStr)\n        return (True, 0)",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "morethanoneof",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def morethanoneof(a, b, c):\n    if a:\n        return b or c\n    elif b:\n        return c\n    else:\n        return False\ndef validateConfig(config):\n    # If we don't have an explicit objdir,\n    # then it's obj/${BUILDTYPE}.",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "validateConfig",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def validateConfig(config):\n    # If we don't have an explicit objdir,\n    # then it's obj/${BUILDTYPE}.\n    if not config.objdir:\n        config.objdir = os.path.join('obj', config.buildtype)\n    # If we don't have an explicity srcdir\n    # then it's the current working directory.\n    if not config.srcdir:\n        config.srcdir = os.path.join(os.getcwd())\n    # Some of the build and run parameters are incompatible.",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "doCleanBuild",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def doCleanBuild(config):\n    #\n    # The config.objdir must either not exist or else\n    # be a directory.  If this is a clean build we\n    # delete the existing directory.\n    #\n    if os.path.exists(config.objdir) and not os.path.isdir(config.objdir):\n        print('build.py: \\'%s\\' exists but is not a directory.' % config.objdir)\n        sys.exit(100)\n    deleteDirectory(config.objdir, config)",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "ensureInObjDir",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def ensureInObjDir(config):\n    if not os.path.exists(config.objdir):\n        if (config.debug):\n            print(\"Making directory \\\"%s\\\"\" % config.objdir)\n        else:\n            try:\n                os.makedirs(config.objdir)\n            except OSError as ex:\n                print(\"Cannot make directory \\\"%s\\\": %s\" % (config.objdir, ex))\n                os.exit(1)",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "doConfigure",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def doConfigure(config):\n    #\n    # If we have not already configured, we want to reconfigure.\n    # We always want to do this.\n    #\n    configCmd = configureCommandString(config)\n    (success, retval) = runCommand(configCmd, config);\n    if not success:\n        print(\"Cmake command \\\"%s\\\" failed, return status %d.\"\n              % (configCmd, retval))",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "doBuild",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def doBuild(config):\n    buildCmds = buildCommandSet(config)\n    for buildCmd in buildCmds:\n        (success, retval) = runCommand(buildCmd, config)\n        if not success:\n            print(\"Build command \\\"%s\\\" failed, return status %d.\"\n                  % (buildCmd, retval))\n            sys.exit(100)\ndef main():\n    parser=makeParser()",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.build_cmake",
        "description": "github.com.voltdb.voltdb.tools.build_cmake",
        "peekOfCode": "def main():\n    parser=makeParser()\n    config=parser.parse_args()\n    # Not all configs are valid.  Check here.\n    validateConfig(config)\n    # Are we doing a clean build?\n    if config.cleanbuild:\n        doCleanBuild(config)\n    # Make sure we are in the obj directory.\n    ensureInObjDir(config)",
        "detail": "github.com.voltdb.voltdb.tools.build_cmake",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "def main():\n    if (len(sys.argv) != 4):\n        print \"Usage: %s HOSTCOUNT KSAFETY AMI-ID\" % (sys.argv[0])\n        return -1\n    params = dict(hosts=int(sys.argv[1]),\n                  ksafety=int(sys.argv[2]),\n                  amiid=sys.argv[3],\n                  zone=\"\",\n                  zone_ref=\"\")\n    # Order of template substitution:",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "TEMPLATE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "TEMPLATE = r\"\"\"\n{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Description\" : \"AWS CloudFormation template for launching a $hosts-node k-safety=$ksafety VoltDB cluster. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n    \"Parameters\": {\n        $zone\n        \"InstanceType\": {\n            \"Description\": \"VoltDB server EC2 instance type\",\n            \"Type\": \"String\",\n            \"Default\": \"m2.xlarge\",",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "ZONE_TEMPLATE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "ZONE_TEMPLATE = r\"\"\"\"AvailabilityZone\": {\n            \"Description\": \"Availability zone to start the servers in\",\n            \"Type\": \"String\",\n            \"Default\": \"us-east-1e\",\n            \"AllowedValues\": [\"us-east-1a\", \"us-east-1b\", \"us-east-1c\", \"us-east-1d\", \"us-east-1e\"],\n            \"ConstraintDescription\": \"must be a valid availability zone in the U.S. East region.\"\n        },\n\"\"\"\nZONE_REF_TEMPLATE = r\"\"\"\"AvailabilityZone\" : { \"Ref\": \"AvailabilityZone\" },\"\"\"\nDEPLOYMENT_TEMPLATE = r\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "ZONE_REF_TEMPLATE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "ZONE_REF_TEMPLATE = r\"\"\"\"AvailabilityZone\" : { \"Ref\": \"AvailabilityZone\" },\"\"\"\nDEPLOYMENT_TEMPLATE = r\"\"\"\n                                                              \"<?xml version=\\\"1.0\\\"?>\\n\",\n                                                              \"<deployment>\\n\",\n                                                              \"    <cluster hostcount=\\\"$hosts\\\" kfactor=\\\"$ksafety\\\" />\\n\",\n                                                              \"    <httpd enabled=\\\"true\\\">\\n\",\n                                                              \"        <jsonapi enabled=\\\"true\\\" />\\n\",\n                                                              \"    </httpd>\\n\",\n                                                              \"</deployment>\\n\"\n\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "DEPLOYMENT_TEMPLATE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "DEPLOYMENT_TEMPLATE = r\"\"\"\n                                                              \"<?xml version=\\\"1.0\\\"?>\\n\",\n                                                              \"<deployment>\\n\",\n                                                              \"    <cluster hostcount=\\\"$hosts\\\" kfactor=\\\"$ksafety\\\" />\\n\",\n                                                              \"    <httpd enabled=\\\"true\\\">\\n\",\n                                                              \"        <jsonapi enabled=\\\"true\\\" />\\n\",\n                                                              \"    </httpd>\\n\",\n                                                              \"</deployment>\\n\"\n\"\"\"\nSERVER_TEMPLATE = r\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "SERVER_TEMPLATE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cf-generator",
        "description": "github.com.voltdb.voltdb.tools.cf-generator",
        "peekOfCode": "SERVER_TEMPLATE = r\"\"\"\n        \"DBServer$seqId\": {\n            \"Type\": \"AWS::EC2::Instance\",\n            \"Metadata\": {\n                \"Comment\": \"Configure the bootstrap helpers to install and start VoltDB\",\n                \"AWS::CloudFormation::Init\": {\n                    \"config\": {\n                        \"packages\": {\n                        },\n                        \"sources\": {",
        "detail": "github.com.voltdb.voltdb.tools.cf-generator",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "def usage():\n    print sys.argv[0], \"[release|reserve|wait] [machine...]\"\n    sys.exit()\ndef ssh(machine, command):\n    args = [\"ssh\", \"-o StrictHostKeyChecking=no\", machine, command]\n    process = Popen(args, stdout=PIPE, stderr=PIPE)\n    return process.wait()\ndef delete_lockfiles(machines):\n    for machine in machines:\n        ssh(machine, \"rm \" + LOCKFILE)",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "ssh",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "def ssh(machine, command):\n    args = [\"ssh\", \"-o StrictHostKeyChecking=no\", machine, command]\n    process = Popen(args, stdout=PIPE, stderr=PIPE)\n    return process.wait()\ndef delete_lockfiles(machines):\n    for machine in machines:\n        ssh(machine, \"rm \" + LOCKFILE)\n        print \"released\", machine\n# check inputs\nif len(sys.argv) < 3:",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "delete_lockfiles",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "def delete_lockfiles(machines):\n    for machine in machines:\n        ssh(machine, \"rm \" + LOCKFILE)\n        print \"released\", machine\n# check inputs\nif len(sys.argv) < 3:\n    usage()\noption = sys.argv[1]\nmachines = sys.argv[2:]\nfor machine in machines:",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "LOCKFILE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "LOCKFILE = \"/dev/shm/reserved\"\n# make sure that touch will atomically create non-world-writable files\nCHECK_UMASK = \"umask -S | sed 's/.*,//g' | grep -v w\"\ndef usage():\n    print sys.argv[0], \"[release|reserve|wait] [machine...]\"\n    sys.exit()\ndef ssh(machine, command):\n    args = [\"ssh\", \"-o StrictHostKeyChecking=no\", machine, command]\n    process = Popen(args, stdout=PIPE, stderr=PIPE)\n    return process.wait()",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "CHECK_UMASK",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "CHECK_UMASK = \"umask -S | sed 's/.*,//g' | grep -v w\"\ndef usage():\n    print sys.argv[0], \"[release|reserve|wait] [machine...]\"\n    sys.exit()\ndef ssh(machine, command):\n    args = [\"ssh\", \"-o StrictHostKeyChecking=no\", machine, command]\n    process = Popen(args, stdout=PIPE, stderr=PIPE)\n    return process.wait()\ndef delete_lockfiles(machines):\n    for machine in machines:",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "option",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "option = sys.argv[1]\nmachines = sys.argv[2:]\nfor machine in machines:\n    if 0 != ssh(machine, CHECK_UMASK):\n        print machine, \"is not a valid machine\"\n        sys.exit(-1)\n# manage reservations\nif (option == \"release\"):\n    # first, check that this user has all the machines reserved\n    for machine in machines:",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "machines",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.cluster",
        "description": "github.com.voltdb.voltdb.tools.cluster",
        "peekOfCode": "machines = sys.argv[2:]\nfor machine in machines:\n    if 0 != ssh(machine, CHECK_UMASK):\n        print machine, \"is not a valid machine\"\n        sys.exit(-1)\n# manage reservations\nif (option == \"release\"):\n    # first, check that this user has all the machines reserved\n    for machine in machines:\n        if 0 != ssh(machine, \"ls \" + LOCKFILE):",
        "detail": "github.com.voltdb.voltdb.tools.cluster",
        "documentation": {}
    },
    {
        "label": "StatefulDatagen",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "class StatefulDatagen():\n    \"\"\"\n    The datagen process needs to be stateful, because INSERT statement should only be inserted\n    after PARTITION statement, if there is any.\n    The actual place of insertion is right before each next CREATE TABLE statement, since some indexes also\n    require table to be empty at the time of creation...\n    \"\"\"\n    def __init__(self, num_inserts):\n        self.current_table = None\n        self.current_create_table_stmt = None",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "context",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)\n    if endpos is None:\n        endpos = startpos\n    assert startpos >= 0 and len > startpos\n    assert endpos >= 0 and len > endpos\n    assert startpos <= endpos",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "strip_line_comment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def strip_line_comment(line):\n    \"\"\"\n    Strip SQL line-style comment from current line: ... -- some comments\n    TODO: quoted \"--\" are still treated as comment.\n    \"\"\"\n    endpos = line.find('--')\n    return re.sub(RE_TRAILING_WS, '', \\\n                  line[RE_NON_WS.search(line).end(0) - 1 : (endpos if endpos >= 0 else len(line))]) if line != '' \\\n            else line\ndef strip_block_comment(lines):",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "strip_block_comment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def strip_block_comment(lines):\n    \"\"\"\n    Strip SQL block-style comment from the lines:\n        ... /* some multi-\n        line comments\n        that can be quite long\n        */;\n    TODO: quoted /* or */ are still treated as comment.\n    \"\"\"\n    return re.sub(RE_BLOCK_COMMENT, '', lines)",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "strip",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def strip(content):\n    \"\"\"\n    Strip DDL content from all comments and blank lines.\n    Return a list of processed lines.\n    \"\"\"\n    return [line for line in map(strip_line_comment, strip_block_comment(''.join(content)).split('\\n')) if RE_WS.fullmatch(line) is None]\ndef compact(lines):\n    \"\"\"\n    Compact so that each statement takes a single line.\n    Must be done after comments are removed.",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "compact",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def compact(lines):\n    \"\"\"\n    Compact so that each statement takes a single line.\n    Must be done after comments are removed.\n    Returns a list of compacted lines\n    TODO: semicolumns in quoted strings are treated as end of statement.\n    \"\"\"\n    return ';\\n'.join([re.sub(RE_LEADING_WS, '', line) for line in ' '.join(lines).split(';')]).split('\\n')\nclass StatefulDatagen():\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "garnish",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "def garnish(lines, num_inserts):\n    \"\"\"\n    Garnish a list of lines of DDL statements that had been sanitized (comments/empty lines squeezed),\n    with given number of INSERT INTO tbl statements at appropriate locations.\n    \"\"\"\n    gen = StatefulDatagen(num_inserts)\n    for line in lines:\n        gen.consume(line)\n    return gen.produce()\nif __name__ == '__main__':",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "RE_WS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "RE_WS = re.compile(' +')\nRE_NON_WS = re.compile('\\\\S')\nRE_TRAILING_WS = re.compile(' *$')\nRE_LEADING_WS = re.compile('^ *')\nRE_BLOCK_COMMENT = re.compile('/\\*.*\\*/', re.S)\ndef context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "RE_NON_WS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "RE_NON_WS = re.compile('\\\\S')\nRE_TRAILING_WS = re.compile(' *$')\nRE_LEADING_WS = re.compile('^ *')\nRE_BLOCK_COMMENT = re.compile('/\\*.*\\*/', re.S)\ndef context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)\n    if endpos is None:",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "RE_TRAILING_WS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "RE_TRAILING_WS = re.compile(' *$')\nRE_LEADING_WS = re.compile('^ *')\nRE_BLOCK_COMMENT = re.compile('/\\*.*\\*/', re.S)\ndef context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)\n    if endpos is None:\n        endpos = startpos",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "RE_LEADING_WS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "RE_LEADING_WS = re.compile('^ *')\nRE_BLOCK_COMMENT = re.compile('/\\*.*\\*/', re.S)\ndef context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)\n    if endpos is None:\n        endpos = startpos\n    assert startpos >= 0 and len > startpos",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "RE_BLOCK_COMMENT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "description": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "peekOfCode": "RE_BLOCK_COMMENT = re.compile('/\\*.*\\*/', re.S)\ndef context(content, startpos, endpos = None, width = 16):\n    \"\"\"\n    Get context as [startpos - width, endpos + width] from the given content\n    \"\"\"\n    len = len(content)\n    if endpos is None:\n        endpos = startpos\n    assert startpos >= 0 and len > startpos\n    assert endpos >= 0 and len > endpos",
        "detail": "github.com.voltdb.voltdb.tools.datagen-with-ddl",
        "documentation": {}
    },
    {
        "label": "rand_char",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "def rand_char(len, src=string.ascii_letters + string.digits):\n    \"\"\"\n    Generate random characther of given maximum length.\n    \"\"\"\n    # No escape needed inside the generated content.\n    return \"'%s'\" % \\\n            (''.join(random.choice(src) for _ in range(random.randint(1, len))))\ndef failwith(msg, retcode=2):\n    sys.stderr.write('datagen error: %s' % msg)\n    sys.exit(retcode)",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "failwith",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "def failwith(msg, retcode=2):\n    sys.stderr.write('datagen error: %s' % msg)\n    sys.exit(retcode)\n# constants for regex\nRE_WS = re.compile(' +')\nRE_FIELD_SEP = re.compile(', +')\nRE_COMMA_OR_RIGHT_PAREN = re.compile('[,)]')\n# constants for constraint keywords and datagen functions\nCONSTRAINT_KEYWORDS = set(['CONSTRAINT', 'PRIMARY', 'UNIQUE', 'ASSUMEUNIQUE'])\nCOLUMN_TYPES = {",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "parse_table_field",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "def parse_table_field(field):\n    elms = RE_WS.split(field)\n    assert len(elms) > 1\n    varname = elms[0]\n    elms = elms[1].split('(')\n    ctype = elms[0]\n    if varname in CONSTRAINT_KEYWORDS:                                 #  either a constraint or a column decl\n        return None\n    elif ctype not in COLUMN_TYPES:\n        failwith('Unknown column type parsed: %s' % ctype)",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "datagen",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "def datagen(fn, number):\n    return tuple(fn() for _ in range(number))\ndef main(sql, rows):\n    tokens = [i.upper() for i in RE_WS.split(sql) if i != '']\n    if len(tokens) < 3 or tokens[0] != 'CREATE' or tokens[1] != 'TABLE' or \\\n       tokens[2].find('(') < 0 or not tokens[-1].endswith(');'):\n        failwith('%s is invalid CREATE TABLE statement.\\nNo space allowed between parenthesis and table name/semicolon' % sql, 1)\n    else:\n        tokens = tokens[2:]\n        tmp = tokens[0].split('(')",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "def main(sql, rows):\n    tokens = [i.upper() for i in RE_WS.split(sql) if i != '']\n    if len(tokens) < 3 or tokens[0] != 'CREATE' or tokens[1] != 'TABLE' or \\\n       tokens[2].find('(') < 0 or not tokens[-1].endswith(');'):\n        failwith('%s is invalid CREATE TABLE statement.\\nNo space allowed between parenthesis and table name/semicolon' % sql, 1)\n    else:\n        tokens = tokens[2:]\n        tmp = tokens[0].split('(')\n        assert len(tmp) == 2\n        name = tmp[0]",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "RE_WS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "RE_WS = re.compile(' +')\nRE_FIELD_SEP = re.compile(', +')\nRE_COMMA_OR_RIGHT_PAREN = re.compile('[,)]')\n# constants for constraint keywords and datagen functions\nCONSTRAINT_KEYWORDS = set(['CONSTRAINT', 'PRIMARY', 'UNIQUE', 'ASSUMEUNIQUE'])\nCOLUMN_TYPES = {\n    'INT' : lambda _ : lambda:random.randint(-9999,9999),\n    'INTEGER' : lambda _ : lambda:random.randint(-9999,9999),\n    'SMALLINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'TINYINT' : lambda _ : lambda:random.randint(-128,127),",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "RE_FIELD_SEP",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "RE_FIELD_SEP = re.compile(', +')\nRE_COMMA_OR_RIGHT_PAREN = re.compile('[,)]')\n# constants for constraint keywords and datagen functions\nCONSTRAINT_KEYWORDS = set(['CONSTRAINT', 'PRIMARY', 'UNIQUE', 'ASSUMEUNIQUE'])\nCOLUMN_TYPES = {\n    'INT' : lambda _ : lambda:random.randint(-9999,9999),\n    'INTEGER' : lambda _ : lambda:random.randint(-9999,9999),\n    'SMALLINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'TINYINT' : lambda _ : lambda:random.randint(-128,127),\n    'BIGINT' : lambda _ : lambda:random.randint(-9999, 9999),",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "RE_COMMA_OR_RIGHT_PAREN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "RE_COMMA_OR_RIGHT_PAREN = re.compile('[,)]')\n# constants for constraint keywords and datagen functions\nCONSTRAINT_KEYWORDS = set(['CONSTRAINT', 'PRIMARY', 'UNIQUE', 'ASSUMEUNIQUE'])\nCOLUMN_TYPES = {\n    'INT' : lambda _ : lambda:random.randint(-9999,9999),\n    'INTEGER' : lambda _ : lambda:random.randint(-9999,9999),\n    'SMALLINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'TINYINT' : lambda _ : lambda:random.randint(-128,127),\n    'BIGINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'FLOAT' : lambda _ : lambda:random.uniform(-9999, 9999),",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "CONSTRAINT_KEYWORDS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "CONSTRAINT_KEYWORDS = set(['CONSTRAINT', 'PRIMARY', 'UNIQUE', 'ASSUMEUNIQUE'])\nCOLUMN_TYPES = {\n    'INT' : lambda _ : lambda:random.randint(-9999,9999),\n    'INTEGER' : lambda _ : lambda:random.randint(-9999,9999),\n    'SMALLINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'TINYINT' : lambda _ : lambda:random.randint(-128,127),\n    'BIGINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'FLOAT' : lambda _ : lambda:random.uniform(-9999, 9999),\n    'DECIMAL' : lambda width : lambda:random.randint(-10**(width-1), 10**(width-1)),       #  ignore precision\n    'VARCHAR' : lambda width : lambda:rand_char(width),",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "COLUMN_TYPES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.datagen",
        "description": "github.com.voltdb.voltdb.tools.datagen",
        "peekOfCode": "COLUMN_TYPES = {\n    'INT' : lambda _ : lambda:random.randint(-9999,9999),\n    'INTEGER' : lambda _ : lambda:random.randint(-9999,9999),\n    'SMALLINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'TINYINT' : lambda _ : lambda:random.randint(-128,127),\n    'BIGINT' : lambda _ : lambda:random.randint(-9999, 9999),\n    'FLOAT' : lambda _ : lambda:random.uniform(-9999, 9999),\n    'DECIMAL' : lambda width : lambda:random.randint(-10**(width-1), 10**(width-1)),       #  ignore precision\n    'VARCHAR' : lambda width : lambda:rand_char(width),\n    'VARBINARY' : lambda _ : lambda:failwith('VARBINARY unsupported'),",
        "detail": "github.com.voltdb.voltdb.tools.datagen",
        "documentation": {}
    },
    {
        "label": "Decoder",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.decode",
        "description": "github.com.voltdb.voltdb.tools.decode",
        "peekOfCode": "class Decoder:\n    \"Decode native symbols in a java backtrace file\"\n    def loadSymbols(self, symfile):\n        # read the .sym file and store a list of address and a list\n        # of textual symbol names.\n        f = open(symfile)\n        for line in f:\n            match = re.compile(\"([0-9a-e]+)\\s[tT]\\s(.*)\").match(line)\n            if match != None:\n                self.symbols.append(match.group(1))",
        "detail": "github.com.voltdb.voltdb.tools.decode",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.decode",
        "description": "github.com.voltdb.voltdb.tools.decode",
        "peekOfCode": "def main(argv=None):\n    if (argv==None):\n        argv = sys.argv\n    if (len(argv) < 3):\n        print \"debug.py <hs_err_pidNNN.log> <path/to/libhzee.sym>\"\n        return -1\n    decoder = Decoder(argv[2])\n    decoder.decode(argv[1])\n    return 0\nif __name__ == \"__main__\":",
        "detail": "github.com.voltdb.voltdb.tools.decode",
        "documentation": {}
    },
    {
        "label": "generate_one_function",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def generate_one_function(func_name, package, statement, param_types, is_array, output_file):\n    rv = java_template.replace('{%package}', package)\n    rv = rv.replace('{%classname}', func_name)\n    rv = rv.replace('{%statement}', statement)\n    type_param_list = []\n    param_list = []\n    for i, (pt, ia) in enumerate(zip(param_types, is_array)):\n        if ia:\n            pt += \"[] \"\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "extract_a_procedure",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def extract_a_procedure(f):\n    line = f.next()\n    func_name = line.strip().split()[-1].strip(\"\\\"\")\n    line = f.next() #readonly\n    line = f.next()\n    # TODO: use it somewhere?\n    single_part = True if line.strip().split()[-1] == \"true\" else False\n    while line.startswith('set'):\n        line = f.next()\n    # sql statement",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "find_a_procedure",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def find_a_procedure(f, func_name = \"\", cur_line = \"\"):\n    target = \"add /clusters[cluster/databases[database procedures \" + func_name\n    if cur_line.startswith(target):\n        return extract_a_procedure(f)\n    # start to search target from the next line\n    for line in f:\n        if line.startswith(target):\n            return extract_a_procedure(f)\n    return None, None, None, None, None\ndef process_spec_func(func_name, package, input_file, output_dir):",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "process_spec_func",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def process_spec_func(func_name, package, input_file, output_dir):\n    f = open(input_file)\n    name, statement, param_types, is_array, line = find_a_procedure(f, func_name, \"\")\n    f.close()\n    if name:\n        generate_one_function(name, package, statement, param_types, is_array, output_dir + '/' + name + '.java')\n    else:\n        print \"ERROR: couldn't find \" + func_name\ndef process_whole_ddl(package, input_file, output_dir):\n    f = open(input_file)",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "process_whole_ddl",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def process_whole_ddl(package, input_file, output_dir):\n    f = open(input_file)\n    line = \"\"\n    while True:\n        name, statement, param_types, is_array, line = find_a_procedure(f, cur_line = line)\n        if not name:\n            break\n        generate_one_function(name, package, statement, param_types, is_array, output_dir + '/' + name + '.java')\n    f.close()\ndef self_test():",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "self_test",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def self_test():\n    ddl = '''\nCREATE TABLE P1 ( \n    ID INTEGER DEFAULT '0' NOT NULL, \n    BIG BIGINT,\n    RATIO FLOAT,\n    TM TIMESTAMP DEFAULT '2014-12-31',\n    VAR VARCHAR(300),\n    DEC DECIMAL,\n    PRIMARY KEY (ID)",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def main():\n    opts, args = parse_cmd()\n    if opts.self_test:\n        self_test()\n    if len(args) != 1:\n        print \"ERROR can only handle one ddl\"\n        sys.exit(-1)\n    if args[0].endswith(\".jar\"):\n        subprocess.check_call(\"rm -rf /tmp/tempGenJavaSPTool\".split())\n        subprocess.check_call(\"mkdir -p /tmp/tempGenJavaSPTool\".split())",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "parse_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "def parse_cmd():\n    parser = OptionParser()\n    parser.add_option(\"--target_dir\", type = \"string\", action = \"store\", dest = \"target_dir\", default = \"./\")\n    parser.add_option(\"--package\", type = \"string\", action = \"store\", dest = \"package\")\n    parser.add_option(\"--procedure\", type = \"string\", action = \"store\", dest = \"procedure\")\n    parser.add_option(\"--self-test\", action = \"store_true\", dest = \"self_test\", default = False)\n    return parser.parse_args()\nif __name__ == \"__main__\":\n    main()",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "java_template",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "java_template = '''\npackage {%package};\nimport org.voltdb.*;\npublic class {%classname} extends VoltProcedure {\n    public final SQLStmt stmt = new SQLStmt(\"{%statement}\");\n    public VoltTable[] run({%type_param}) {\n        voltQueueSQL(stmt{%parameters});\n        return voltExecuteSQL();\n    }\n}",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "volt_type",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "description": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "peekOfCode": "volt_type = ['',                                    # id = 0, INVALID\n             '',                                    # id = 1, NULL\n             '',                                    # id = 2, NUMERIC\n             'byte',                                # id = 3, TINYINT\n             'short',                               # id = 4, SMALLINT\n             'int',                                 # id = 5, INTEGER\n             'long',                                # id = 6, BIGINT\n             'not used',\n             'double',                              # id = 8, FLOAT\n             'String',                              # id = 9, STRING",
        "detail": "github.com.voltdb.voltdb.tools.gen_sp_from_catalog",
        "documentation": {}
    },
    {
        "label": "getSvnInfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.getgitinfo",
        "description": "github.com.voltdb.voltdb.tools.getgitinfo",
        "peekOfCode": "def getSvnInfo():\n    \"\"\"Make a build string for svn\n    Returns a string or None, of not in an svn repository\"\"\"\n    (urlbase, gitHash, dirty) = (\"\",\"\",\"\")    \n    (svnStatus,stderr) = Popen(\"svn status\", shell=True,stdout=PIPE, stderr=PIPE).communicate()\n    # svn status returns an error if you're not in a repository\n    if stderr:\n        print \"This not an svn working copy\"\n        return\n    if svnStatus:",
        "detail": "github.com.voltdb.voltdb.tools.getgitinfo",
        "documentation": {}
    },
    {
        "label": "getGitInfo",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.getgitinfo",
        "description": "github.com.voltdb.voltdb.tools.getgitinfo",
        "peekOfCode": "def getGitInfo():\n    \"\"\"Make a build string for svn\n    Returns a string or None if not in a git repository\"\"\"\n    (gitLocalVersion, local) = (\"\",\"\")\n    # need to do a 'git diff' because 'describe --dirty' can get confused by timestamps\n    (gitLocalVersion,stderr) = Popen(\"git diff --shortstat\", shell=True, stdout=PIPE, stderr=PIPE).communicate()\n    if stderr:\n        print \"This is not a git working tree\\n\"\n        return\n    # git describe --dirty adds '-dirty' to the version string if uncommitted code is found",
        "detail": "github.com.voltdb.voltdb.tools.getgitinfo",
        "documentation": {}
    },
    {
        "label": "cmd_readlines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.getmac",
        "description": "github.com.voltdb.voltdb.tools.getmac",
        "peekOfCode": "def cmd_readlines(cmd):\n    fd = os.popen(cmd)\n    retval = fd.readlines()\n    fd.close()\n    return retval\ndarwin = False\nlines = cmd_readlines(\"uname\")\nfor line in lines:\n    if line.strip() == \"Darwin\":\n        darwin = True",
        "detail": "github.com.voltdb.voltdb.tools.getmac",
        "documentation": {}
    },
    {
        "label": "darwin",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.getmac",
        "description": "github.com.voltdb.voltdb.tools.getmac",
        "peekOfCode": "darwin = False\nlines = cmd_readlines(\"uname\")\nfor line in lines:\n    if line.strip() == \"Darwin\":\n        darwin = True\n# if macosx       \nif darwin:\n    lines = cmd_readlines(\"ifconfig en0\")\n    for line in lines:\n        parts = line.split()",
        "detail": "github.com.voltdb.voltdb.tools.getmac",
        "documentation": {}
    },
    {
        "label": "lines",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.getmac",
        "description": "github.com.voltdb.voltdb.tools.getmac",
        "peekOfCode": "lines = cmd_readlines(\"uname\")\nfor line in lines:\n    if line.strip() == \"Darwin\":\n        darwin = True\n# if macosx       \nif darwin:\n    lines = cmd_readlines(\"ifconfig en0\")\n    for line in lines:\n        parts = line.split()\n        if parts[0] == \"ether\":",
        "detail": "github.com.voltdb.voltdb.tools.getmac",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def run_cmd(cmd):\n    proc = Popen(cmd.split(' '),stdout=subprocess.PIPE,stderr=subprocess.PIPE)\n    (out, err) = proc.communicate(input=None)\n    return (proc.returncode, out, err)\ndef get_release_branches():\n    git_cmd = 'git branch -r'\n    print ('#\\n# git command: %s\\n#' % git_cmd)\n    (returncode, stdout, stderr) = run_cmd (git_cmd)\n    return [b.strip() for b in stdout.splitlines() if b.strip().find('origin/release-') == 0 and b.strip()[-2:] == '.x']\ndef get_branch_list(merged, base=None):",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_release_branches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def get_release_branches():\n    git_cmd = 'git branch -r'\n    print ('#\\n# git command: %s\\n#' % git_cmd)\n    (returncode, stdout, stderr) = run_cmd (git_cmd)\n    return [b.strip() for b in stdout.splitlines() if b.strip().find('origin/release-') == 0 and b.strip()[-2:] == '.x']\ndef get_branch_list(merged, base=None):\n    branches=[]\n    if base:\n        basebranches=[base]\n    else:",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_branch_list",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def get_branch_list(merged, base=None):\n    branches=[]\n    if base:\n        basebranches=[base]\n    else:\n        basebranches = get_release_branches()\n    #If merged, check release branches and master\n    for b in basebranches:\n        git_cmd = 'git branch -r %s %s' % ('--merged' if merged else '--no-merged', b)\n        print ('#\\n# git command: %s\\n#' % git_cmd)",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_final_comment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def get_final_comment(num_listed_branches, num_total_branches, older_than_days,\n                      num_skipped_branches=0, merged=False, num_exceptions=0):\n    \"\"\"Returns a final comment, including whether all branches were completed\n       or we stopped due to reaching the maximum number, whether they were\n       merged or unmerged branches, how old (minimum) the branches to be\n       deleted are, and how many branches were skipped. If the number of\n       exceptions is greater than 0, it prints the entire comment with an\n       additional part about the exceptions, and exits with an error code.\n    \"\"\"\n    completed = (num_listed_branches == num_total_branches)",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "make_delete_branches_script",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def make_delete_branches_script(branch_infos, olderthan, max_num_branches=10,\n                                skip_branch_names=[], dry_run=False):\n    \"\"\"Prints a script that can be used to delete merged branches that are older\n       than the specified number of days, up to a specified maximum number of\n       branches, and skipping those whose names contain any of several substrings.\n    \"\"\"\n    other_args = ''\n    if dry_run:\n        other_args = ' --dry-run'\n    num_branches=0",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "make_comment",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def make_comment(bi):\n    comment = '# %-20s last checkin %s %s by %s' % \\\n        (bi['name'], bi['datetime'], bi['humantime'], bi['email'])\n    if options.use_jira:\n        ticket_summary = get_jira_info(bi['name'])\n        if ticket_summary:\n            comment +=  ('\\n' + ticket_summary)\n    return comment\ndef get_jira_info(b):\n    comment = None",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_jira_info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def get_jira_info(b):\n    comment = None\n    rg = re.compile('(eng)-?(\\d+)', re.IGNORECASE)\n    m = rg.search(b)\n    if m:\n        issue = m.group(1) + '-' + m.group(2)\n        #print \"##Getting %s\" % issue\n        ticket = jiratools.get_jira_issue(jira_url, user, password, issue, 'summary,assignee,status,resolution')\n        if ticket:\n            assignee = 'Unassigned'",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_tagname",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def get_tagname(branch_name):\n    \"\"\"Returns a tag name, to be used to \"archive\" the branch; normally, this\n       will be 'archive/<branch_name>', but if that tag already exists in the\n       git repository, then it will try 'archive/<branch_name>-2', then\n       'archive/<branch_name>-3', and so on.\n    \"\"\"\n    max_num_tags_per_branch = 10\n    init_tagname = 'archive/' + branch_name\n    for i in xrange(1, max_num_tags_per_branch+1):\n        tagname = init_tagname + (\"-\"+str(i) if (i > 1) else '' )",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "make_archive_branches_script",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "def make_archive_branches_script(branch_infos, olderthan, max_num_branches=10,\n                                 skip_branch_names=[], dry_run=False):\n    \"\"\"Prints a script that can be used to \"archive\" (or tag, technically) and\n       delete unmerged branches that are older than the specified number of days,\n       up to a specified maximum number of branches, and skipping those whose\n       names contain any of several substrings.\n    \"\"\"\n    other_args = ''\n    if dry_run:\n        other_args = ' --dry-run'",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "exclusions",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "exclusions = ['^master','^release-[1-9]?[0-9.]+\\.x$']\ncombined_regex= '(' + ')|('.join(exclusions) + ')'\njira_url = 'https://issues.voltdb.com/'\ngitshowmap = \\\n    {\n    \"unixtime\":\"%ct\",\n    \"datetime\":\"%ci\",\n    \"humantime\":\"%cr\",\n    \"email\":\"%ce\",\n    }",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "jira_url",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "jira_url = 'https://issues.voltdb.com/'\ngitshowmap = \\\n    {\n    \"unixtime\":\"%ct\",\n    \"datetime\":\"%ci\",\n    \"humantime\":\"%cr\",\n    \"email\":\"%ce\",\n    }\nDELIMITER='^'\ndef run_cmd(cmd):",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "gitshowmap",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "description": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "peekOfCode": "gitshowmap = \\\n    {\n    \"unixtime\":\"%ct\",\n    \"datetime\":\"%ci\",\n    \"humantime\":\"%cr\",\n    \"email\":\"%ce\",\n    }\nDELIMITER='^'\ndef run_cmd(cmd):\n    proc = Popen(cmd.split(' '),stdout=subprocess.PIPE,stderr=subprocess.PIPE)",
        "detail": "github.com.voltdb.voltdb.tools.git-remove-branches-script",
        "documentation": {}
    },
    {
        "label": "get_jira_issu",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jiratools",
        "description": "github.com.voltdb.voltdb.tools.jiratools",
        "peekOfCode": "def get_jira_issue (server_base_url, user, password, key, fields=None):\n    verbose = False\n    # A pool of connections\n    #pool = SimplePool(keepalive = 2)\n    # This sends the user and password with the request.\n    auth = BasicAuth(user, password)\n    resource = Resource(server_base_url + 'rest/api/2/issue/%s?fields=%s' % (key, fields),  filters=[auth])\n    try:\n        response = resource.get (headers = {'Content-Type' : 'application/json'})\n    except Exception, err:",
        "detail": "github.com.voltdb.voltdb.tools.jiratools",
        "documentation": {}
    },
    {
        "label": "parseStacks",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "def parseStacks(fileobj):\n    stacks = []\n    stack = []\n    for line in f:\n        if line == \"\\n\":\n            stacks.append(stack)\n            stack = []\n            continue\n        match = FRAME_PARSE.match(line)\n        method = match.group(1)",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "filterStacks",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "def filterStacks(stacks):\n  for stack in stacks:\n    for method, location in stack:\n      if method.startswith(filter): break\n    else:\n      yield stack\nif len(sys.argv) != 2:\n    sys.stderr.write(\"profile.py [profile text file]\\n\")\n    sys.exit(1)\nf = open(sys.argv[1])",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "FRAME_PARSE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "FRAME_PARSE = re.compile(r\"^([^(]+)\\(([^)]+)\\)$\")\ndef parseStacks(fileobj):\n    stacks = []\n    stack = []\n    for line in f:\n        if line == \"\\n\":\n            stacks.append(stack)\n            stack = []\n            continue\n        match = FRAME_PARSE.match(line)",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "filter",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "filter = 'edu.mit.tpcc.Client'\ndef filterStacks(stacks):\n  for stack in stacks:\n    for method, location in stack:\n      if method.startswith(filter): break\n    else:\n      yield stack\nif len(sys.argv) != 2:\n    sys.stderr.write(\"profile.py [profile text file]\\n\")\n    sys.exit(1)",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "f = open(sys.argv[1])\n# Maps method name -> [selfcount , self+children]\ntotal_methods = {}\nstacks = list(filterStacks(parseStacks(f)))\ntotal_stacks = len(stacks)\nfor stack in stacks:\n    # Used to avoid counting recursive methods more than once per stack\n    stack_methods = {}\n    for method, location in stack:\n        stack_methods[method] = False",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "total_methods",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "total_methods = {}\nstacks = list(filterStacks(parseStacks(f)))\ntotal_stacks = len(stacks)\nfor stack in stacks:\n    # Used to avoid counting recursive methods more than once per stack\n    stack_methods = {}\n    for method, location in stack:\n        stack_methods[method] = False\n    stack_methods[stack[0][0]] = True\n    for method, is_top in stack_methods.iteritems():",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "stacks",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "stacks = list(filterStacks(parseStacks(f)))\ntotal_stacks = len(stacks)\nfor stack in stacks:\n    # Used to avoid counting recursive methods more than once per stack\n    stack_methods = {}\n    for method, location in stack:\n        stack_methods[method] = False\n    stack_methods[stack[0][0]] = True\n    for method, is_top in stack_methods.iteritems():\n        if method not in total_methods:",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "total_stacks",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "total_stacks = len(stacks)\nfor stack in stacks:\n    # Used to avoid counting recursive methods more than once per stack\n    stack_methods = {}\n    for method, location in stack:\n        stack_methods[method] = False\n    stack_methods[stack[0][0]] = True\n    for method, is_top in stack_methods.iteritems():\n        if method not in total_methods:\n            total_methods[method] = [0, 0]",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "self",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "self = []\ntotal = []\nfor method, (self_count, total_count) in total_methods.iteritems():\n    assert self_count <= total_stacks\n    assert total_count <= total_stacks\n    self.append((self_count, method))\n    total.append((total_count, method))\nself.sort(reverse=True)\ntotal.sort(reverse=True)\nprint \"Self counts:\"",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.jsampler",
        "description": "github.com.voltdb.voltdb.tools.jsampler",
        "peekOfCode": "total = []\nfor method, (self_count, total_count) in total_methods.iteritems():\n    assert self_count <= total_stacks\n    assert total_count <= total_stacks\n    self.append((self_count, method))\n    total.append((total_count, method))\nself.sort(reverse=True)\ntotal.sort(reverse=True)\nprint \"Self counts:\"\nfor count, method in self:",
        "detail": "github.com.voltdb.voltdb.tools.jsampler",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "class Result:\n    def __init__(self, className, name, failure):\n        self.className = className\n        self.name = name\n        self.failure = failure\ndef lameXmlEscape(input):\n    input = input.replace('&', '&amp;')\n    return input.replace('<', '&lt;')\ndef writeJUnitXml(fileobj, suite_name, elapsed_time, stdout, stderr, results):\n    \"\"\"Writes a JUnit test report in XML format to fileobj from results.\"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "JavaProc",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "class JavaProc:\n    # signatures of running processes\n    mains = {\n        \"org.apache.tools.ant.launch.Launcher\"                        : \"Ant Process\",\n        \"org.voltdb.VoltDB\"                                           : \"VoltDB server process\",\n        \"org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner\": \"JUnit Test Runner process\",\n        \"org.eclipse.jdt.junit4.runtime\"                              : \"Eclipse JUnit process\",\n    }\n    def __init__(self, jpsline):\n        self.pid, self.classname = (list(jpsline.split()) + ['_unknown_'])[:2]",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def cmd(cmd):\n    \"\"\"run a command line tool and collect the output\"\"\"\n    fd = os.popen(cmd)\n    retval = fd.read()\n    fd.close()\n    return retval\ndef cmd_readlines(cmd):\n    \"\"\"run a command line tool and collect the lines of output\"\"\"\n    fd = os.popen(cmd)\n    retval = fd.readlines()",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "cmd_readlines",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def cmd_readlines(cmd):\n    \"\"\"run a command line tool and collect the lines of output\"\"\"\n    fd = os.popen(cmd)\n    retval = fd.readlines()\n    fd.close()\n    return retval\nclass Result:\n    def __init__(self, className, name, failure):\n        self.className = className\n        self.name = name",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "lameXmlEscape",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def lameXmlEscape(input):\n    input = input.replace('&', '&amp;')\n    return input.replace('<', '&lt;')\ndef writeJUnitXml(fileobj, suite_name, elapsed_time, stdout, stderr, results):\n    \"\"\"Writes a JUnit test report in XML format to fileobj from results.\"\"\"\n    timestamp = time.time()\n    iso_time = time.strftime(\"%Y-%m-%dT%H:%M:%S\", time.gmtime(timestamp))\n    tests = 0\n    failures = 0\n    for result in results:",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "writeJUnitXml",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def writeJUnitXml(fileobj, suite_name, elapsed_time, stdout, stderr, results):\n    \"\"\"Writes a JUnit test report in XML format to fileobj from results.\"\"\"\n    timestamp = time.time()\n    iso_time = time.strftime(\"%Y-%m-%dT%H:%M:%S\", time.gmtime(timestamp))\n    tests = 0\n    failures = 0\n    for result in results:\n        if result.failure is not None:\n            failures += 1\n        tests += 1",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "getProcs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def getProcs():\n    return [JavaProc(line) for line in cmd_readlines(\"jps -lm\")]\ndef getPathToResultsFileForTest(testname, outputpath):\n    return os.path.join(os.path.abspath(outputpath), \"TEST-\" + testname + \".xml\")\nif __name__ == \"__main__\":\n    # parse two command line options\n    parser = OptionParser()\n    parser.add_option(\"-t\", \"--testname\",\n                      action=\"store\", type=\"string\", dest=\"testname\",\n                      help=\"name of test just that ran\")",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "getPathToResultsFileForTest",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-post-process",
        "description": "github.com.voltdb.voltdb.tools.junit-post-process",
        "peekOfCode": "def getPathToResultsFileForTest(testname, outputpath):\n    return os.path.join(os.path.abspath(outputpath), \"TEST-\" + testname + \".xml\")\nif __name__ == \"__main__\":\n    # parse two command line options\n    parser = OptionParser()\n    parser.add_option(\"-t\", \"--testname\",\n                      action=\"store\", type=\"string\", dest=\"testname\",\n                      help=\"name of test just that ran\")\n    parser.add_option(\"-o\", \"--outputpath\",\n                      action=\"store\", type=\"string\", dest=\"outputpath\",",
        "detail": "github.com.voltdb.voltdb.tools.junit-post-process",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.junit-pre-process",
        "description": "github.com.voltdb.voltdb.tools.junit-pre-process",
        "peekOfCode": "def cmd(cmd):\n    fd = os.popen(cmd)\n    retval = fd.read()\n    fd.close()\n    return retval\nif __name__ == \"__main__\":\n    # parse two command line options\n    parser = OptionParser()\n    parser.add_option(\"-o\", \"--outputpath\",\n                      action=\"store\", type=\"string\", dest=\"outputpath\",",
        "detail": "github.com.voltdb.voltdb.tools.junit-pre-process",
        "documentation": {}
    },
    {
        "label": "licenseStartsHere",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def licenseStartsHere(content, approvedLicenses):\n    for license in approvedLicenses:\n        if license.match(content):\n            return True\n    return False\ndef verifyLicense(f, content, approvedLicensesJavaC, approvedLicensesPython):\n    if f.endswith('.py') \\\n       or f.endswith('.cmake') \\\n       or f.endswith(\"CMakeLists.txt\"):\n        if not content.startswith(\"#\"):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyLicense",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyLicense(f, content, approvedLicensesJavaC, approvedLicensesPython):\n    if f.endswith('.py') \\\n       or f.endswith('.cmake') \\\n       or f.endswith(\"CMakeLists.txt\"):\n        if not content.startswith(\"#\"):\n            if content.lstrip().startswith(\"#\"):\n                print \"ERROR: \\\"%s\\\" contains whitespace before initial comment.\" % f\n                return 1\n            else:\n                print \"ERROR: \\\"%s\\\" does not begin with a comment.\" % f",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyTrailingWhitespace",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyTrailingWhitespace(f, content):\n    if TRAILING_WHITE_SPACE_RE.search(content):\n        print(\"ERROR: \\\"%s\\\" contains trailing whitespace.\" % (f))\n        return 1\n    return 0\ndef verifyTrailingNewline(f, content):\n    if content[-1] != '\\n':\n        print(\"ERROR: \\\"%s\\\" has no trailing newline.\" % (f))\n        return 1\n    return 0",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyTrailingNewline",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyTrailingNewline(f, content):\n    if content[-1] != '\\n':\n        print(\"ERROR: \\\"%s\\\" has no trailing newline.\" % (f))\n        return 1\n    return 0\ndef verifyTabs(f, content):\n    num = content.count('\\t')\n    if num  > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d tabs.\" % (f, num))\n        return 1",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyTabs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyTabs(f, content):\n    num = content.count('\\t')\n    if num  > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d tabs.\" % (f, num))\n        return 1\n    return 0\ndef verifySprintf(f, content):\n    num = content.count('sprintf')\n    if num > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d calls to sprintf(). Use snprintf().\" % (f, num))",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifySprintf",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifySprintf(f, content):\n    num = content.count('sprintf')\n    if num > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d calls to sprintf(). Use snprintf().\" % (f, num))\n        return 1\n    return 0\ndef verifyGetHostName(f, content):\n    if not (f.endswith('.java')):\n        return 0\n    num = content.count('getHostName()')",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyGetHostName",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyGetHostName(f, content):\n    if not (f.endswith('.java')):\n        return 0\n    num = content.count('getHostName()')\n    errorfmt = \"ERROR: \\\"%s\\\" should contain %d instances of InetAddress.getHostName() but contained %d instances. If you added or moved calls to getHostName() update licensecheck or consider using ReverseDNSCache. Think carefully.\"\n    if f.endswith('/JMXStatsManager.java'):\n        if num != 1:\n            print(errorfmt % (f, 1, num))\n            return 1\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyGetCanonicalHostName",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyGetCanonicalHostName(f, content):\n    if not (f.endswith('.java')):\n        return 0\n    num = content.count('getCanonicalHostName()')\n    errorfmt = \"ERROR: \\\"%s\\\" should contain %d instances of InetAddress.getCanonicalHostName() but contained %d instances. If you added or moved calls to getCanonicalHostName() update licensecheck or consider using ReverseDNSCache. Think carefully.\"\n    if f.endswith('/SocketJoiner.java'):\n        if num != 1:\n            print(errorfmt % (f, 1, num))\n            return 1\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyJavaUtilExchanger",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyJavaUtilExchanger(f, content):\n    if not (f.endswith('.java')):\n        return 0\n    num = content.count('Exchanger')\n    if num > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d instances of what appear to be java.util.concurrent.Exchanger. Exchanger is almost always the wrong construct for use in Volt, if you are exchanging null all the time on one side what you really wanted was SettableFuture. Exchanger, especially with timeouts can lead to deadlocks.\" % (f, num))\n        return 1\n    return 0\ndef verifyGetLocalHost(f, content):\n    if not (f.endswith('.java')):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyGetLocalHost",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyGetLocalHost(f, content):\n    if not (f.endswith('.java')):\n        return 0\n    num = content.count('getLocalHost()')\n    errorfmt = \"ERROR: \\\"%s\\\" should contain %d instances of InetAddress.getLocalHost() but contained %d instances. If you added or moved calls to getLocalHost() update licensecheck or consider using CoreUtils.getHostnameOrAddress. Think carefully.\"\n    if f.endswith('/JMXStatsManager.java'):\n        if num != 1:\n            print(errorfmt % (f, 1, num))\n            return 1\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "verifyGetStringChars",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def verifyGetStringChars(f, content):\n    if not (f.endswith('.cpp') or f.endswith('.c') or f.endswith('.h') or f.endswith('.hpp')):\n        return 0\n    num = content.count('GetStringChars')\n    num += content.count('GetStringUTFChars')\n    if num > 0:\n        print(\"ERROR: \\\"%s\\\" contains %d calls to GetStringChars/GetStringUTFChars. These methods return invalid UTF-8 code points for some characters. You should do the encoding in Java and pass the string to native code as a byte array.\" % (f, num))\n        return 1\n    return 0\ndef validYearRegex(startYear):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "validYearRegex",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def validYearRegex(startYear):\n    ''' Return a regex which will match any year between startYear and this current year '''\n    return '(' + '|'.join(map(str, range(startYear, datetime.date.today().year + 1))) + ')'\ndef generateCopyrightYearRegex():\n    ''' Create a regex which allows a range of years or a single year '''\n    return '(' + validYearRegex(2008) + '-)?' + validYearRegex(2019)\nLICESE_FILE_VALUES = {'copyrightYear': generateCopyrightYearRegex()}\ndef readLicenseFile(filename):\n    ''' Return a regular expresion which can be used to validate a license '''\n    # This is a bit hacky but license have regular expression key values so we need to escape them but not $ since that is used by the template",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "generateCopyrightYearRegex",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def generateCopyrightYearRegex():\n    ''' Create a regex which allows a range of years or a single year '''\n    return '(' + validYearRegex(2008) + '-)?' + validYearRegex(2019)\nLICESE_FILE_VALUES = {'copyrightYear': generateCopyrightYearRegex()}\ndef readLicenseFile(filename):\n    ''' Return a regular expresion which can be used to validate a license '''\n    # This is a bit hacky but license have regular expression key values so we need to escape them but not $ since that is used by the template\n    return re.compile(string.Template(re.escape(readFile(filename)).replace('\\\\$', '$')).substitute(**LICESE_FILE_VALUES))\ndef readFile(filename):\n    \"read a file into a string\"",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "readLicenseFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def readLicenseFile(filename):\n    ''' Return a regular expresion which can be used to validate a license '''\n    # This is a bit hacky but license have regular expression key values so we need to escape them but not $ since that is used by the template\n    return re.compile(string.Template(re.escape(readFile(filename)).replace('\\\\$', '$')).substitute(**LICESE_FILE_VALUES))\ndef readFile(filename):\n    \"read a file into a string\"\n    with open(filename) as fh:\n        return fh.read()\ndef writeRepairedContent(filename, newtext, original):\n    try:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "readFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def readFile(filename):\n    \"read a file into a string\"\n    with open(filename) as fh:\n        return fh.read()\ndef writeRepairedContent(filename, newtext, original):\n    try:\n        FH=open(filename + \".lcbak\", 'r')\n        FH.close()\n    except IOError:\n        FH=open(filename + \".lcbak\", 'w')",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "writeRepairedContent",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def writeRepairedContent(filename, newtext, original):\n    try:\n        FH=open(filename + \".lcbak\", 'r')\n        FH.close()\n    except IOError:\n        FH=open(filename + \".lcbak\", 'w')\n        FH.write(original)\n        FH.close()\n    FH=open(filename, 'w')\n    FH.write(newtext)",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "rmBakFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def rmBakFile(filename):\n    try:\n        os.remove(filename + \".lcbak\")\n    except OSError:\n        pass\ndef fixLicensePython(f, content, approvedLicensesPython):\n    revisedcontent = content\n    preserved = \"\"\n    # skip hashbang\n    if revisedcontent.startswith(\"#!\"):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fixLicensePython",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def fixLicensePython(f, content, approvedLicensesPython):\n    revisedcontent = content\n    preserved = \"\"\n    # skip hashbang\n    if revisedcontent.startswith(\"#!\"):\n        (preserve, revisedcontent) = revisedcontent.split(\"\\n\", 1)\n        preserved = preserved + preserve + \"\\n\"\n    # skip python coding magic\n    if revisedcontent.startswith(\"# -*-\"):\n        (preserve, revisedcontent) = revisedcontent.split(\"\\n\", 1)",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fixLicenseJavaC",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def fixLicenseJavaC(f, content, approvedLicensesJavaC):\n    if licenseStartsHere(content.lstrip(), approvedLicensesJavaC):\n        print \"Fix: removing whitespace before the approved license.\"\n        revisedcontent = content.lstrip()\n    else:\n        print \"Fix: Inserting a default license before the original content.\"\n        revisedcontent = approvedLicensesJavaC[-1] + content\n    return writeRepairedContent(f, revisedcontent,  content)\ndef fixTabs(f, content):\n    cleanlines = []",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fixTabs",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def fixTabs(f, content):\n    cleanlines = []\n    for line in content.split(\"\\n\"):\n        while '\\t' in line:\n            (pre, post) = line.split('\\t', 1)\n            # replace each tab with a complement of up to 4 spaces -- I suppose this could be made adjustable.\n            # go ahead and allow trailing whitespace -- clean it up later\n            line = pre + (\"    \"[(len(pre) % 4 ): 4]) + post\n        cleanlines.append(line)\n    print \"Fix: Replacing tabs with 4th-column indentation.\"",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fixTrailingWhitespace",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def fixTrailingWhitespace(f, content):\n    lines = content.split(\"\\n\")\n    cleanlines = []\n    for line in lines:\n        if TRAILING_WHITE_SPACE_RE.search(line):\n            (line, ignored) = TRAILING_WHITE_SPACE_RE.split(line)\n        cleanlines.append(line)\n    print \"Fix: Removing trailing whitespace.\"\n    return writeRepairedContent(f, \"\\n\".join(cleanlines),  content)\ndef fixTrailingNewline(f, content):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fixTrailingNewline",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def fixTrailingNewline(f, content):\n    print \"Fix: Add trailing newline.\"\n    return writeRepairedContent(f, content+'\\n',  content)\nFIX_LICENSES_LEVEL = 2\ndef processFile(f, fix, approvedLicensesJavaC, approvedLicensesPython):\n    for suffix in ('.java', '.cpp', '.cc', '.h', '.hpp', '.py', '.groovy', '.cmake', 'CMakeLists.txt'):\n        if f.endswith(suffix):\n            break\n    else:\n        return (0, 0)",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "processFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def processFile(f, fix, approvedLicensesJavaC, approvedLicensesPython):\n    for suffix in ('.java', '.cpp', '.cc', '.h', '.hpp', '.py', '.groovy', '.cmake', 'CMakeLists.txt'):\n        if f.endswith(suffix):\n            break\n    else:\n        return (0, 0)\n    extension = os.path.splitext(f)[1]\n    content = readFile(f)\n    if fix:\n        rmBakFile(f)",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "processAllFiles",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "def processAllFiles(d, fix, approvedLicensesJavaC, approvedLicensesPython):\n    files = os.listdir(d)\n    (fixcount, errcount) = (0, 0)\n    for f in [f for f in files if not f.startswith('.') and f not in prunelist]:\n        fullpath = os.path.join(d,f)\n        # print fullpath\n        if os.path.isdir(fullpath):\n            (fixinc, errinc) = processAllFiles(fullpath, fix, approvedLicensesJavaC, approvedLicensesPython)\n        else:\n            (fixinc, errinc) = processFile(fullpath, fix, approvedLicensesJavaC, approvedLicensesPython)",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "basepath",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "basepath = os.path.dirname(os.path.dirname(os.path.realpath(__file__))) + os.sep\nascommithook = False\nprunelist = ('hsqldb19b3',\n             'hsqldb',\n             'jetty716',\n             'proj_gen',\n             'jni_md.h',\n             'jni.h',\n             'org_voltdb_jni_ExecutionEngine.h',\n             'org_voltcore_utils_DBBPool.h',",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "ascommithook",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "ascommithook = False\nprunelist = ('hsqldb19b3',\n             'hsqldb',\n             'jetty716',\n             'proj_gen',\n             'jni_md.h',\n             'jni.h',\n             'org_voltdb_jni_ExecutionEngine.h',\n             'org_voltcore_utils_DBBPool.h',\n             'org_voltcore_utils_DBBPool_DBBContainer.h',",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "prunelist",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "prunelist = ('hsqldb19b3',\n             'hsqldb',\n             'jetty716',\n             'proj_gen',\n             'jni_md.h',\n             'jni.h',\n             'org_voltdb_jni_ExecutionEngine.h',\n             'org_voltcore_utils_DBBPool.h',\n             'org_voltcore_utils_DBBPool_DBBContainer.h',\n             'org_voltdb_utils_PosixAdvise.h',",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "TRAILING_WHITE_SPACE_RE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "TRAILING_WHITE_SPACE_RE = re.compile(r'[\\t\\f\\v ]+\\n')\ndef verifyTrailingWhitespace(f, content):\n    if TRAILING_WHITE_SPACE_RE.search(content):\n        print(\"ERROR: \\\"%s\\\" contains trailing whitespace.\" % (f))\n        return 1\n    return 0\ndef verifyTrailingNewline(f, content):\n    if content[-1] != '\\n':\n        print(\"ERROR: \\\"%s\\\" has no trailing newline.\" % (f))\n        return 1",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "LICESE_FILE_VALUES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "LICESE_FILE_VALUES = {'copyrightYear': generateCopyrightYearRegex()}\ndef readLicenseFile(filename):\n    ''' Return a regular expresion which can be used to validate a license '''\n    # This is a bit hacky but license have regular expression key values so we need to escape them but not $ since that is used by the template\n    return re.compile(string.Template(re.escape(readFile(filename)).replace('\\\\$', '$')).substitute(**LICESE_FILE_VALUES))\ndef readFile(filename):\n    \"read a file into a string\"\n    with open(filename) as fh:\n        return fh.read()\ndef writeRepairedContent(filename, newtext, original):",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "FIX_LICENSES_LEVEL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "FIX_LICENSES_LEVEL = 2\ndef processFile(f, fix, approvedLicensesJavaC, approvedLicensesPython):\n    for suffix in ('.java', '.cpp', '.cc', '.h', '.hpp', '.py', '.groovy', '.cmake', 'CMakeLists.txt'):\n        if f.endswith(suffix):\n            break\n    else:\n        return (0, 0)\n    extension = os.path.splitext(f)[1]\n    content = readFile(f)\n    if fix:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "fix",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "fix = 0\nparsing_options = True\nfor arg in sys.argv[1:]:\n    if parsing_options and arg[0:2] == \"--\":\n        if arg == \"--\":\n            parsing_options = False\n        elif arg == \"--fixws\":\n            fix = 1\n        elif arg == \"--fixall\":\n            fix = FIX_LICENSES_LEVEL + 1",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "parsing_options",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "parsing_options = True\nfor arg in sys.argv[1:]:\n    if parsing_options and arg[0:2] == \"--\":\n        if arg == \"--\":\n            parsing_options = False\n        elif arg == \"--fixws\":\n            fix = 1\n        elif arg == \"--fixall\":\n            fix = FIX_LICENSES_LEVEL + 1\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "testLicenses",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "testLicenses =   [basepath + 'tools/approved_licenses/mit_x11_hstore_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/mit_x11_evanjones_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/mit_x11_michaelmccanna_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/mit_x11_voltdb.txt',\n                  basepath + 'tools/approved_licenses/mit_x11_voltdb_and_clearspring.txt',\n                  basepath + 'tools/approved_licenses/mit_x11_voltdb_and_apache.txt']\nsrcLicenses =    [basepath + 'tools/approved_licenses/gpl3_hstore_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_evanjones_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_base64_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_voltdb.txt']",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "srcLicenses",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "srcLicenses =    [basepath + 'tools/approved_licenses/gpl3_hstore_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_evanjones_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_base64_and_voltdb.txt',\n                  basepath + 'tools/approved_licenses/gpl3_voltdb.txt']\ntestLicensesPy = [basepath + 'tools/approved_licenses/mit_x11_voltdb_python.txt']\nsrcLicensesPy =  [basepath + 'tools/approved_licenses/gpl3_voltdb_python.txt']\n(fixcount, errcount) = (0, 0)\n(fixinc, errinc) = processAllFiles(basepath + \"src\", fix,\n    tuple([readLicenseFile(f) for f in srcLicenses]),\n    tuple([readLicenseFile(f) for f in srcLicensesPy]))",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "testLicensesPy",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "testLicensesPy = [basepath + 'tools/approved_licenses/mit_x11_voltdb_python.txt']\nsrcLicensesPy =  [basepath + 'tools/approved_licenses/gpl3_voltdb_python.txt']\n(fixcount, errcount) = (0, 0)\n(fixinc, errinc) = processAllFiles(basepath + \"src\", fix,\n    tuple([readLicenseFile(f) for f in srcLicenses]),\n    tuple([readLicenseFile(f) for f in srcLicensesPy]))\nfixcount += fixinc\nerrcount += errinc\n(fixinc, errinc) = processAllFiles(basepath + \"lib/python\", fix,\n    tuple([readLicenseFile(f) for f in srcLicenses]),",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "srcLicensesPy",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.licensescheck",
        "description": "github.com.voltdb.voltdb.tools.licensescheck",
        "peekOfCode": "srcLicensesPy =  [basepath + 'tools/approved_licenses/gpl3_voltdb_python.txt']\n(fixcount, errcount) = (0, 0)\n(fixinc, errinc) = processAllFiles(basepath + \"src\", fix,\n    tuple([readLicenseFile(f) for f in srcLicenses]),\n    tuple([readLicenseFile(f) for f in srcLicensesPy]))\nfixcount += fixinc\nerrcount += errinc\n(fixinc, errinc) = processAllFiles(basepath + \"lib/python\", fix,\n    tuple([readLicenseFile(f) for f in srcLicenses]),\n    tuple([readLicenseFile(f) for f in srcLicensesPy]))",
        "detail": "github.com.voltdb.voltdb.tools.licensescheck",
        "documentation": {}
    },
    {
        "label": "bestsingle",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "bestsingle = 0.0\nbestdouble = 0.0\nbestcluster = 0.0\nbestdozen = 0.0\nclustersize = 0\nlogstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "bestdouble",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "bestdouble = 0.0\nbestcluster = 0.0\nbestdozen = 0.0\nclustersize = 0\nlogstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "bestcluster",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "bestcluster = 0.0\nbestdozen = 0.0\nclustersize = 0\nlogstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "bestdozen",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "bestdozen = 0.0\nclustersize = 0\nlogstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "clustersize",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "clustersize = 0\nlogstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "logstring",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "logstring = \"\\d+ \\[main\\] INFO COMPILER - \"\nhostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"\nwhile True:",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "hostinfopattern",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "hostinfopattern = re.compile(logstring +\n    \"Catalog leader: volt.. hosts, sites (\\d+), (\\d+)\")\nbenchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"\nwhile True:\n    line = sys.stdin.readline()",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "benchmarkpattern",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "benchmarkpattern = re.compile(logstring +\n    \"Path to catalog file:.*/([^/]+)\\-ddl\\.sql\")\nresultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"\nwhile True:\n    line = sys.stdin.readline()\n    if line == '':\n        if bestsingle != 0.0:",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "resultpattern",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "resultpattern = re.compile(\"Transactions per second: (\\d+\\.\\d*)\")\nclientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"\nwhile True:\n    line = sys.stdin.readline()\n    if line == '':\n        if bestsingle != 0.0:\n            fd = os.open(\"bestsingle.properties\", os.O_CREAT | os.O_WRONLY)\n            os.write(fd, \"YVALUE = \" + str(bestsingle) + \"\\n\")",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "clientpattern",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "description": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "peekOfCode": "clientpattern = re.compile(\"               volt(.*):(.*):\")\nprint \"# benchmarkcluster results\"\nprint \"# benchmark-hosts-sites-clients-processes = transactions per second\"\nwhile True:\n    line = sys.stdin.readline()\n    if line == '':\n        if bestsingle != 0.0:\n            fd = os.open(\"bestsingle.properties\", os.O_CREAT | os.O_WRONLY)\n            os.write(fd, \"YVALUE = \" + str(bestsingle) + \"\\n\")\n            os.close(fd)",
        "detail": "github.com.voltdb.voltdb.tools.parsenightlylog",
        "documentation": {}
    },
    {
        "label": "Tester",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "class Tester(object):\n    def __init__(self, *lines):\n        self.counter = 0\n        expr = ''.join(lines).replace(' ', '').replace('\\n', '')\n        self.pattern = RE_CAPTURE_LABEL.sub('(', expr)\n        self.matcher = re.compile(self.pattern, re.IGNORECASE|re.DOTALL|re.MULTILINE)\n    def test(self, *lines):\n        statement = '\\n'.join(lines).strip().replace(r'\\n', '\\n')\n        self.counter += 1\n        if self.counter == 1:",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "shorten",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "def shorten(s, maxLen):\n    if s is None:\n        return 'None'\n    if len(s) <= maxLen:\n        return s\n    left = '%s...' % s[:(maxLen - 3) / 2]\n    right = s[-(maxLen - len(left)):]\n    return ''.join((left, right))\ndef shorten_all(maxLength, *args):\n    return tuple((shorten(s, maxLength) for s in args))",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "shorten_all",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "def shorten_all(maxLength, *args):\n    return tuple((shorten(s, maxLength) for s in args))\nclass Tester(object):\n    def __init__(self, *lines):\n        self.counter = 0\n        expr = ''.join(lines).replace(' ', '').replace('\\n', '')\n        self.pattern = RE_CAPTURE_LABEL.sub('(', expr)\n        self.matcher = re.compile(self.pattern, re.IGNORECASE|re.DOTALL|re.MULTILINE)\n    def test(self, *lines):\n        statement = '\\n'.join(lines).strip().replace(r'\\n', '\\n')",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "def test(path):\n    tester = None\n    mode = None\n    lines = []\n    for (next_mode, line) in _parse_lines(path):\n        if not next_mode is None:\n            if mode == 'pattern':\n                tester = Tester(*lines)\n            elif mode == 'text':\n                if not tester is None:",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "MAX_DISPLAY_LENGTH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "MAX_DISPLAY_LENGTH = 30\nRE_DIRECTIVE = re.compile('^\\s*(pattern|text)\\s*:\\s*(.*)$', re.IGNORECASE)\nRE_CAPTURE_LABEL = re.compile(r'[(][?]<[^>]*>')\nUSAGE = ('''\nUsage: %s FILE ...\nFILE format:\n    pattern:\n    (regular expression lines)\n    text:\n    (text lines to test against regular expression)",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "RE_DIRECTIVE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "RE_DIRECTIVE = re.compile('^\\s*(pattern|text)\\s*:\\s*(.*)$', re.IGNORECASE)\nRE_CAPTURE_LABEL = re.compile(r'[(][?]<[^>]*>')\nUSAGE = ('''\nUsage: %s FILE ...\nFILE format:\n    pattern:\n    (regular expression lines)\n    text:\n    (text lines to test against regular expression)\n    ...",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "RE_CAPTURE_LABEL",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "RE_CAPTURE_LABEL = re.compile(r'[(][?]<[^>]*>')\nUSAGE = ('''\nUsage: %s FILE ...\nFILE format:\n    pattern:\n    (regular expression lines)\n    text:\n    (text lines to test against regular expression)\n    ...\nRegular expressions and text blocks can span multiple lines.",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "USAGE",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.regex-tester",
        "description": "github.com.voltdb.voltdb.tools.regex-tester",
        "peekOfCode": "USAGE = ('''\nUsage: %s FILE ...\nFILE format:\n    pattern:\n    (regular expression lines)\n    text:\n    (text lines to test against regular expression)\n    ...\nRegular expressions and text blocks can span multiple lines.\nMultiple text blocks can follow a pattern.",
        "detail": "github.com.voltdb.voltdb.tools.regex-tester",
        "documentation": {}
    },
    {
        "label": "parsefile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "def parsefile(filename):\n    global relnotes\n    relnotes = []\n    tree = parse(filename)\n    #root = tree.getroot()\n    # Look for all the \"revision=\" attributes\n    findattribute(tree,\"revision\",0)\n    return relnotes\ndef findattribute(xml,attribute, depth):\n    global relnotes",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "findattribute",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "def findattribute(xml,attribute, depth):\n    global relnotes\n    if depth > 100:\n        print \"Exiting at depth \" + str(depth)\n        exit()\n    for child in xml.childNodes:\n        #print child.nodeName + \"...\"\n        foundattribute = None\n        atts = child.attributes\n        if (atts):",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "innertext",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "def innertext(node):\n        if node.nodeType ==  node.TEXT_NODE:\n            return node.data\n        else:\n            text_string = \"\"\n            for child_node in node.childNodes:\n                text_string = text_string + innertext( child_node )\n            return text_string\ndef smash(text):\n    # First compress it",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "smash",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "def smash(text):\n    # First compress it\n    text = ' '.join(text.split())\n    return text.encode('ascii','ignore')\ndef quote(text):\n    text = text.replace(\"\\\\\",\"\\\\\\\\\")\n    text = text.replace(\"\\\"\",\"\\\\\\\"\")\n    #Catch quotation marks\n    #text = text.replace('\"','\"\"')\n    return '\"' + text + '\"'",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "quote",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "def quote(text):\n    text = text.replace(\"\\\\\",\"\\\\\\\\\")\n    text = text.replace(\"\\\"\",\"\\\\\\\"\")\n    #Catch quotation marks\n    #text = text.replace('\"','\"\"')\n    return '\"' + text + '\"'\nif __name__ == \"__main__\":\n    f = sys.argv[1]\n    parsed = parsefile(f)\n    # print the array",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "relnotes",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesparser",
        "description": "github.com.voltdb.voltdb.tools.relnotesparser",
        "peekOfCode": "relnotes = []\ndef parsefile(filename):\n    global relnotes\n    relnotes = []\n    tree = parse(filename)\n    #root = tree.getroot()\n    # Look for all the \"revision=\" attributes\n    findattribute(tree,\"revision\",0)\n    return relnotes\ndef findattribute(xml,attribute, depth):",
        "detail": "github.com.voltdb.voltdb.tools.relnotesparser",
        "documentation": {}
    },
    {
        "label": "printresults",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def printresults(results):\n    print '==============================================================================='\n    for (status, issue, relnote, extstatus) in sorted(results):\n        print '%-10s %-6s %s' % (issue, status, extstatus)\n        print '\\t%s\\n' % relnote\n#Turn off urllib3 spam for InsercurePlatformWarning and SNIMissingWarning\nrequests.packages.urllib3.disable_warnings()\nparser = argparse.ArgumentParser()\nparser.add_argument('-v', '--verbose', dest='verbose', action=\"store_true\")\nparser.add_argument('-q', '--quiet', dest='quiet', action=\"store_true\")",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "is_valid_jid",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def is_valid_jid(jid):\n    #Return true of it looks like a valid ticket\n    #return jid.split('-')[1].isdigit() and len(jid.split('-')) == 2\n    if not len(jid.split('-')) == 2: return False\n    return jid.split('-')[1].isdigit()\ndef cleanstring(str):\n    return ' '.join(str.strip().split())\ndef add_mismatch(jid):\n    global mismatches\n    c = 1",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "cleanstring",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def cleanstring(str):\n    return ' '.join(str.strip().split())\ndef add_mismatch(jid):\n    global mismatches\n    c = 1\n    if jid in mismatches.keys(): \n        c = mismatches[jid] + 1\n    mismatches[jid] = c\ndef add_match(jid):\n    global good_matches",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "add_mismatch",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def add_mismatch(jid):\n    global mismatches\n    c = 1\n    if jid in mismatches.keys(): \n        c = mismatches[jid] + 1\n    mismatches[jid] = c\ndef add_match(jid):\n    global good_matches\n    c = 1\n    if jid in good_matches.keys(): ",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "add_match",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def add_match(jid):\n    global good_matches\n    c = 1\n    if jid in good_matches.keys(): \n        c = good_matches[jid] + 1\n    good_matches[jid] = c\ndef cleanstring(str):\n    return ' '.join(str.strip().split())\nmismatches = {}\ngood_matches = {}",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "cleanstring",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "def cleanstring(str):\n    return ' '.join(str.strip().split())\nmismatches = {}\ngood_matches = {}\nprint \"Start...\"\nstart_time = time.time()\nconsolidated = {}\nreferences = {}\ntotal_count = 0\nunique_count = 0",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('-v', '--verbose', dest='verbose', action=\"store_true\")\nparser.add_argument('-q', '--quiet', dest='quiet', action=\"store_true\")\nparser.add_argument('--debug', dest='debug', action=\"store_true\")\n#parser.add_argument('-p', dest='password', action=\"store\")\n#parser.add_argument('-w', '--write', dest='dryrun', action='store_false')\n#parser.add_argument('-e', '--errors', dest='errors', action='store_true')\nparser.add_argument ('file',nargs='+')\nargs = parser.parse_args()\nfor f in args.file:",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "args = parser.parse_args()\nfor f in args.file:\n    if args.debug: print str(f)\ndef is_valid_jid(jid):\n    #Return true of it looks like a valid ticket\n    #return jid.split('-')[1].isdigit() and len(jid.split('-')) == 2\n    if not len(jid.split('-')) == 2: return False\n    return jid.split('-')[1].isdigit()\ndef cleanstring(str):\n    return ' '.join(str.strip().split())",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "mismatches",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "mismatches = {}\ngood_matches = {}\nprint \"Start...\"\nstart_time = time.time()\nconsolidated = {}\nreferences = {}\ntotal_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "good_matches",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "good_matches = {}\nprint \"Start...\"\nstart_time = time.time()\nconsolidated = {}\nreferences = {}\ntotal_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "start_time = time.time()\nconsolidated = {}\nreferences = {}\ntotal_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)\n    for row in reader:\n        total_count += 1",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "consolidated",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "consolidated = {}\nreferences = {}\ntotal_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)\n    for row in reader:\n        total_count += 1\n        # resolve the names",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "references",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "references = {}\ntotal_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)\n    for row in reader:\n        total_count += 1\n        # resolve the names\n        jids = row[0].split(\",\")",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "total_count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "total_count = 0\nunique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)\n    for row in reader:\n        total_count += 1\n        # resolve the names\n        jids = row[0].split(\",\")\n        for j in jids:",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "unique_count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "unique_count = 0\n# Get the release notes from relnotesparser as a two column array\nfor f in args.file:\n    reader = relnotesparser.parsefile(f)\n    for row in reader:\n        total_count += 1\n        # resolve the names\n        jids = row[0].split(\",\")\n        for j in jids:\n            if not is_valid_jid(j):",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotestester",
        "description": "github.com.voltdb.voltdb.tools.relnotestester",
        "peekOfCode": "end_time = time.time()\nprint \"Processing took \" + str(end_time - start_time) + \" Seconds.\"\nif args.verbose:\n    print str(len(mismatches)) + \" mismatches found out of \" + str(total_count) + \" hits\" \\\n        + \" from \" + str(len(args.file)) + \" files.\"\nprint \"Mismatches:\"\nfor k in mismatches.keys():\n    print \" \" + k + \"   \" + str(mismatches[k])",
        "detail": "github.com.voltdb.voltdb.tools.relnotestester",
        "documentation": {}
    },
    {
        "label": "printresults",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "def printresults(results):\n    print '==============================================================================='\n    for (status, issue, relnote, extstatus) in sorted(results):\n        print '%-10s %-6s %s' % (issue, status, extstatus)\n        print '\\t%s\\n' % relnote\n#Turn off urllib3 spam for InsercurePlatformWarning and SNIMissingWarning\nrequests.packages.urllib3.disable_warnings()\nparser = argparse.ArgumentParser()\nparser.add_argument('-u', dest='username', action=\"store\")\nparser.add_argument('-p', dest='password', action=\"store\")",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "is_valid_jid",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "def is_valid_jid(jid):\n    #Return true of it looks like a valid ticket\n    #return jid.split('-')[1].isdigit() and len(jid.split('-')) == 2\n    if not len(jid.split('-')) == 2: return False\n    return jid.split('-')[1].isdigit()\ndef cleanstring(str):\n    return ' '.join(str.strip().split())\n# Get the release notes from relnotesparser as a two column array\nreader = relnotesparser.parsefile(args.file)\nfor row in reader:",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "cleanstring",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "def cleanstring(str):\n    return ' '.join(str.strip().split())\n# Get the release notes from relnotesparser as a two column array\nreader = relnotesparser.parsefile(args.file)\nfor row in reader:\n    #print row\n    fields = len(row)\n    if fields < 2:\n        results.append(('ERROR', 'NULL', row, 'Not a valid row, too few columns.'))\n        continue",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('-u', dest='username', action=\"store\")\nparser.add_argument('-p', dest='password', action=\"store\")\nparser.add_argument('-w', '--write', dest='dryrun', action='store_false')\nparser.add_argument('-e', '--errors', dest='errors', action='store_true')\nparser.add_argument ('file')\nargs = parser.parse_args()\nusername = args.username\npassword = args.password\nerrors_only = False",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "args = parser.parse_args()\nusername = args.username\npassword = args.password\nerrors_only = False\nif (args.errors): errors_only = True\nif (args.errors and not args.dryrun):\n    sys.exit('FATAL: --errors and --dryrun are mutually exclusive.')\n#exit(1)\nif (not args.username):\n    username = getpass.getuser()",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "username = args.username\npassword = args.password\nerrors_only = False\nif (args.errors): errors_only = True\nif (args.errors and not args.dryrun):\n    sys.exit('FATAL: --errors and --dryrun are mutually exclusive.')\n#exit(1)\nif (not args.username):\n    username = getpass.getuser()\n    password = getpass.getpass('Enter your Jira password: ')",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "password = args.password\nerrors_only = False\nif (args.errors): errors_only = True\nif (args.errors and not args.dryrun):\n    sys.exit('FATAL: --errors and --dryrun are mutually exclusive.')\n#exit(1)\nif (not args.username):\n    username = getpass.getuser()\n    password = getpass.getpass('Enter your Jira password: ')\njira_url = 'https://issues.voltdb.com/'",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "errors_only",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "errors_only = False\nif (args.errors): errors_only = True\nif (args.errors and not args.dryrun):\n    sys.exit('FATAL: --errors and --dryrun are mutually exclusive.')\n#exit(1)\nif (not args.username):\n    username = getpass.getuser()\n    password = getpass.getpass('Enter your Jira password: ')\njira_url = 'https://issues.voltdb.com/'\ntry:",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "jira_url",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "jira_url = 'https://issues.voltdb.com/'\ntry:\n    jira = JIRA(jira_url, basic_auth=(username, password),options=dict(verify=False))\nexcept:\n    sys.exit('FATAL: Unable to log in ' + username)\n#Get Release Note field id\nrelnote_field = [f['id'] for f in jira.fields() if 'Release Note' in f['name'] ][0]\ndef is_valid_jid(jid):\n    #Return true of it looks like a valid ticket\n    #return jid.split('-')[1].isdigit() and len(jid.split('-')) == 2",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "relnote_field",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "relnote_field = [f['id'] for f in jira.fields() if 'Release Note' in f['name'] ][0]\ndef is_valid_jid(jid):\n    #Return true of it looks like a valid ticket\n    #return jid.split('-')[1].isdigit() and len(jid.split('-')) == 2\n    if not len(jid.split('-')) == 2: return False\n    return jid.split('-')[1].isdigit()\ndef cleanstring(str):\n    return ' '.join(str.strip().split())\n# Get the release notes from relnotesparser as a two column array\nreader = relnotesparser.parsefile(args.file)",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "description": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "peekOfCode": "reader = relnotesparser.parsefile(args.file)\nfor row in reader:\n    #print row\n    fields = len(row)\n    if fields < 2:\n        results.append(('ERROR', 'NULL', row, 'Not a valid row, too few columns.'))\n        continue\n    if fields > 2:\n        results.append(('ERROR', 'NULL', row, 'Not a valid row, too many columns.'))\n        continue",
        "detail": "github.com.voltdb.voltdb.tools.relnotesupdater",
        "documentation": {}
    },
    {
        "label": "makeValgrindFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.runalltests",
        "description": "github.com.voltdb.voltdb.tools.runalltests",
        "peekOfCode": "def makeValgrindFile(pidStr):\n    return \"valgrind_ee_%s.xml\" % pidStr\nfor test in args.tests:\n    noValgrindTests = [ \"CompactionTest\", \"CopyOnWriteTest\", \"harness_test\", \"serializeio_test\" ]\n    using_valgrind = args.valgrind && isValgrindTest(test)\n    if not using_valgrind:\n        pass\n    else:\n        valgrindFile = makeValgrindFile(\"%p\")\n        process = Popen(executable=\"valgrind\",",
        "detail": "github.com.voltdb.voltdb.tools.runalltests",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.runalltests",
        "description": "github.com.voltdb.voltdb.tools.runalltests",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Run All The Tests.\")\nparser.add_argument(\"--valgrind\",\n                    default=False,\n                    action='store_true',\n                    help='Use valgrind on tests.')\nparser.add_argument(\"tests\",\n                    nargs='*',\n                    help='Tests in dir/test_name form.')\nargs=parser.parse_args()\ndef makeValgrindFile(pidStr):",
        "detail": "github.com.voltdb.voltdb.tools.runalltests",
        "documentation": {}
    },
    {
        "label": "XMLFile",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.runvalgrindtest",
        "description": "github.com.voltdb.voltdb.tools.runvalgrindtest",
        "peekOfCode": "class XMLFile(object):\n    def __init__(self, xmlfile, expecterrors):\n        self.xmlfile = xmlfile\n        self.expecterrors = expecterrors\n    def printStack(self, stack):\n        idx = 0\n        frames = stack.findall('.//frame')\n        nframes = len(frames)\n        for frame in frames:\n            idx += 1",
        "detail": "github.com.voltdb.voltdb.tools.runvalgrindtest",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.tabstospaces",
        "description": "github.com.voltdb.voltdb.tools.tabstospaces",
        "peekOfCode": "parser = optparse.OptionParser(\n        usage=\"\"\"\n%prog [options] [files]\nExpand tab to spaces, printing to the standard output by default.\nWhen no files are given, read from the standard input.\nExamples:\n expand in one file\n    % expand_tabs.py -t 4 file.txt\n expand tabs in Python source files\n    % find . -name \"*.py\" | xargs expand_tabs.py -it 4",
        "detail": "github.com.voltdb.voltdb.tools.tabstospaces",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.tcpprobe",
        "description": "github.com.voltdb.voltdb.tools.tcpprobe",
        "peekOfCode": "def main(args):\n  host, port = args[1:]\n  with closing(socket()) as s:\n    try: s.connect((host,int(port)))\n    except: return 1\nif __name__ == '__main__':\n  exit(main(argv))\n# vim:et:sw=2:ts=2",
        "detail": "github.com.voltdb.voltdb.tools.tcpprobe",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "class G:\n    \"\"\"\n    Globals.\n    \"\"\"\n    script = os.path.realpath(sys.argv[0])\n    script_dir, script_name = os.path.split(script)\n    base_dir = os.path.dirname(script_dir)\n    # Use ~/.<script> as the output directory for logging and virtual environments.\n    user_dir = os.path.expanduser(os.path.join('~', '.voltdb'))\n    log_path = os.path.join(user_dir, 'logs', '%s.log' % script_name)",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "get_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def get_version(base_dir, error_abort=True):\n    try:\n        # noinspection PyUnresolvedReferences\n        return open(os.path.join(base_dir, 'version.txt')).read().strip()\n    except (IOError, OSError), e:\n        if error_abort:\n            abort('Unable to read version.txt.', e)\n        return None\ndef go(cmd_name,\n       cmd_dir,",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "go",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def go(cmd_name,\n       cmd_dir,\n       base_dir,\n       description,\n       standalone,\n       directory,\n       verbose,\n       libpath,\n       *args):\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def main(description='(no description)',\n         standalone=False,\n         directory=None,\n         verbose=False,\n         libpath='',\n         command_name=None):\n    \"\"\"\n    Main entry point for commands not running in a virtual environment.\n    :param description:\n    :param standalone:",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "get_virtualenv",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def get_virtualenv():\n    \"\"\"\n    Find the virtualenv runtime. Fall back to using one from\n    third_party/python/packages. Untar it under the working folder. Return a\n    command line argument list.\n    \"\"\"\n    virtualenv = find_in_path('virtualenv', required=False)\n    if virtualenv:\n        return [virtualenv]\n    # Find the latest package.",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "vmain",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def vmain(description='(no description)',\n          standalone=False,\n          directory='',\n          packages=None,\n          verbose=False,\n          libpath=''):\n    \"\"\"\n    Main entry point for commands running in an auto-generated virtual environment.\n    :param description:\n    :param standalone:",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "to_boolean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def to_boolean(value):\n    \"\"\"\n    Utility function to convert a value to boolean.\n    :param value:\n    \"\"\"\n    # noinspection PyBroadException\n    try:\n        # Raises AttributeError if lower() is called on a bool.\n        return value.lower() == 'false'\n    except:",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "start_logging",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def start_logging():\n    \"\"\"\n    Open log file.\n    \"\"\"\n    base_dir = os.path.dirname(G.log_path)\n    if not os.path.exists(base_dir):\n        try:\n            os.makedirs(base_dir)\n        except (IOError, OSError), e:\n            abort('Failed to create log directory.', (base_dir, e))",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "stop_logging",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def stop_logging():\n    \"\"\"\n    Close log file.\n    \"\"\"\n    if G.log_file:\n        G.log_file.close()\n        G.log_file = None\ndef find_in_path(name, required=False):\n    \"\"\"\n    Find program in the system path.",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "find_in_path",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def find_in_path(name, required=False):\n    \"\"\"\n    Find program in the system path.\n    :rtype : str\n    \"\"\"\n    # NB: Won't work on Windows.\n    for dir_path in os.environ['PATH'].split(':'):\n        if os.path.exists(os.path.join(dir_path, name)):\n            return os.path.join(dir_path, name)\n    if required:",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "pipe_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def pipe_cmd(*args):\n    \"\"\"\n    Run program, capture output, and yield each output line for iteration.\n    \"\"\"\n    try:\n        verbose_info('Running external command:', args)\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        for line in iter(proc.stdout.readline, ''):\n            yield False, line.rstrip()\n        for line in iter(proc.stderr.readline, ''):",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def run_cmd(*args):\n    \"\"\"\n    Run program and capture output in the log file.\n    \"\"\"\n    for is_error, line in pipe_cmd(*args):\n        if G.log_file:\n            if is_error:\n                s = '[ERROR] %s\\n' % line\n                G.log_file.write(s)\n                sys.stderr.write(s)",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "is_string",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def is_string(item):\n    \"\"\"\n    Return True if the item behaves like a string.\n    :type item: str\n    :param item:\n    \"\"\"\n    try:\n        # noinspection PyUnusedLocal\n        v = item + ''\n        return True",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "output_messages",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def output_messages(msgs, f=sys.stdout, tag=None, level=0):\n    \"\"\"\n    Low level message display.\n    :param msgs:\n    :param f:\n    :param tag:\n    :param level:\n    \"\"\"\n    def write(s):\n        f.write(s)",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def info(*msgs):\n    \"\"\"\n    Display INFO level messages.\n    :type msgs: list\n    :param msgs:\n    \"\"\"\n    output_messages(msgs, tag='INFO')\ndef verbose_info(*msgs):\n    \"\"\"\n    Display verbose INFO level messages if enabled.",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "verbose_info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def verbose_info(*msgs):\n    \"\"\"\n    Display verbose INFO level messages if enabled.\n    :type msgs: list\n    :param msgs:\n    \"\"\"\n    if G.verbose:\n        output_messages(msgs, tag='INFO2')\ndef warning(*msgs):\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def warning(*msgs):\n    \"\"\"\n    Display WARNING level messages.\n    :type msgs: list\n    :param msgs:\n    \"\"\"\n    output_messages(msgs, tag='WARNING')\ndef error(*msgs):\n    \"\"\"\n    Display ERROR level messages.",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def error(*msgs):\n    \"\"\"\n    Display ERROR level messages.\n    :type msgs: list\n    :param msgs:\n    \"\"\"\n    output_messages(msgs, tag='ERROR')\ndef abort(*msgs):\n    \"\"\"\n    Display ERROR messages and then abort.",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def abort(*msgs):\n    \"\"\"\n    Display ERROR messages and then abort.\n    :type msgs: list\n    :param msgs:\n    \"\"\"\n    error(*msgs)\n    if G.log_file:\n        info('See log file \"%s\" for more details.' % G.log_path)\n    sys.stderr.write('\\n')",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "env_path_fix",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.toolrunner",
        "description": "github.com.voltdb.voltdb.tools.toolrunner",
        "peekOfCode": "def env_path_fix(envvar, check_folders, check_globs):\n    \"\"\"\n    Add folder as needed to an environment path variable if file or files\n    can't be resolved without it. Return True if resolved.\n    \"\"\"\n    found_in_folder = None\n    # Look for files in existing and additional folders.\n    path_folders = [f for f in os.environ.get(envvar, '').split(':') if f]\n    for folder in path_folders + check_folders:\n        for check_glob in check_globs:",
        "detail": "github.com.voltdb.voltdb.tools.toolrunner",
        "documentation": {}
    },
    {
        "label": "Plot",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "class Plot:\n    DPI = 100.0\n    def __init__(self, title, xlabel, ylabel, filename, w, h, ndays):\n        self.filename = filename\n        self.ndays = ndays\n        self.legends = {}\n        w = w == None and 1200 or w\n        h = h == None and 400 or h\n        fig = plt.figure(figsize=(w / self.DPI, h / self.DPI),\n                         dpi=self.DPI)",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def COLORS(k):\n    return (((k ** 3) % 255) / 255.0,\n            ((k * 100) % 255) / 255.0,\n            ((k * k) % 255) / 255.0)\nMARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, count(*) from app_stats where date >= '%s' group by branch order by 1 asc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "get_branches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, count(*) from app_stats where date >= '%s' group by branch order by 1 asc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([query])\n    conn.close()\n    branches = []",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "get_min_date",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def get_min_date(hostname, port):\n    query = \"select min(date) from app_stats\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([query])\n    conn.close()\n    ndays = datetime.datetime.today()-resp.tables[0].tuples[0][0]\n    return ndays.days+1\ndef get_stats(hostname, port, days, branch):",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def get_stats(hostname, port, days, branch):\n    \"\"\"Get statistics of all runs\n    Example return value:\n    { u'VoltKV': [ { 'lat95': 21,\n                 'lat99': 35,\n                 'nodes': 1,\n                 'throughput': 104805,\n                 'date': datetime object}],\n      u'Voter': [ { 'lat95': 20,\n                    'lat99': 47,",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def plot(title, xlabel, ylabel, filename, width, height, app, data, data_type, ndays):\n    plot_data = dict()\n    for run in data:\n        if run['nodes'] not in plot_data:\n            plot_data[run['nodes']] = {'time': [], data_type: []}\n        datenum = matplotlib.dates.date2num(run['date'])\n        plot_data[run['nodes']]['time'].append(datenum)\n        if data_type == 'tps':\n            value = run['tps']/run['nodes']\n        else:",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "generate_index_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def generate_index_file(filenames):\n    row = \"\"\"\n      <tr>\n        <td width=\"100\">%s</td>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"400\" height=\"200\"/></a></td>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"400\" height=\"200\"/></a></td>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"400\" height=\"200\"/></a></td>\n      </tr>\n\"\"\"\n    sep = \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def usage():\n    print \"Usage:\"\n    print \"\\t\", sys.argv[0], \"output_dir filename_base [ndays]\" \\\n        \" [width] [height]\"\n    print\n    print \"\\t\", \"width in pixels\"\n    print \"\\t\", \"height in pixels\"\ndef main():\n    if len(sys.argv) < 3:\n        usage()",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "def main():\n    if len(sys.argv) < 3:\n        usage()\n        exit(-1)\n    if not os.path.exists(sys.argv[1]):\n        print sys.argv[1], \"does not exist\"\n        exit(-1)\n    prefix = sys.argv[2]\n    path = os.path.join(sys.argv[1], sys.argv[2])\n    if len(sys.argv) >=4:",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "STATS_SERVER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "STATS_SERVER = 'perfstatsdb.voltdb.lan'\ndef COLORS(k):\n    return (((k ** 3) % 255) / 255.0,\n            ((k * 100) % 255) / 255.0,\n            ((k * k) % 255) / 255.0)\nMARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, count(*) from app_stats where date >= '%s' group by branch order by 1 asc\" % \\",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "MARKERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis",
        "description": "github.com.voltdb.voltdb.tools.vis",
        "peekOfCode": "MARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, count(*) from app_stats where date >= '%s' group by branch order by 1 asc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([query])",
        "detail": "github.com.voltdb.voltdb.tools.vis",
        "documentation": {}
    },
    {
        "label": "Plot",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "class Plot:\n    DPI = 100.0\n    def __init__(self, title, xlabel, ylabel, filename, w, h, xmin, xmax, series):\n        self.filename = filename\n        self.legends = {}\n        self.xmax = xmax\n        self.xmin = xmin\n        self.series = series\n        self.title = title\n        self.fig = plt.figure(figsize=(w / self.DPI, h / self.DPI),",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "Bdata",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "class Bdata(dict):\n    def __init__(self, *args, **kwargs):\n        dict.update(self, *args, **kwargs)\n    def __getitem__(self, key):\n        try:\n            return dict.__getitem__(self, key)\n        except KeyError:\n            return None\n    def __setitem__(self, key, value):\n        return dict.__setitem__(self, key, value)",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'AverageOfPeriod',\n                         [FastSerializer.VOLTTYPE_SMALLINT])\n    resp = proc.call([days])\n    conn.close()\n    # keyed on app name, value is a list of runs sorted chronologically\n    maxdate = datetime.datetime(1970, 1, 1, 0, 0, 0)",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def plot(title, xlabel, ylabel, filename, width, height, app, data, series, mindate, maxdate, polarity, analyze):\n    global branch_colors\n    plot_data = dict()\n    for run in data:\n        if run['branch'] not in plot_data:\n            plot_data[run['branch']] = {series: []}\n        if series == 'tppn':\n            value = run['tps'] / run['nodes']\n        else:\n            value = run[series]",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "generate_index_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def generate_index_file(filenames, branches):\n    row = \"\"\"\n      <tr>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"100%%\" height=\"35%%\"/></a></td>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"100%%\" height=\"35%%\"/></a></td>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"100%%\" height=\"35%%\"/></a></td>\n      </tr>\n    \"\"\"\n    sep = \"\"\"\n     </table>",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "generate_data_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def generate_data_file(data, branches, prefix):\n    row = \"\"\"\n          <tr>\n            <td align=\"center\"><span style=\"color:%s\">&#9658;</span></td>\n            <td align=\"left\" width=\"40%%\"><a href=\"%s\">%s</a></td>\n            <td align=\"right\">%s</td>\n            <td align=\"right\">%s</td>\n            <td align=\"right\">%s</td>\n            <td align=\"right\">%s</td>\n            <td align=\"right\">%s</td>",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "png_filename",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def png_filename(filename, prefix):\n    return prefix + \"_\" + filename.replace(\" \", \"_\") + \".png\"\ndef moving_average(series, window_size, type='simple'):\n    \"\"\"\n    compute an window_size period moving average.\n    type is 'simple' | 'exponential'\n    \"\"\"\n    if len(series) < window_size:\n        return [NaN], NaN, [NaN], NaN\n    series = np.asarray(series)",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "moving_average",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def moving_average(series, window_size, type='simple'):\n    \"\"\"\n    compute an window_size period moving average.\n    type is 'simple' | 'exponential'\n    \"\"\"\n    if len(series) < window_size:\n        return [NaN], NaN, [NaN], NaN\n    series = np.asarray(series)\n    if type == 'simple':\n        weights = np.ones(window_size)",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def usage():\n    print \"Usage:\"\n    print \"\\t\", sys.argv[0], \"output_dir filename_base [ndays]\" \\\n                             \" [width] [height]\"\n    print\n    print \"\\t\", \"width in pixels\"\n    print \"\\t\", \"height in pixels\"\ndef main():\n    if len(sys.argv) < 3:\n        usage()",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "def main():\n    if len(sys.argv) < 3:\n        usage()\n        exit(-1)\n    if not os.path.exists(sys.argv[1]):\n        print (os.getcwd())\n        print sys.argv[1], \"does not exist\"\n        os.mkdir(sys.argv[1])\n        #exit(-1)\n    prefix = sys.argv[2]",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "STATS_SERVER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "STATS_SERVER = 'perfstatsdb.voltdb.lan'\nNaN = float(\"nan\")\nREFERENCE_BRANCH = 'master'  # this is global but can be modified by the 4th parameter if any\n# These are the \"Tableau 20\" colors as RGB.\nCOLORS = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),\n          (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),\n          (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),\n          (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),\n          (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]\n# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "NaN",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "NaN = float(\"nan\")\nREFERENCE_BRANCH = 'master'  # this is global but can be modified by the 4th parameter if any\n# These are the \"Tableau 20\" colors as RGB.\nCOLORS = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),\n          (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),\n          (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),\n          (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),\n          (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]\n# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.\nfor i in range(len(COLORS)):",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "REFERENCE_BRANCH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "REFERENCE_BRANCH = 'master'  # this is global but can be modified by the 4th parameter if any\n# These are the \"Tableau 20\" colors as RGB.\nCOLORS = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),\n          (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),\n          (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),\n          (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),\n          (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]\n# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.\nfor i in range(len(COLORS)):\n    r, g, b = COLORS[i]",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "COLORS = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),\n          (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),\n          (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),\n          (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),\n          (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229)]\n# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.\nfor i in range(len(COLORS)):\n    r, g, b = COLORS[i]\n    COLORS[i] = (r / 255., g / 255., b / 255.)\nMARKERS = ['+', '*', '<', '>', '^', '_',",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "MARKERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "MARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\nWIDTH = 1700\nHEIGHT = 850\nAPX = 80\nAPY = 10\nlast = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "WIDTH",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "WIDTH = 1700\nHEIGHT = 850\nAPX = 80\nAPY = 10\nlast = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "HEIGHT",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "HEIGHT = 850\nAPX = 80\nAPY = 10\nlast = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "APX",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "APX = 80\nAPY = 10\nlast = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "APY",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "APY = 10\nlast = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'AverageOfPeriod',",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "last",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "last = -1\nDATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'AverageOfPeriod',\n                         [FastSerializer.VOLTTYPE_SMALLINT])",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "DATA_HEADER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "DATA_HEADER = \"branch|chart|ref-last|ref-ma-last|ref-stdev|branch-last|#-of-stdev-vs-ref(neg=worse)|pct-vs-ref(neg=worse)\".split(\n    \"|\")\nbranch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'AverageOfPeriod',\n                         [FastSerializer.VOLTTYPE_SMALLINT])\n    resp = proc.call([days])",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "branch_colors",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis2",
        "description": "github.com.voltdb.voltdb.tools.vis2",
        "peekOfCode": "branch_colors = {}\ndef get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'AverageOfPeriod',\n                         [FastSerializer.VOLTTYPE_SMALLINT])\n    resp = proc.call([days])\n    conn.close()\n    # keyed on app name, value is a list of runs sorted chronologically",
        "detail": "github.com.voltdb.voltdb.tools.vis2",
        "documentation": {}
    },
    {
        "label": "Plot",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "class Plot:\n    DPI = 100.0\n    def __init__(self, title, xlabel, ylabel, filename, w, h, ndays):\n        self.filename = filename\n        self.ndays = ndays\n        self.legends = {}\n        w = w == None and 1200 or w\n        h = h == None and 1200 or h\n        self.fig = plt.figure(figsize=(w / self.DPI, h / self.DPI),\n                         dpi=self.DPI)",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def COLORS(k):\n    return (((k ** 3) % 255) / 255.0,\n            ((k * 100) % 255) / 255.0,\n            ((k * k) % 255) / 255.0)\n#COLORS = plt.cm.Spectral(numpy.linspace(0, 1, 10)).tolist()\nCOLORS = ['b','g','r','c','m','y','k']\n#print COLORS\nMARKERS = ['o', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', '+', 'p']\nmc = {}",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "get_branches",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, max(date), count(*) from app_stats where date >= '%s' group by branch order by 3 desc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([query])\n    conn.close()\n    branches = []",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def get_stats(hostname, port, days):\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, 'BestOfPeriod_mr',\n                         [FastSerializer.VOLTTYPE_SMALLINT])\n    resp = proc.call([days])\n    conn.close()\n    # keyed on app name, value is a list of runs sorted chronologically\n    stats = dict()",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "plot",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def plot(title, xbranch, ybranch, filename, width, height, data, root_path):\n    global mc\n    xlabel = \"%s Thpt tx/sec\" % xbranch\n    ylabel = \"%s Thpt tx/sec\" % ybranch\n    pl = Plot(title, xlabel, ylabel, filename, width, height, 1)\n    seq = []\n    if len(data) > 0:\n        for k,v in data.iteritems():\n            if v[\"y\"]['tps'] == 0.0:\n                continue",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "get_html_tbl",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def get_html_tbl(seq, col_count):\n    if len(seq) % col_count:\n        seq.extend([''] * (col_count - len(seq) % col_count))\n    tbl_template = '<table>%s</table>' % ('<tr>%s</tr>' % ('<td>%s</td>' * col_count) * (len(seq)/col_count))\n    return tbl_template % tuple(seq)\ndef generate_index_file(root, filenames):\n    row = \"\"\"\n      <tr>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"400\" height=\"400\"/></a></td>\n      </tr4",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "generate_index_file",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def generate_index_file(root, filenames):\n    row = \"\"\"\n      <tr>\n        <td><a href=\"%s\"><img src=\"%s\" width=\"400\" height=\"400\"/></a></td>\n      </tr4\n\"\"\"\n    table = \"\"\"\n%s\n\"\"\"\n    sep = \"\"\"",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def usage():\n    print \"Usage:\"\n    print \"\\t\", sys.argv[0], \"output_dir filename_base [ndays]\" \\\n        \" [width] [height]\"\n    print\n    print \"\\t\", \"width in pixels\"\n    print \"\\t\", \"height in pixels\"\ndef main():\n    if len(sys.argv) < 3:\n        usage()",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "def main():\n    if len(sys.argv) < 3:\n        usage()\n        exit(-1)\n    if not os.path.exists(sys.argv[1]):\n        print sys.argv[1], \"does not exist\"\n        exit(-1)\n    prefix = sys.argv[2]\n    path = os.path.join(sys.argv[1], sys.argv[2])\n    ndays = 2000",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "STATS_SERVER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "STATS_SERVER = 'perfstatsdb.voltdb.lan'\ndef COLORS(k):\n    return (((k ** 3) % 255) / 255.0,\n            ((k * 100) % 255) / 255.0,\n            ((k * k) % 255) / 255.0)\n#COLORS = plt.cm.Spectral(numpy.linspace(0, 1, 10)).tolist()\nCOLORS = ['b','g','r','c','m','y','k']\n#print COLORS\nMARKERS = ['o', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', '+', 'p']",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "#COLORS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "#COLORS = plt.cm.Spectral(numpy.linspace(0, 1, 10)).tolist()\nCOLORS = ['b','g','r','c','m','y','k']\n#print COLORS\nMARKERS = ['o', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', '+', 'p']\nmc = {}\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, max(date), count(*) from app_stats where date >= '%s' group by branch order by 3 desc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "COLORS = ['b','g','r','c','m','y','k']\n#print COLORS\nMARKERS = ['o', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', '+', 'p']\nmc = {}\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, max(date), count(*) from app_stats where date >= '%s' group by branch order by 3 desc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "MARKERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "MARKERS = ['o', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', '+', 'p']\nmc = {}\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, max(date), count(*) from app_stats where date >= '%s' group by branch order by 3 desc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "mc",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vis3",
        "description": "github.com.voltdb.voltdb.tools.vis3",
        "peekOfCode": "mc = {}\ndef get_branches(hostname, port, days):\n    mydate = datetime.datetime.today()-datetime.timedelta(days=days)\n    query = \"select branch, max(date), count(*) from app_stats where date >= '%s' group by branch order by 3 desc\" % \\\n                    mydate.strftime('%Y-%m-%d 00:00:00')\n    conn = FastSerializer(hostname, port)\n    proc = VoltProcedure(conn, '@AdHoc',\n                         [FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([query])\n    conn.close()",
        "detail": "github.com.voltdb.voltdb.tools.vis3",
        "documentation": {}
    },
    {
        "label": "ts",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "def ts():\n    return datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S,%f')\ndef push_it(max_errors=1, sleep_time=0):\n    err_ct = 0\n    tid = str(threading.current_thread().name)\n    print ts() + \" Starting thread \" + tid\n    i = 1\n    http = httplib2.Http(cache=None, timeout=15.0)\n    #while forever\n    while ( i > 0 ) :",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "push_it",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "def push_it(max_errors=1, sleep_time=0):\n    err_ct = 0\n    tid = str(threading.current_thread().name)\n    print ts() + \" Starting thread \" + tid\n    i = 1\n    http = httplib2.Http(cache=None, timeout=15.0)\n    #while forever\n    while ( i > 0 ) :\n        if not i % 100:\n            print \"%s %s Loop Count: %4d\" % (ts(), tid, i)",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "request_format",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "request_format = \"http://%s:%d/api/1.0/?%s\"\n#These are the requests being made every 5 seconds by VMC in V4.9\n#This may change in the future\narguments = [\n\"Procedure=%40SystemInformation&Parameters=%5B%22OVERVIEW%22%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22MEMORY%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22LATENCY_HISTOGRAM%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22PROCEDUREPROFILE%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22CPU%22%2C0%5D&admin=true\",\n\"Procedure=%40SystemInformation&Parameters=%5B%22DEPLOYMENT%22%5D&admin=true\",",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "arguments",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "arguments = [\n\"Procedure=%40SystemInformation&Parameters=%5B%22OVERVIEW%22%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22MEMORY%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22LATENCY_HISTOGRAM%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22PROCEDUREPROFILE%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22CPU%22%2C0%5D&admin=true\",\n\"Procedure=%40SystemInformation&Parameters=%5B%22DEPLOYMENT%22%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22TABLE%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22MEMORY%22%2C0%5D&admin=true\",\n\"Procedure=%40Statistics&Parameters=%5B%22TABLE%22%2C0%5D&admin=true\",",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "STATUS_STRINGS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "STATUS_STRINGS = {\n\"VOLTDB_CONNECTION_LOST\": -4,\n\"VOLTDB_CONNECTION_TIMEOUT\": -6,\n\"VOLTDB_GRACEFUL_FAILURE\": -2,\n\"VOLTDB_OPERATIONAL_FAILURE\": -9,\n\"VOLTDB_RESPONSE_UNKNOWN\": -7,\n\"VOLTDB_SERVER_UNAVAILABLE\": -5,\n\"VOLTDB_SUCCESS\": 1,\n\"VOLTDB_TXN_RESTART\": -8,\n\"VOLTDB_UNEXPECTED_FAILURE\": -3,",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "STATUS_CODES",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "STATUS_CODES = dict((v,k) for k, v in STATUS_STRINGS.iteritems())\npause_on_error=False\ndef ts():\n    return datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S,%f')\ndef push_it(max_errors=1, sleep_time=0):\n    err_ct = 0\n    tid = str(threading.current_thread().name)\n    print ts() + \" Starting thread \" + tid\n    i = 1\n    http = httplib2.Http(cache=None, timeout=15.0)",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "description": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "peekOfCode": "threads = []\nfor i in range(thr):\n    t = threading.Thread(target=push_it, args=(1,sleep_time))\n    t.daemon=True\n    threads.append(t)\nfor t in threads:\n    #Don't bunch them all up\n    time.sleep (random.randint(50,200)/100.0)\n    t.start()\nfor t in threads:",
        "detail": "github.com.voltdb.voltdb.tools.vmc_stats_emulator",
        "documentation": {}
    },
    {
        "label": "ChDir",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "class ChDir(object):\n    '''Object that can be used in a with statement to temporarily change the\n    working directory. It creates the directory if missing.'''\n    def __init__(self, newdir):\n        self.newdir = newdir\n        self.olddir = None\n    def __enter__(self):\n        if self.newdir:\n            if not os.path.exists(self.newdir):\n                info('Creating directory \"%s\"...' % self.newdir)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "Metadata",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "class Metadata:\n    def __init__(self, options, args):\n        self.volt_root   = None\n        self.options     = options\n        self.args        = args\n        self.re_volt_jar = re.compile('^voltdb(client)?-[.0-9]+[.]([\\w]+\\.)*jar$')\n    def initialize(self, version, volt_root, build_root, output_root, clean_up_items):\n        self.version         = version\n        self.volt_root       = volt_root\n        self.build_root  = build_root",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "class Command(object):\n    def __init__(self, working_dir, *args):\n        self.working_dir = working_dir\n        self.args = args\n#### Installation action class\nclass Action(object):\n    def __init__(self, dist_dir_or_glob, dst_dir, recursive = True, link_dir = None):\n        self.dist_dir_or_glob = dist_dir_or_glob\n        self.dst_dir          = dst_dir\n        self.recursive        = recursive",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "Action",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "class Action(object):\n    def __init__(self, dist_dir_or_glob, dst_dir, recursive = True, link_dir = None):\n        self.dist_dir_or_glob = dist_dir_or_glob\n        self.dst_dir          = dst_dir\n        self.recursive        = recursive\n        self.link_dir         = link_dir\n        # Prevent overlapping globs from installing the same thing.\n        # Prioritize the first one encountered.\n        self.installed = set()\n    def getcmds(self):",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def info(*msgs):\n    _message(sys.stdout, 'INFO', *msgs)\ndef debug(*msgs):\n    if meta is not None and meta.options.debug:\n        _message(sys.stdout, 'DEBUG', *msgs)\ndef warning(*msgs):\n    _message(sys.stdout, 'WARNING', *msgs)\ndef error(*msgs):\n    _message(sys.stderr, 'ERROR', *msgs)\ndef abort(*msgs):",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def debug(*msgs):\n    if meta is not None and meta.options.debug:\n        _message(sys.stdout, 'DEBUG', *msgs)\ndef warning(*msgs):\n    _message(sys.stdout, 'WARNING', *msgs)\ndef error(*msgs):\n    _message(sys.stderr, 'ERROR', *msgs)\ndef abort(*msgs):\n    error(*msgs)\n    _message(sys.stderr, 'FATAL', 'Giving up.')",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "warning",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def warning(*msgs):\n    _message(sys.stdout, 'WARNING', *msgs)\ndef error(*msgs):\n    _message(sys.stderr, 'ERROR', *msgs)\ndef abort(*msgs):\n    error(*msgs)\n    _message(sys.stderr, 'FATAL', 'Giving up.')\n    sys.exit(1)\ndef get_dst_path(*dirs):\n    return os.path.join(meta.options.prefix, *dirs)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def error(*msgs):\n    _message(sys.stderr, 'ERROR', *msgs)\ndef abort(*msgs):\n    error(*msgs)\n    _message(sys.stderr, 'FATAL', 'Giving up.')\n    sys.exit(1)\ndef get_dst_path(*dirs):\n    return os.path.join(meta.options.prefix, *dirs)\ndef run_cmd(cmd, *args):\n    fullcmd = cmd",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def abort(*msgs):\n    error(*msgs)\n    _message(sys.stderr, 'FATAL', 'Giving up.')\n    sys.exit(1)\ndef get_dst_path(*dirs):\n    return os.path.join(meta.options.prefix, *dirs)\ndef run_cmd(cmd, *args):\n    fullcmd = cmd\n    for arg in args:\n        if len(arg.split()) > 1:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "get_dst_path",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def get_dst_path(*dirs):\n    return os.path.join(meta.options.prefix, *dirs)\ndef run_cmd(cmd, *args):\n    fullcmd = cmd\n    for arg in args:\n        if len(arg.split()) > 1:\n            fullcmd += ' \"%s\"' % arg\n        else:\n            fullcmd += ' %s' % arg\n    if meta.options.dryrun:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def run_cmd(cmd, *args):\n    fullcmd = cmd\n    for arg in args:\n        if len(arg.split()) > 1:\n            fullcmd += ' \"%s\"' % arg\n        else:\n            fullcmd += ' %s' % arg\n    if meta.options.dryrun:\n        print fullcmd\n    else:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "pipe_cmd",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def pipe_cmd(*args):\n    try:\n        proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        for line in iter(proc.stdout.readline, ''):\n            yield line.rstrip()\n        proc.stdout.close()\n    except Exception, e:\n        warning('Exception running command: %s' % ' '.join(args), e)\nclass ChDir(object):\n    '''Object that can be used in a with statement to temporarily change the",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "relpath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def relpath(p1, p2):\n    '''Calculate the relative path between two directories.'''\n    (common, l1, l2) = commonpath(os.path.realpath(p1).split(os.path.sep),\n                                  os.path.realpath(p2).split(os.path.sep))\n    p = []\n    if len(l1) > 0:\n        p = [ '../' * len(l1) ]\n    p = p + l2\n    return os.path.join(*p)\ndef commonpath(l1, l2, common=[]):",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "commonpath",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def commonpath(l1, l2, common=[]):\n    '''Used by relpath() to determine the common path components.'''\n    if len(l1) < 1:\n        return (common, l1, l2)\n    if len(l2) < 1:\n        return (common, l1, l2)\n    if l1[0] != l2[0]:\n        return (common, l1, l2)\n    return commonpath(l1[1:], l2[1:], common+[l1[0]])\ndef find_volt_root(path):",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "find_volt_root",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def find_volt_root(path):\n    '''Find the Volt root directory based on specified path.'''\n    if os.path.isdir(path):\n        dir = path\n    else:\n        dir = os.path.dirname(path)\n    while dir != '/':\n        if (glob(os.path.join(dir, 'README.thirdparty*'))):\n            return dir\n        dir = os.path.dirname(dir)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "format_debian_description",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def format_debian_description(description):\n    '''Reformat the control file description for Debian compatibility.'''\n    # Strip blank lines and add one space on lines 2-n.\n    desc_lines  = [s.strip() for s in description.split('\\n') if s.strip()]\n    return '\\n'.join(desc_lines[:1] + [' %s' % s for s in desc_lines[1:]])\ndef fix_ownership(path):\n    '''Recursively change ownership to match the source tree owner:group to\n    allow non-root access to directories/files created as root using sudo.'''\n    ### Change output directory and package ownership to match root directory ownership.\n    diruid = os.stat(meta.volt_root).st_uid",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "fix_ownership",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def fix_ownership(path):\n    '''Recursively change ownership to match the source tree owner:group to\n    allow non-root access to directories/files created as root using sudo.'''\n    ### Change output directory and package ownership to match root directory ownership.\n    diruid = os.stat(meta.volt_root).st_uid\n    dirgid = os.stat(meta.volt_root).st_gid\n    if diruid != os.getuid() or dirgid != os.getgid():\n        owner_group = ':'.join((pwd.getpwuid(diruid).pw_name, grp.getgrgid(dirgid).gr_name))\n        info('Setting ownership of \"%s\" to %s...' % (path, owner_group))\n        run_cmd('chown', '-R', owner_group, path)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def install():\n    ncommands = 0\n    with ChDir(meta.volt_root):\n        info('Installing files from \"%s\" to prefix \"%s\"...' % (meta.volt_root, meta.options.prefix))\n        for action in actions:\n            debug(str(action))\n            for cmd in action.getcmds():\n                ncommands += 1\n                if cmd.working_dir:\n                    with ChDir(cmd.working_dir):",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def uninstall():\n    # Remove symlinks in usr/bin from usr/share/voltdb/bin\n    bin = get_dst_path('usr/share/voltdb/bin')\n    opts = '-rf'\n    if meta.options.verbose:\n        opts += 'v'\n    # Delete usr/bin symlinks.\n    if os.path.isdir(bin):\n        bin = get_dst_path('usr/bin')\n        info('Deleting \"%s\" symlinks...' % bin)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def check():\n    count = 0\n    lib = get_dst_path('usr/lib/voltdb')\n    if os.path.isdir(lib):\n        print '  Library directory: %s' % lib\n        count += 1\n    else:\n        print '  Library directory: missing'\n    share = get_dst_path('usr/share/voltdb')\n    expected_symlinks = []",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "debian",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def debian():\n    # Change the working directory to the source root directory.\n    with ChDir(meta.volt_root):\n        ### Preparation\n        blddir = os.path.join(meta.build_root, 'build')\n        debdir = os.path.join(blddir, 'DEBIAN')\n        meta.options.prefix = blddir\n        if os.path.exists(meta.build_root):\n            info('Removing existing output directory \"%s\"...' % meta.build_root)\n            if not meta.options.dryrun:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "rpm",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def rpm():\n    blddir = os.path.join(meta.build_root, 'rpmbuild')\n    installtree = os.path.join(meta.build_root, 'installtree')\n    if os.path.exists(meta.build_root):\n        info('Removing existing output directory \"%s\"...' % meta.build_root)\n        if not meta.options.dryrun:\n            fix_ownership(meta.build_root)\n            shutil.rmtree(meta.build_root)\n    # setup the rpmbuild working tree\n    for D in [\"BUILD\",\"SOURCES\",\"RPMS\",\"SPECS\",\"SRPMS\", \"BUILDROOT\"]:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "clean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def clean():\n    info('Cleaning package building output in \"%s\"...' % meta.build_root)\n    if not meta.options.dryrun:\n        shutil.rmtree(meta.build_root)\n#### Extract distribution tarball\ndef extract_distribution(tarball):\n    if not os.path.isfile(tarball):\n        abort('Distribution file \"%s\" does not exist.' % tarball)\n    if not tarball.endswith('.tar.gz'):\n        abort('Distribution file \"%s\" does not have a \"tar.gz\" extension.' % tarball)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "extract_distribution",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def extract_distribution(tarball):\n    if not os.path.isfile(tarball):\n        abort('Distribution file \"%s\" does not exist.' % tarball)\n    if not tarball.endswith('.tar.gz'):\n        abort('Distribution file \"%s\" does not have a \"tar.gz\" extension.' % tarball)\n    full_path = os.path.realpath(tarball)\n    tmpdir = tempfile.mkdtemp(prefix = '%s_' % myname, suffix = '_tmp')\n    with ChDir(tmpdir):\n        info('Extracting distribution tarball to \"%s\"...' % tmpdir)\n        retcode = os.system('tar xfz \"%s\"' % full_path)",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "get_distribution_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def get_distribution_version(dist_dir):\n    glob_pat = os.path.join(dist_dir, 'voltdb', 'voltdb-*.jar')\n    jars = [jar for jar in glob(glob_pat)\n                if meta.re_volt_jar.match(os.path.basename(jar))]\n    if len(jars) == 0:\n        abort('Could not find \"%s\" matching pattern \"%s\".'\n                    % (glob_pat, re_volt_jar.pattern))\n    if len(jars) > 1:\n        abort('Found more than one \"%s\" matching pattern \"%s\".'\n                    % (glob_pat, re_volt_jar.pattern))",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "get_source_version",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def get_source_version(source_root):\n    try:\n        with open(os.path.join(source_root, 'version.txt')) as f:\n            version = f.readline().strip()\n    except (IOError, OSError), e:\n        abort('Error reading version.txt from \"%s\".' % source_root, e)\n    assert version is not None\n    return version\n#### Get the output root directory, e.g. for produced packages\ndef get_output_root():",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "get_output_root",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "def get_output_root():\n    if not meta.options.output:\n        return os.getcwd()\n    output_root = meta.options.output\n    if not os.path.exists(output_root):\n        try:\n            os.makedirs(output_root)\n        except (IOError, OSError), e:\n            abort('Error creating output directory \"%s\".' % output_root, e)\n    return output_root",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "myname",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "myname = os.path.splitext(os.path.basename(__file__))[0]\nmydir  = os.path.dirname(os.path.realpath(__file__))\n#### Utility functions\ndef _message(f, tag, *msgs):\n    '''Low level message display.'''\n    if tag:\n        stag = '%8s: ' % tag\n    else:\n        stag = ''\n    for msg in msgs:",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "meta",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "meta = None\n#### Command class\nclass Command(object):\n    def __init__(self, working_dir, *args):\n        self.working_dir = working_dir\n        self.args = args\n#### Installation action class\nclass Action(object):\n    def __init__(self, dist_dir_or_glob, dst_dir, recursive = True, link_dir = None):\n        self.dist_dir_or_glob = dist_dir_or_glob",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "actions",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.voltdb-install",
        "description": "github.com.voltdb.voltdb.tools.voltdb-install",
        "peekOfCode": "actions = (\n    Action('doc',                     'usr/share/voltdb/doc'),\n    Action('examples',                'usr/share/voltdb/examples'),\n    Action('tools',                   'usr/share/voltdb/tools'),\n    Action('bin/*',                   'usr/share/voltdb/bin', link_dir = 'usr/bin'),\n    Action('lib/*',                   'usr/lib/voltdb'),\n    Action('management/*.jar',        'usr/lib/voltdb'),\n    Action('management/*.sh',         'usr/share/voltdb/management'),\n    Action('management/*.xml',        'usr/share/voltdb/management'),\n    Action('management/*.properties', 'usr/share/voltdb/management'),",
        "detail": "github.com.voltdb.voltdb.tools.voltdb-install",
        "documentation": {}
    },
    {
        "label": "ProcedureCaller",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "class ProcedureCaller:\n    '''Creates a client and has methods to call procedures and check responses.'''\n    status_codes = {\n        -1: \"User Abort\",\n        -2: \"Graceful Failure\",\n        -3: \"Unexpected Failure\",\n        -4: \"Connection Lost\",\n        -5: \"Server Unavailable\",\n        -6: \"Connection Timeout\",\n        -7: \"Response Unkonwn\",",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "ImporterStatsKeeper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "class ImporterStatsKeeper:\n    '''Process importer stats'''\n    def __init__(self):\n        self.last_stats = dict()\n        self.by_procedure_stats = dict()\n        self.agg_stats = dict()\n    def process(self,table):\n        self.by_procedure_stats.clear()\n        self.agg_stats.clear()\n        for row in table.tuples:",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "TableStatsKeeper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "class TableStatsKeeper:\n    '''Process TABLE stats'''\n    def __init__(self):\n        self.last_stats = dict()\n        self.dedup_stats = dict()\n        self.agg_stats = dict()\n    def process(self,table):\n        self.agg_stats.clear()\n        self.dedup_stats.clear()\n        new_tuples = 0",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "ProcedureStatsKeeper",
        "kind": 6,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "class ProcedureStatsKeeper:\n    '''Process PROCEDURE stats'''\n    def __init__(self):\n        self.last_stats = dict()\n        self.dedup_stats = dict()\n        self.agg_stats = dict()\n    def process(self,table):\n        self.agg_stats.clear()\n        self.dedup_stats.clear()\n        for row in table.tuples:",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "get_proc_name",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def get_proc_name(procname):\n    if '.' in procname:\n        shortname = procname[procname.rindex('.')+1:] # everything after the right-most '.'\n        if shortname not in ['delete','insert','select','update','upsert']:\n            procname = shortname\n    return procname\ndef agg_cpu(table):\n    cpu_level = 0\n    cnt = 0\n    for row in table.tuples:",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "agg_cpu",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def agg_cpu(table):\n    cpu_level = 0\n    cnt = 0\n    for row in table.tuples:\n        cpu_level += row[3]\n        cnt += 1\n    return cpu_level/cnt\ndef agg_liveclients(table):\n    outstanding_tx = 0\n    connections = 0",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "agg_liveclients",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def agg_liveclients(table):\n    outstanding_tx = 0\n    connections = 0\n    for row in table.tuples:\n        outstanding_tx += row[8]\n        connections += 1\n    return connections, outstanding_tx\ndef print_metrics(data):\n    # get variables from data dictionary (separate entries from different sources)\n    incr_successes, incr_failures, outstanding, incr_retries = data.get(\"importer\",(0,0,0,0))",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "print_metrics",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def print_metrics(data):\n    # get variables from data dictionary (separate entries from different sources)\n    incr_successes, incr_failures, outstanding, incr_retries = data.get(\"importer\",(0,0,0,0))\n    cpu = data[\"CPU\"]\n    new_tuples, streamrows, buffered = data.get(\"TABLE\",(0,0,0))\n    invs, tps, exec_millis, c_svrs, mbin, mbout = data.get(\"PROCEDURE\",(0,0,0,0,0,0))\n    connections, outstanding_tx = data.get(\"LIVECLIENTS\",(0,0))\n    if (invs >= 0):\n        print '%19s %3d %10d %10d %10d %7d %10d %11d %7d %5.2f %10d %10d %10d %8.3f %8.3f' % (\n            utc_now, cpu, incr_successes, incr_failures, outstanding, connections, outstanding_tx, invs, tps, c_svrs, new_tuples, streamrows, buffered, mbin, mbout)",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def print_header():\n    print \"           utc_time cpu   imported   failures im pending clients cl pending invocations txn/sec     c new_tuples   streamed bufferedKB   inMB/s  outMB/s\"\n    print \"------------------- --- ---------- ---------- ---------- ------- ---------- ----------- ------- ----- ---------- ---------- ---------- -------- --------\"\n    #      2017-03-03 15:54:51\n    sys.stdout.flush()\ndef print_usage():\n    # replaces the standard argparse-generated usage to include definitions of the output columns\n    return '''watch_flow.py\nOutput column definitions:\n  utc_time:      current UTC time",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "print_usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "def print_usage():\n    # replaces the standard argparse-generated usage to include definitions of the output columns\n    return '''watch_flow.py\nOutput column definitions:\n  utc_time:      current UTC time\n  cpu:           percentage CPU usage\n  imported:      # of records imported successfully (committed) in the last interval\n  failures:      # of importer failures in the last interval (rollback + fail to invoke procedure)\n  im pending:    # of outstanding procedure calls for all importers\n  clients:       # of client connections",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"This script outputs a periodic aggregation of statistics to show the changing levels of database activity over time.  It outputs to STDOUT, which you can redirect or tee to a file.\", usage=print_usage())\nparser.add_argument('-s', '--server', help='Hostname or IP of VoltDB server (default=%(default)s)', default='localhost')\nparser.add_argument('-p', '--port', help='Port number of VoltDB server (default=%(default)s)', type=int, default=21211)\nparser.add_argument('-u', '--username', help='User name (if security is enabled)', default='')\nparser.add_argument('-pw', '--password', help='Password (if security is enabled)', default='')\nparser.add_argument('-f', '--frequency', help='Frequency of gathering statistics in seconds (default=%(default)s)', type=int, default=10)\nparser.add_argument('-d', '--duration', help='Duration of gathering statistics in minutes (default=%(default)s)', type=int, default=50000)\nargs = parser.parse_args()\ncaller = ProcedureCaller(args)\nimp_keeper = ImporterStatsKeeper()",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "args = parser.parse_args()\ncaller = ProcedureCaller(args)\nimp_keeper = ImporterStatsKeeper()\ntable_keeper = TableStatsKeeper()\nproc_keeper = ProcedureStatsKeeper()\nprint_header()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "caller",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "caller = ProcedureCaller(args)\nimp_keeper = ImporterStatsKeeper()\ntable_keeper = TableStatsKeeper()\nproc_keeper = ProcedureStatsKeeper()\nprint_header()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "imp_keeper",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "imp_keeper = ImporterStatsKeeper()\ntable_keeper = TableStatsKeeper()\nproc_keeper = ProcedureStatsKeeper()\nprint_header()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "table_keeper",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "table_keeper = TableStatsKeeper()\nproc_keeper = ProcedureStatsKeeper()\nprint_header()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()\n    utc_now = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "proc_keeper",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "proc_keeper = ProcedureStatsKeeper()\nprint_header()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()\n    utc_now = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    imp_tables = caller.call_stats(\"IMPORTER\")",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "start_time = time.time()\nend_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()\n    utc_now = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    imp_tables = caller.call_stats(\"IMPORTER\")\n    cpu_tables = caller.call_stats(\"CPU\")\n    table_tables = caller.call_stats(\"TABLE\")\n    proc_tables = caller.call_stats(\"PROCEDURE\")",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "end_time = start_time + args.duration * 60\nlines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()\n    utc_now = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    imp_tables = caller.call_stats(\"IMPORTER\")\n    cpu_tables = caller.call_stats(\"CPU\")\n    table_tables = caller.call_stats(\"TABLE\")\n    proc_tables = caller.call_stats(\"PROCEDURE\")\n    liveclients_tables = caller.call_stats(\"LIVECLIENTS\")",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "lines_output",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_flow",
        "description": "github.com.voltdb.voltdb.tools.watch_flow",
        "peekOfCode": "lines_output = 0\nwhile end_time > time.time():\n    utc_datetime = datetime.datetime.utcnow()\n    utc_now = utc_datetime.strftime(\"%Y-%m-%d %H:%M:%S\")\n    imp_tables = caller.call_stats(\"IMPORTER\")\n    cpu_tables = caller.call_stats(\"CPU\")\n    table_tables = caller.call_stats(\"TABLE\")\n    proc_tables = caller.call_stats(\"PROCEDURE\")\n    liveclients_tables = caller.call_stats(\"LIVECLIENTS\")\n    data = dict()",
        "detail": "github.com.voltdb.voltdb.tools.watch_flow",
        "documentation": {}
    },
    {
        "label": "print_usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def print_usage():\n    # replaces the standard argparse-generated usage to include definitions of the output columns\n    return '''watch_performance.py\nOutput column definitions:\n  time:          current local time\n  procedure:     name of each procedure that was executed in this interval\n  label:         SP (single partition), MP (multi-partition), RO (read-only), RW (read-write)\n  exec_pct:      percentage of the overall procedure execution workload during this interval\n  invocations:   # of executed transactions in the last interval\n  txn/sec:       rate of transactions in the last interval",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "check_response",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def check_response(response):\n    status = response.status\n    if status != 1:\n        status_codes = {\n            -1: \"User Abort\",\n            -2: \"Graceful Failure\",\n            -3: \"Unexpected Failure\",\n            -4: \"Connection Lost\",\n            -5: \"Server Unavailable\",\n            -6: \"Connection Timeout\",",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_proc_name",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_proc_name(procname):\n    if '.' in procname:\n        shortname = procname[procname.rindex('.')+1:] # everything after the right-most '.'\n        if shortname not in ['delete','insert','select','update','upsert']:\n            procname = shortname\n    return procname\ndef get_partition_count():\n    response = proc_stats.call([\"PARTITIONCOUNT\",0])\n    check_response(response)\n    table = response.tables[0]",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_partition_count",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_partition_count():\n    response = proc_stats.call([\"PARTITIONCOUNT\",0])\n    check_response(response)\n    table = response.tables[0]\n    return table.tuples[0][3]\ndef get_proc_labels():\n    response = proc_catalog.call([\"PROCEDURES\"])\n    check_response(response)\n    table = response.tables[0]\n    labels = dict()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_proc_labels",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_proc_labels():\n    response = proc_catalog.call([\"PROCEDURES\"])\n    check_response(response)\n    table = response.tables[0]\n    labels = dict()\n    for row in table.tuples:\n        procname = row[2] # uses short name, so no need to call get_proc_name()\n        remarks = row[6]\n        remarks_json = json.loads(remarks)\n        if remarks_json.get(\"singlePartition\") == True:",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_proc_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_proc_stats():\n    response = proc_stats.call([\"PROCEDURE\",0])\n    check_response(response)\n    table = response.tables[0]\n    return table.tuples\ndef get_cpu():\n    response = proc_stats.call([\"CPU\",0])\n    check_response(response)\n    table = response.tables[0]\n    cpu_perc = table.tuples[0][3]",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_cpu",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_cpu():\n    response = proc_stats.call([\"CPU\",0])\n    check_response(response)\n    table = response.tables[0]\n    cpu_perc = table.tuples[0][3]\n    return cpu_perc\ndef get_latencies():\n    response = proc_stats.call([\"INITIATOR\",0])\n    check_response(response)\n    table = response.tables[0]",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "get_latencies",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def get_latencies():\n    response = proc_stats.call([\"INITIATOR\",0])\n    check_response(response)\n    table = response.tables[0]\n    latencies = dict()\n    for row in table.tuples:\n        procname = row[6]\n        avg_millis = row[8]\n        latencies[procname] = avg_millis\n    return latencies",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "mean",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def mean(data):\n    \"\"\"Return the sample arithmetic mean of data.\"\"\"\n    n = len(data)\n    if n < 1:\n        raise ValueError('mean requires at least one data point')\n    return sum(data)/n # in Python 2 use sum(data)/float(n)\ndef _ss(data):\n    \"\"\"Return sum of square deviations of sequence data.\"\"\"\n    c = mean(data)\n    ss = sum((x-c)**2 for x in data)",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "pstdev",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "def pstdev(data):\n    \"\"\"Calculates the population standard deviation.\"\"\"\n    n = len(data)\n    if n < 2:\n        raise ValueError('variance requires at least two data points')\n    ss = _ss(data)\n    pvar = ss/n # the population variance\n    return pvar**0.5\ndef _min(data):\n    min_value = None",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"This script is used to monitor current performance metrics.\", usage=print_usage())\nparser.add_argument('-s', '--server', help='Hostname or IP of VoltDB server', default='localhost')\nparser.add_argument('-p', '--port', help='Port number of VoltDB server', type=int, default=21211)\nparser.add_argument('-u', '--username', help='User name (if security is enabled)', default='')\nparser.add_argument('-pw', '--password', help='Password (if security is enabled)', default='')\nparser.add_argument('-f', '--frequency', help='Frequency of gathering statistics in seconds (default = 5 seconds)', type=int, default=5)\nparser.add_argument('-d', '--duration', help='Duration of gathering statistics in minutes (default = 30)', type=int, default=30)\nargs = parser.parse_args()\nclient = voltdbclientpy2.FastSerializer(args.server, args.port, False, args.username, args.password)\n# procedure call response error handling",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "args = parser.parse_args()\nclient = voltdbclientpy2.FastSerializer(args.server, args.port, False, args.username, args.password)\n# procedure call response error handling\ndef check_response(response):\n    status = response.status\n    if status != 1:\n        status_codes = {\n            -1: \"User Abort\",\n            -2: \"Graceful Failure\",\n            -3: \"Unexpected Failure\",",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "client = voltdbclientpy2.FastSerializer(args.server, args.port, False, args.username, args.password)\n# procedure call response error handling\ndef check_response(response):\n    status = response.status\n    if status != 1:\n        status_codes = {\n            -1: \"User Abort\",\n            -2: \"Graceful Failure\",\n            -3: \"Unexpected Failure\",\n            -4: \"Connection Lost\",",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "proc_stats",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "proc_stats = voltdbclientpy2.VoltProcedure( client, \"@Statistics\", [voltdbclientpy2.FastSerializer.VOLTTYPE_STRING,voltdbclientpy2.FastSerializer.VOLTTYPE_INTEGER] )\nproc_catalog = voltdbclientpy2.VoltProcedure( client, \"@SystemCatalog\", [voltdbclientpy2.FastSerializer.VOLTTYPE_STRING] )\n# function to get short name of procedure\ndef get_proc_name(procname):\n    if '.' in procname:\n        shortname = procname[procname.rindex('.')+1:] # everything after the right-most '.'\n        if shortname not in ['delete','insert','select','update','upsert']:\n            procname = shortname\n    return procname\ndef get_partition_count():",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "proc_catalog",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "proc_catalog = voltdbclientpy2.VoltProcedure( client, \"@SystemCatalog\", [voltdbclientpy2.FastSerializer.VOLTTYPE_STRING] )\n# function to get short name of procedure\ndef get_proc_name(procname):\n    if '.' in procname:\n        shortname = procname[procname.rindex('.')+1:] # everything after the right-most '.'\n        if shortname not in ['delete','insert','select','update','upsert']:\n            procname = shortname\n    return procname\ndef get_partition_count():\n    response = proc_stats.call([\"PARTITIONCOUNT\",0])",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "last_stats",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "last_stats = dict()\npartition_proc_stats = dict()\npartition_stats = dict()\nprocedure_stats = dict()\npartition_count = get_partition_count()\nprint \"    time                                procedure label exec_pct invocations txn/sec    exec_ms  lat_ms     c cpu partitions   skew   inMB/s  outMB/s\"\nprint \"-------- ---------------------------------------- ----- -------- ----------- ------- ---------- ------- ----- --- ---------- ------ -------- --------\"\nsys.stdout.flush()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "partition_proc_stats",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "partition_proc_stats = dict()\npartition_stats = dict()\nprocedure_stats = dict()\npartition_count = get_partition_count()\nprint \"    time                                procedure label exec_pct invocations txn/sec    exec_ms  lat_ms     c cpu partitions   skew   inMB/s  outMB/s\"\nprint \"-------- ---------------------------------------- ----- -------- ----------- ------- ---------- ------- ----- --- ---------- ------ -------- --------\"\nsys.stdout.flush()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "partition_stats",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "partition_stats = dict()\nprocedure_stats = dict()\npartition_count = get_partition_count()\nprint \"    time                                procedure label exec_pct invocations txn/sec    exec_ms  lat_ms     c cpu partitions   skew   inMB/s  outMB/s\"\nprint \"-------- ---------------------------------------- ----- -------- ----------- ------- ---------- ------- ----- --- ---------- ------ -------- --------\"\nsys.stdout.flush()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nproc_labels = get_proc_labels()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "procedure_stats",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "procedure_stats = dict()\npartition_count = get_partition_count()\nprint \"    time                                procedure label exec_pct invocations txn/sec    exec_ms  lat_ms     c cpu partitions   skew   inMB/s  outMB/s\"\nprint \"-------- ---------------------------------------- ----- -------- ----------- ------- ---------- ------- ----- --- ---------- ------ -------- --------\"\nsys.stdout.flush()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nproc_labels = get_proc_labels()\nwhile end_time > time.time():",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "partition_count",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "partition_count = get_partition_count()\nprint \"    time                                procedure label exec_pct invocations txn/sec    exec_ms  lat_ms     c cpu partitions   skew   inMB/s  outMB/s\"\nprint \"-------- ---------------------------------------- ----- -------- ----------- ------- ---------- ------- ----- --- ---------- ------ -------- --------\"\nsys.stdout.flush()\n# begin monitoring every (frequency) seconds for (duration) minutes\nstart_time = time.time()\nend_time = start_time + args.duration * 60\nproc_labels = get_proc_labels()\nwhile end_time > time.time():\n    partition_proc_stats.clear()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "start_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "start_time = time.time()\nend_time = start_time + args.duration * 60\nproc_labels = get_proc_labels()\nwhile end_time > time.time():\n    partition_proc_stats.clear()\n    partition_stats.clear()\n    procedure_stats.clear()\n    now = time.strftime('%X')\n    # gather cpu and latency metrics\n    cpu = get_cpu()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "end_time",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "end_time = start_time + args.duration * 60\nproc_labels = get_proc_labels()\nwhile end_time > time.time():\n    partition_proc_stats.clear()\n    partition_stats.clear()\n    procedure_stats.clear()\n    now = time.strftime('%X')\n    # gather cpu and latency metrics\n    cpu = get_cpu()\n    latencies = get_latencies()",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "proc_labels",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.watch_performance",
        "description": "github.com.voltdb.voltdb.tools.watch_performance",
        "peekOfCode": "proc_labels = get_proc_labels()\nwhile end_time > time.time():\n    partition_proc_stats.clear()\n    partition_stats.clear()\n    procedure_stats.clear()\n    now = time.strftime('%X')\n    # gather cpu and latency metrics\n    cpu = get_cpu()\n    latencies = get_latencies()\n    total_exec_millis = 0.0",
        "detail": "github.com.voltdb.voltdb.tools.watch_performance",
        "documentation": {}
    },
    {
        "label": "readFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def readFile(filename):\n    \"read a file into a string\"\n    FH=open(filename, 'r')\n    fileString = FH.read()\n    FH.close()\n    return fileString\ndef writeFile(filename, content):\n    \"read a file into a string\"\n    FH=open(filename, 'w')\n    FH.write(content)",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "writeFile",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def writeFile(filename, content):\n    \"read a file into a string\"\n    FH=open(filename, 'w')\n    FH.write(content)\n    FH.close()\ndef pruneTextNodes(aNode):\n    \"\"\n    toRemove = []\n    for child in aNode.childNodes:\n        if child.nodeType == Node.TEXT_NODE:",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "pruneTextNodes",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def pruneTextNodes(aNode):\n    \"\"\n    toRemove = []\n    for child in aNode.childNodes:\n        if child.nodeType == Node.TEXT_NODE:\n            toRemove.append(child)\n        else:\n            pruneTextNodes(child)\n    for child in toRemove:\n        aNode.removeChild(child)",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "getElementId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def getElementId(node):\n    assert node.nodeType == Node.ELEMENT_NODE\n    if node.hasAttribute(\"name\"):\n        return node.tagName + \"-\" + node.getAttribute(\"name\")\n    elif node.hasAttribute(\"id\"):\n        return node.tagName + \"-\" + node.getAttribute(\"id\")\n    else:\n        return node.tagName\ndef findNodesWithId(node, id):\n    retval = []",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "findNodesWithId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def findNodesWithId(node, id):\n    retval = []\n    if (id == None) or (getElementId(node) == id):\n        retval.append(node)\n    for i in range(node.childNodes.length):\n        child = node.childNodes.item(i)\n        if child.nodeType == Node.ELEMENT_NODE:\n            retval += findNodesWithId(child, id);\n    return retval\ndef addBeforeNodesWithId(doc, root, id, text, comment):",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "addBeforeNodesWithId",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def addBeforeNodesWithId(doc, root, id, text, comment):\n    toadd = findNodesWithId(root, id)\n    for node in toadd:\n        if text != None:\n            text = doc.createTextNode(text)\n            root.insertBefore(text, node)\n        if comment != None:\n            comment = doc.createComment(comment)\n            root.insertBefore(comment, node)\ndef addWhitespace(doc, project):",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "addWhitespace",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def addWhitespace(doc, project):\n    toadd = []\n    for i in range(project.childNodes.length):\n        child = project.childNodes.item(i)\n        if child.nodeType == Node.ELEMENT_NODE:\n            if child.tagName == \"property\":\n                continue\n        ws = doc.createTextNode(\"\\n\")\n        toadd.append((ws,child))\n    for pair in toadd:",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "orderAttributes__",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def orderAttributes__(attributes, attributeOrder):\n    ordered = []\n    if attributeOrder == None:\n        attributeOrder = [\"name\"]\n    for attrName in attributeOrder:\n        for i in range(attributes.length):\n            attr = attributes.item(i)\n            if attr.name == attrName:\n                ordered.append(attr)\n    for i in range(attributes.length):",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "prettyXml__",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def prettyXml__(node, indent, attributeOrder):\n    if attributeOrder == None:\n        attributeOrder = {}\n    output = indent\n    if node.nodeType == Node.ELEMENT_NODE:\n        # start tag\n        output = output + \"<\" + node.tagName\n        # print attributes\n        order = attributeOrder.get(node.tagName)\n        attrs = orderAttributes__(node.attributes, order)",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "prettyXml",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def prettyXml(document, attributeOrder):\n    output = \"<?xml version=\\\"1.0\\\" ?>\\n\"\n    output += prettyXml__(document, \"\", attributeOrder)\n    return output\ndef cloneNode(doc, aNode):\n    e = doc.createElement(aNode.tagName)\n    if aNode.hasAttributes():\n        for i in range(aNode.attributes.length):\n            attr = aNode.attributes.item(i)\n            e.setAttribute(attr.name, aNode.getAttribute(attr.name))",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "cloneNode",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.xmltools",
        "description": "github.com.voltdb.voltdb.tools.xmltools",
        "peekOfCode": "def cloneNode(doc, aNode):\n    e = doc.createElement(aNode.tagName)\n    if aNode.hasAttributes():\n        for i in range(aNode.attributes.length):\n            attr = aNode.attributes.item(i)\n            e.setAttribute(attr.name, aNode.getAttribute(attr.name))\n    if aNode.hasChildNodes():\n        for cnode in aNode.childNodes:\n            if cnode.nodeType == Node.ELEMENT_NODE:\n                cnodeClone = cloneNode(doc, cnode)",
        "detail": "github.com.voltdb.voltdb.tools.xmltools",
        "documentation": {}
    },
    {
        "label": "getLatestKitBuildTag",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def getLatestKitBuildTag(conn,kit_pattern,appname_pattern) :\n    if (kit_pattern == \"latest\" or kit_pattern == None) :\n        sql=\"select kit_build_tag from app_stats where appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\"\n    else :\n        sql=\"select kit_build_tag from app_stats where kit_build_tag like '\"+kit_pattern+\"' and appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\";\n    proc = VoltProcedure(conn, \"@AdHoc\",[FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([sql])\n    res=resp.tables[0].tuples[0][0]\n    return res;\ndef get_stats(conn,build_tag) :",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "get_stats",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def get_stats(conn,build_tag) :\n    \"\"\"Get most recent run statistics of all apps within the last 'days'\n    \"\"\"\n    proc = VoltProcedure(conn, \"@AdHoc\",[FastSerializer.VOLTTYPE_STRING])\n    if ( build_tag == None ) :\n        print(\"No build tag provided\");\n        return;\n    else :\n        sql=\"select appname,nodes,duration,date,branch,throughput as tps,kit_build_tag as build,lat95,lat99 from app_stats where kit_build_tag = '\"+build_tag+\"' order by date desc,appname\"\n    #print(\"sql:\"+sql);",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "plotByWorkload",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def plotByWorkload(buckets,path,combograph=False,title='') :\n   # build the graphs\n    for build in buckets :\n        location = 0;\n        subplotlocations = {}\n        sblocation = 0;\n        # create a subplot for each ratio\n        numcols = 1\n        if ( combograph ):\n            fig = plt.figure(figsize=(70,20))",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def usage():\n    print \"Usage:\"\n    print \"\\t\", sys.argv[0], \"output_dir [build-tag|latest] [master-tag|latest]\"\n    print \"\\t example: ./ycsb-graphs.py /tmp/test jenkins-kit-performance-rambranch-build-73 latest\"\n    print \"\\t example: ./ycsb-graphs.py /tmp/test latest latest\"\n    print \"\\t example: ./ycsb-graphs.py /tmp/test latest jenkins-kit-performance-ycsb-zipfian-build-4\"\n    print \"if no master-tag is given, master stat's will not be included\"\n    print \"if latest is used, it will grab the latest version from the stats database\"\ndef main():\n    build_tag = None;",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def main():\n    build_tag = None;\n    master_tag = None;\n    if len(sys.argv) < 2:\n        usage()\n        exit(-1)\n    path = sys.argv[1];\n    if not os.path.exists(path):\n        print path, \" save path does not exist\"\n        exit(-1)",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "getBucketsByWorkload",
        "kind": 2,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "def getBucketsByWorkload(stats,mindate,maxdate) :\n    #root_path = path\n    filenames = []              # (appname, latency, throughput)\n    iorder = 0\n    buckets = {};\n    for data in stats:\n        app = data[\"app\"];\n        app = app.replace('/','')\n        # parse the appname so we can group them together: YCSB-Anticache-A-Z0.7-1:1\n        workload_group= re.search(r\"YCSB-Anticache-([A-Z]+)-Z(\\d+\\.\\d+)-(\\d:\\d)\",app);",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "STATS_SERVER",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "STATS_SERVER = 'perfstatsdb.voltdb.lan'\nCOLORS = ['b','g','c','m','k']\nMARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\nmc = {}\ndef getLatestKitBuildTag(conn,kit_pattern,appname_pattern) :\n    if (kit_pattern == \"latest\" or kit_pattern == None) :\n        sql=\"select kit_build_tag from app_stats where appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\"\n    else :\n        sql=\"select kit_build_tag from app_stats where kit_build_tag like '\"+kit_pattern+\"' and appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\";",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "COLORS = ['b','g','c','m','k']\nMARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\nmc = {}\ndef getLatestKitBuildTag(conn,kit_pattern,appname_pattern) :\n    if (kit_pattern == \"latest\" or kit_pattern == None) :\n        sql=\"select kit_build_tag from app_stats where appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\"\n    else :\n        sql=\"select kit_build_tag from app_stats where kit_build_tag like '\"+kit_pattern+\"' and appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\";\n    proc = VoltProcedure(conn, \"@AdHoc\",[FastSerializer.VOLTTYPE_STRING])",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "MARKERS",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "MARKERS = ['+', '*', '<', '>', '^', '_',\n           'D', 'H', 'd', 'h', 'o', 'p']\nmc = {}\ndef getLatestKitBuildTag(conn,kit_pattern,appname_pattern) :\n    if (kit_pattern == \"latest\" or kit_pattern == None) :\n        sql=\"select kit_build_tag from app_stats where appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\"\n    else :\n        sql=\"select kit_build_tag from app_stats where kit_build_tag like '\"+kit_pattern+\"' and appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\";\n    proc = VoltProcedure(conn, \"@AdHoc\",[FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([sql])",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "mc",
        "kind": 5,
        "importPath": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "description": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "peekOfCode": "mc = {}\ndef getLatestKitBuildTag(conn,kit_pattern,appname_pattern) :\n    if (kit_pattern == \"latest\" or kit_pattern == None) :\n        sql=\"select kit_build_tag from app_stats where appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\"\n    else :\n        sql=\"select kit_build_tag from app_stats where kit_build_tag like '\"+kit_pattern+\"' and appname like '\"+appname_pattern+\"' order by date desc,appname limit 1\";\n    proc = VoltProcedure(conn, \"@AdHoc\",[FastSerializer.VOLTTYPE_STRING])\n    resp = proc.call([sql])\n    res=resp.tables[0].tuples[0][0]\n    return res;",
        "detail": "github.com.voltdb.voltdb.tools.ycsb-graphs",
        "documentation": {}
    },
    {
        "label": "Buy",
        "kind": 6,
        "importPath": "py.buy",
        "description": "py.buy",
        "peekOfCode": "class Buy(Thread, MyWindow):\n    tx_signal = pyqtSignal(str)\n    rx_signal = pyqtSignal(str)\n    def __init__(self, user_param, cond):           \n        Thread.__init__(self)\n        MyWindow.__init__(self, user_param, cond)\n        self.user_param = user_param\n        self.rx_signal.connect(self.exec_order)\n    def exec_order(self, command):\n        if ',' in command:",
        "detail": "py.buy",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 6,
        "importPath": "py.database",
        "description": "py.database",
        "peekOfCode": "class database:\n    def load_tableList(self, con):\n        cursor = con.cursor()\n        cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n        tables = cursor.fetchall()\n        df_list = []\n        for tname in tables:\n            df_list.append(tname[0])\n        return df_list",
        "detail": "py.database",
        "documentation": {}
    },
    {
        "label": "get_data",
        "kind": 6,
        "importPath": "py.get_data",
        "description": "py.get_data",
        "peekOfCode": "class get_data:\n    def __init__(self, root):\n        self.root = root\n    def get_stock_list(self):\n        market = ['stockMkt', 'kosadqMkt']\n        url = 'https://kind.krx.co.kr/corpgeneral/corpList.do?method=download&searchType=13&marketType='\n        dfs = []\n        for m in market:\n            df = pd.read_html(url + m, header=0)[0]\n            if m == 'stockMkt':",
        "detail": "py.get_data",
        "documentation": {}
    },
    {
        "label": "Kiwoom",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class Kiwoom(QAxWidget, Write_db):\n    def __init__(self, user_param, cond):\n        super().__init__()\n        self.cond = cond\n        self.setControl(\"KHOPENAPI.KHOpenAPICtrl.1\")\n        # Loop 변수\n        # 비동기 방식으로 동작되는 이벤트를 동기화(순서대로 동작) 시킬 때\n        self.loginLoop = None\n        self.requestLoop = None\n        self.orderLoop = None",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "ParameterTypeError",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class ParameterTypeError(Exception):\n    \"\"\" 파라미터 타입이 일치하지 않을 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"파라미터로 사용할 수 없는 값 입니다.\"):\n        self.msg = msg\nclass ParameterTypeError(Exception):\n    \"\"\" 파라미터 타입이 일치하지 않을 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"파라미터 타입이 일치하지 않습니다.\"):\n        self.msg = msg\n    def __str__(self):\n        return self.msg",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "ParameterTypeError",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class ParameterTypeError(Exception):\n    \"\"\" 파라미터 타입이 일치하지 않을 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"파라미터 타입이 일치하지 않습니다.\"):\n        self.msg = msg\n    def __str__(self):\n        return self.msg\nclass ParameterValueError(Exception):\n    \"\"\" 파라미터로 사용할 수 없는 값을 사용할 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"파라미터로 사용할 수 없는 값 입니다.\"):\n        self.msg = msg",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "ParameterValueError",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class ParameterValueError(Exception):\n    \"\"\" 파라미터로 사용할 수 없는 값을 사용할 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"파라미터로 사용할 수 없는 값 입니다.\"):\n        self.msg = msg\n    def __str__(self):\n        return self.msg\nclass KiwoomProcessingError(Exception):\n    \"\"\" 키움에서 처리실패에 관련된 리턴코드를 받았을 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"처리 실패\"):\n        self.msg = msg",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "KiwoomProcessingError",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class KiwoomProcessingError(Exception):\n    \"\"\" 키움에서 처리실패에 관련된 리턴코드를 받았을 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"처리 실패\"):\n        self.msg = msg\n    def __str__(self):\n        return self.msg\n    def __repr__(self):\n        return self.msg\nclass KiwoomConnectError(Exception):\n    \"\"\" 키움서버에 로그인 상태가 아닐 경우 발생하는 예외 \"\"\"",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "KiwoomConnectError",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class KiwoomConnectError(Exception):\n    \"\"\" 키움서버에 로그인 상태가 아닐 경우 발생하는 예외 \"\"\"\n    def __init__(self, msg=\"로그인 여부를 확인하십시오\"):\n        self.msg = msg\n    def __str__(self):\n        return self.msg\nclass ReturnCode(object):\n    \"\"\" 키움 OpenApi+ 함수들이 반환하는 값 \"\"\"\n    OP_ERR_NONE = 0 # 정상처리\n    OP_ERR_FAIL = -10   # 실패",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "ReturnCode",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class ReturnCode(object):\n    \"\"\" 키움 OpenApi+ 함수들이 반환하는 값 \"\"\"\n    OP_ERR_NONE = 0 # 정상처리\n    OP_ERR_FAIL = -10   # 실패\n    OP_ERR_LOGIN = -100 # 사용자정보교환실패\n    OP_ERR_CONNECT = -101   # 서버접속실패\n    OP_ERR_VERSION = -102   # 버전처리실패\n    OP_ERR_FIREWALL = -103  # 개인방화벽실패\n    OP_ERR_MEMORY = -104    # 메모리보호실패\n    OP_ERR_INPUT = -105 # 함수입력값오류",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "FidList",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class FidList(object):\n    \"\"\" receiveChejanData() 이벤트 메서드로 전달되는 FID 목록 \"\"\"\n    CHEJAN = {\n        9201: '계좌번호',\n        9203: '주문번호',\n        9205: '관리자사번',\n        9001: '종목코드',\n        912: '주문업무분류',\n        913: '주문상태',\n        302: '종목명',",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "RealType",
        "kind": 6,
        "importPath": "py.Kiwoom",
        "description": "py.Kiwoom",
        "peekOfCode": "class RealType(object):\n    REALTYPE = {\n        '주식시세': {\n            10: '현재가',\n            11: '전일대비',\n            12: '등락율',\n            27: '최우선매도호가',\n            28: '최우선매수호가',\n            13: '누적거래량',\n            14: '누적거래대금',",
        "detail": "py.Kiwoom",
        "documentation": {}
    },
    {
        "label": "account",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "account = []\nwith open(\"C:\\\\Users\\\\seoga\\\\PycharmProjects\\\\PyTrader\\\\account.txt\", 'r') as f:\n    account = f.readlines()\n# 번개2 실행 및 로그인\napp = application.Application()\napp.start(\"C:\\Kiwoom\\KiwoomFlash2\\khministarter.exe\")\ntitle = \"번개 Login\"\ndlg = timings.WaitUntilPasses(20, 0.5, lambda: app.window_(title=title))\nidForm = dlg.Edit0\nidForm.SetFocus()",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "app = application.Application()\napp.start(\"C:\\Kiwoom\\KiwoomFlash2\\khministarter.exe\")\ntitle = \"번개 Login\"\ndlg = timings.WaitUntilPasses(20, 0.5, lambda: app.window_(title=title))\nidForm = dlg.Edit0\nidForm.SetFocus()\nidForm.TypeKeys(account[0])\npassForm = dlg.Edit2\npassForm.SetFocus()\npassForm.TypeKeys(account[1])",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "title",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "title = \"번개 Login\"\ndlg = timings.WaitUntilPasses(20, 0.5, lambda: app.window_(title=title))\nidForm = dlg.Edit0\nidForm.SetFocus()\nidForm.TypeKeys(account[0])\npassForm = dlg.Edit2\npassForm.SetFocus()\npassForm.TypeKeys(account[1])\ncertForm = dlg.Edit3\ncertForm.SetFocus()",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "dlg",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "dlg = timings.WaitUntilPasses(20, 0.5, lambda: app.window_(title=title))\nidForm = dlg.Edit0\nidForm.SetFocus()\nidForm.TypeKeys(account[0])\npassForm = dlg.Edit2\npassForm.SetFocus()\npassForm.TypeKeys(account[1])\ncertForm = dlg.Edit3\ncertForm.SetFocus()\ncertForm.TypeKeys(account[2])",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "idForm",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "idForm = dlg.Edit0\nidForm.SetFocus()\nidForm.TypeKeys(account[0])\npassForm = dlg.Edit2\npassForm.SetFocus()\npassForm.TypeKeys(account[1])\ncertForm = dlg.Edit3\ncertForm.SetFocus()\ncertForm.TypeKeys(account[2])\nloginBtn = dlg.Button0",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "passForm",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "passForm = dlg.Edit2\npassForm.SetFocus()\npassForm.TypeKeys(account[1])\ncertForm = dlg.Edit3\ncertForm.SetFocus()\ncertForm.TypeKeys(account[2])\nloginBtn = dlg.Button0\nloginBtn.Click()\n# 업데이트가 완료될 때 까지 대기\nwhile True:",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "certForm",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "certForm = dlg.Edit3\ncertForm.SetFocus()\ncertForm.TypeKeys(account[2])\nloginBtn = dlg.Button0\nloginBtn.Click()\n# 업데이트가 완료될 때 까지 대기\nwhile True:\n    time.sleep(5)\n    with os.popen('tasklist /FI \"IMAGENAME eq khmini.exe\"') as f:\n        lines = f.readlines()",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "loginBtn",
        "kind": 5,
        "importPath": "py.kiwoomauto",
        "description": "py.kiwoomauto",
        "peekOfCode": "loginBtn = dlg.Button0\nloginBtn.Click()\n# 업데이트가 완료될 때 까지 대기\nwhile True:\n    time.sleep(5)\n    with os.popen('tasklist /FI \"IMAGENAME eq khmini.exe\"') as f:\n        lines = f.readlines()\n        if len(lines) >= 3:\n            break\n# 번개2 종료",
        "detail": "py.kiwoomauto",
        "documentation": {}
    },
    {
        "label": "Main",
        "kind": 6,
        "importPath": "py.Main",
        "description": "py.Main",
        "peekOfCode": "class Main:\n    def __init__(self):\n        self.threads = {}\n    def load_param(self):\n        with open(\"parameter.json\") as json_file:\n            return json.load(json_file)\n    def connect_order(self, command):\n        from_signal, to_signal, func = command.split(';')\n        self.threads[to_signal].rx_signal.emit(func)\n    def run(self):",
        "detail": "py.Main",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "py.order",
        "description": "py.order",
        "peekOfCode": "class Order(Write_db):\n    def __init__(self):\n        self.columns = ['tid', 'code', 'name', 'id', 'qty', 'cum_qty', 'buy_price', 'buy_datetime', 'sell_price',\n                        'sell_datetime', 'stop_price', 'due_date', 'profit', 'trade', 'state', 'algorithm']\n        self.hogaTypeTable = {\"지정가\": \"00\", \"시장가\": \"03\"}\n    @staticmethod\n    def roundTime(dt=None, roundTo=60, round='up'):\n        \"\"\"Round a datetime object to any time lapse in seconds\n        dt : datetime.datetime object, default now.\n        roundTo : Closest number of seconds to round to, default 1 minute.",
        "detail": "py.order",
        "documentation": {}
    },
    {
        "label": "MyWindow",
        "kind": 6,
        "importPath": "py.pytrader",
        "description": "py.pytrader",
        "peekOfCode": "class MyWindow(QMainWindow, ui, Order):\n    def __init__(self, user_param, cond):\n        super().__init__()\n        self.setupUi(self)\n        self.show()\n        self.user_param = user_param\n        self.kiwoom = Kiwoom(self.user_param, cond)\n        self.kiwoom.commConnect()\n        self.kiwoom.setAccount()\n        self.server = self.kiwoom.getLoginInfo(\"GetServerGubun\")",
        "detail": "py.pytrader",
        "documentation": {}
    },
    {
        "label": "ui",
        "kind": 5,
        "importPath": "py.pytrader",
        "description": "py.pytrader",
        "peekOfCode": "ui = uic.loadUiType(\"pytrader.ui\")[0]\nclass MyWindow(QMainWindow, ui, Order):\n    def __init__(self, user_param, cond):\n        super().__init__()\n        self.setupUi(self)\n        self.show()\n        self.user_param = user_param\n        self.kiwoom = Kiwoom(self.user_param, cond)\n        self.kiwoom.commConnect()\n        self.kiwoom.setAccount()",
        "detail": "py.pytrader",
        "documentation": {}
    },
    {
        "label": "Sell",
        "kind": 6,
        "importPath": "py.sell",
        "description": "py.sell",
        "peekOfCode": "class Sell(QThread):\n    tx_signal = pyqtSignal(str)\n    rx_signal = pyqtSignal(str)\n    def __init__(self, user_param, cond):\n        super(Sell, self).__init__()\n        self.user_param = user_param\n        self.cond = cond\n        self.rx_signal.connect(self.exec_order)\n    def __set_time_format(self, date, time):\n        return datetime.datetime.strptime(date + ' ' + time, \"%Y-%m-%d %H:%M:%S\")",
        "detail": "py.sell",
        "documentation": {}
    },
    {
        "label": "sim_ma5",
        "kind": 6,
        "importPath": "py.sim_ma5",
        "description": "py.sim_ma5",
        "peekOfCode": "class sim_ma5:\n    def __init__(self, root):\n        self.root = root\n    def run(self):\n        con = sqlite3.connect(os.path.join(self.root, 'database', 'day_candle.db'))\n        db = database()\n        codeList = db.load_tableList(con)\n        result = []\n        for code in codeList:\n            df = pd.read_sql(\"SELECT * FROM '{}'\".format(code), con, index_col='Date')",
        "detail": "py.sim_ma5",
        "documentation": {}
    },
    {
        "label": "Write_db",
        "kind": 6,
        "importPath": "py.write_db",
        "description": "py.write_db",
        "peekOfCode": "class Write_db:\n    def append_db(self, con, tname, items):\n        self.__dict__['cond'].acquire()\n        cursor = con.cursor()\n        sql = \"INSERT INTO '{}'\".format(tname) + 'VALUES(' + ','.join(['?'] * len(items)) + ')'\n        print(sql)\n        cursor.execute(sql, items)\n        con.commit()\n        self.__dict__['cond'].notify()\n        self.__dict__['cond'].release()",
        "detail": "py.write_db",
        "documentation": {}
    }
]